{"version":3,"file":"i18n_plural_pipe.js","sourceRoot":"","sources":["../../../../../../modules/@angular/common/src/pipes/i18n_plural_pipe.ts"],"names":[],"mappings":";AAAA,uBAA8C,eAAe,CAAC,CAAA;AAC9D,uBAAmE,uBAAuB,CAAC,CAAA;AAC3F,kDAA2C,mCAAmC,CAAC,CAAA;AAE/E,IAAI,gBAAgB,CAAC,gBAAgB,GAAW,oBAAa,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AAC1E;IACA;;;;OAIG;IACH,SAAS,CAAC,KAAa,EAAE,SAAoC;QACzD,IAAI,gBAAgB,CAAC,GAAW,CAAC;QACjC,IAAI,gBAAgB,CAAC,QAAgB,CAAC;QAEtC,EAAE,CAAC,CAAC,CAAC,kBAAW,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YAC5B,MAAM,IAAI,8DAA4B,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC;QACpE,CAAC;QAED,GAAG,GAAG,KAAK,KAAK,CAAC,IAAI,KAAK,KAAK,CAAC,GAAG,IAAI,KAAK,EAAE,GAAG,OAAO,CAAC;QACzD,QAAQ,GAAG,gBAAS,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,QAAQ,EAAE,GAAG,EAAE,CAAC;QAEpD,MAAM,CAAC,oBAAa,CAAC,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,gBAAgB,EAAE,QAAQ,CAAC,CAAC;IAC9E,CAAC;AAKH,CAAC;AAJM,yBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,WAAI,EAAE,IAAI,EAAE,CAAC,EAAC,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,IAAI,EAAC,EAAG,EAAE;IAC1D,EAAE,IAAI,EAAE,iBAAU,EAAE;CACnB,CAAC;AAtBW,sBAAc,iBAuB1B,CAAA","sourcesContent":["import {Injectable, PipeTransform, Pipe} from '@angular/core';\nimport {isStringMap, StringWrapper, isPresent, RegExpWrapper} from '../../src/facade/lang';\nimport {InvalidPipeArgumentException} from './invalid_pipe_argument_exception';\n\nvar /** @type {?} */ interpolationExp: RegExp = RegExpWrapper.create('#');\nexport class I18nPluralPipe implements PipeTransform {\n/**\n * @param {?} value\n * @param {?} pluralMap\n * @return {?}\n */\ntransform(value: number, pluralMap: {[count: string]: string}): string {\n    var /** @type {?} */ key: string;\n    var /** @type {?} */ valueStr: string;\n\n    if (!isStringMap(pluralMap)) {\n      throw new InvalidPipeArgumentException(I18nPluralPipe, pluralMap);\n    }\n\n    key = value === 0 || value === 1 ? `=${value}` : 'other';\n    valueStr = isPresent(value) ? value.toString() : '';\n\n    return StringWrapper.replaceAll(pluralMap[key], interpolationExp, valueStr);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'i18nPlural', pure: true}, ] },\n{ type: Injectable },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}