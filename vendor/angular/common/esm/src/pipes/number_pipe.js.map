{"version":3,"file":"number_pipe.js","sourceRoot":"","sources":["../../../../../../modules/@angular/common/src/pipes/number_pipe.ts"],"names":[],"mappings":";AAAA,uBAA4D,eAAe,CAAC,CAAA;AAE5E,uBAMO,uBAAuB,CAAC,CAAA;AAC/B,6BAA4B,6BAA6B,CAAC,CAAA;AAC1D,uBAAiD,uBAAuB,CAAC,CAAA;AAGzE,kDAA2C,mCAAmC,CAAC,CAAA;AAE/E,IAAI,gBAAgB,CAAC,aAAa,GAAW,OAAO,CAAC;AACrD,IAAI,gBAAgB,CAAC,GAAG,GAAG,oBAAa,CAAC,MAAM,CAAC,mCAAmC,CAAC,CAAC;AACrF;IACA;;;;;;;;OAQG;IACH,OAAO,OAAO,CAAC,KAAa,EAAE,KAAwB,EAAE,MAAc,EAAE,QAAQ,GAAW,IAAI,EAC9E,gBAAgB,GAAY,KAAK;QAC9C,EAAE,CAAC,CAAC,cAAO,CAAC,KAAK,CAAC,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC;QAChC,EAAE,CAAC,CAAC,CAAC,eAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACrB,MAAM,IAAI,8DAA4B,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;QAC5D,CAAC;QACD,IAAI,gBAAgB,CAAC,MAAM,GAAG,CAAC,EAAE,gBAAgB,CAAC,WAAW,GAAG,CAAC,EAAE,gBAAgB,CAAC,WAAW,GAAG,CAAC,CAAC;QACpG,EAAE,CAAC,CAAC,gBAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACtB,IAAI,gBAAgB,CAAC,KAAK,GAAG,oBAAa,CAAC,UAAU,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;YACnE,EAAE,CAAC,CAAC,cAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACnB,MAAM,IAAI,0BAAa,CAAC,GAAG,MAAM,6CAA6C,CAAC,CAAC;YAClF,CAAC;YACD,EAAE,CAAC,CAAC,gBAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACxB,MAAM,GAAG,oBAAa,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACrD,CAAC;YACD,EAAE,CAAC,CAAC,gBAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACxB,WAAW,GAAG,oBAAa,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1D,CAAC;YACD,EAAE,CAAC,CAAC,gBAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACxB,WAAW,GAAG,oBAAa,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1D,CAAC;QACH,CAAC;QACD,MAAM,CAAC,sBAAe,CAAC,MAAM,CAAC,KAAK,EAAE,aAAa,EAAE,KAAK,EAAE;YACzD,oBAAoB,EAAE,MAAM;YAC5B,qBAAqB,EAAE,WAAW;YAClC,qBAAqB,EAAE,WAAW;YAClC,QAAQ,EAAE,QAAQ;YAClB,gBAAgB,EAAE,gBAAgB;SACnC,CAAC,CAAC;IACL,CAAC;AAIH,CAAC;AAHM,qBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,iBAAU,EAAE;CACnB,CAAC;AA1CW,kBAAU,aA2CtB,CAAA;AACD,0BAAiC,UAAU;IAC3C;;;;OAIG;IACH,SAAS,CAAC,KAAU,EAAE,MAAM,GAAW,IAAI;QACvC,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,EAAE,wBAAiB,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;IACtE,CAAC;AAKH,CAAC;AAJM,sBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,WAAI,EAAE,IAAI,EAAE,CAAC,EAAC,IAAI,EAAE,QAAQ,EAAC,EAAG,EAAE;IAC1C,EAAE,IAAI,EAAE,iBAAU,EAAE;CACnB,CAAC;AAZW,mBAAW,cAavB,CAAA;AACD,0BAAiC,UAAU;IAC3C;;;;OAIG;IACH,SAAS,CAAC,KAAU,EAAE,MAAM,GAAW,IAAI;QACvC,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,EAAE,wBAAiB,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;IACtE,CAAC;AAKH,CAAC;AAJM,sBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,WAAI,EAAE,IAAI,EAAE,CAAC,EAAC,IAAI,EAAE,SAAS,EAAC,EAAG,EAAE;IAC3C,EAAE,IAAI,EAAE,iBAAU,EAAE;CACnB,CAAC;AAZW,mBAAW,cAavB,CAAA;AACD,2BAAkC,UAAU;IAC5C;;;;;;OAMG;IACH,SAAS,CAAC,KAAU,EAAE,YAAY,GAAW,KAAK,EAAE,aAAa,GAAY,KAAK,EACtE,MAAM,GAAW,IAAI;QAC7B,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,EAAE,wBAAiB,CAAC,QAAQ,EAAE,MAAM,EAAE,YAAY,EACvD,aAAa,CAAC,CAAC;IAC3C,CAAC;AAKH,CAAC;AAJM,uBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,WAAI,EAAE,IAAI,EAAE,CAAC,EAAC,IAAI,EAAE,UAAU,EAAC,EAAG,EAAE;IAC5C,EAAE,IAAI,EAAE,iBAAU,EAAE;CACnB,CAAC;AAhBW,oBAAY,eAiBxB,CAAA","sourcesContent":["import {Injectable, PipeTransform, WrappedValue, Pipe} from '@angular/core';\n\nimport {\n  isNumber,\n  isPresent,\n  isBlank,\n  NumberWrapper,\n  RegExpWrapper,\n} from '../../src/facade/lang';\nimport {BaseException} from '../../src/facade/exceptions';\nimport {NumberFormatter, NumberFormatStyle} from '../../src/facade/intl';\nimport {ListWrapper} from '../../src/facade/collection';\n\nimport {InvalidPipeArgumentException} from './invalid_pipe_argument_exception';\n\nvar /** @type {?} */ defaultLocale: string = 'en-US';\nvar /** @type {?} */ _re = RegExpWrapper.create('^(\\\\d+)?\\\\.((\\\\d+)(\\\\-(\\\\d+))?)?$');\nexport class NumberPipe {\n/**\n * @internal\n * @param {?} value\n * @param {?} style\n * @param {?} digits\n * @param {?=} currency\n * @param {?=} currencyAsSymbol\n * @return {?}\n */\nstatic _format(value: number, style: NumberFormatStyle, digits: string, currency: string = null,\n                 currencyAsSymbol: boolean = false): string {\n    if (isBlank(value)) return null;\n    if (!isNumber(value)) {\n      throw new InvalidPipeArgumentException(NumberPipe, value);\n    }\n    var /** @type {?} */ minInt = 1, /** @type {?} */ minFraction = 0, /** @type {?} */ maxFraction = 3;\n    if (isPresent(digits)) {\n      var /** @type {?} */ parts = RegExpWrapper.firstMatch(_re, digits);\n      if (isBlank(parts)) {\n        throw new BaseException(`${digits} is not a valid digit info for number pipes`);\n      }\n      if (isPresent(parts[1])) {  // min integer digits\n        minInt = NumberWrapper.parseIntAutoRadix(parts[1]);\n      }\n      if (isPresent(parts[3])) {  // min fraction digits\n        minFraction = NumberWrapper.parseIntAutoRadix(parts[3]);\n      }\n      if (isPresent(parts[5])) {  // max fraction digits\n        maxFraction = NumberWrapper.parseIntAutoRadix(parts[5]);\n      }\n    }\n    return NumberFormatter.format(value, defaultLocale, style, {\n      minimumIntegerDigits: minInt,\n      minimumFractionDigits: minFraction,\n      maximumFractionDigits: maxFraction,\n      currency: currency,\n      currencyAsSymbol: currencyAsSymbol\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n}\nexport class DecimalPipe extends NumberPipe implements PipeTransform {\n/**\n * @param {?} value\n * @param {?=} digits\n * @return {?}\n */\ntransform(value: any, digits: string = null): string {\n    return NumberPipe._format(value, NumberFormatStyle.Decimal, digits);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'number'}, ] },\n{ type: Injectable },\n];\n}\nexport class PercentPipe extends NumberPipe implements PipeTransform {\n/**\n * @param {?} value\n * @param {?=} digits\n * @return {?}\n */\ntransform(value: any, digits: string = null): string {\n    return NumberPipe._format(value, NumberFormatStyle.Percent, digits);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'percent'}, ] },\n{ type: Injectable },\n];\n}\nexport class CurrencyPipe extends NumberPipe implements PipeTransform {\n/**\n * @param {?} value\n * @param {?=} currencyCode\n * @param {?=} symbolDisplay\n * @param {?=} digits\n * @return {?}\n */\ntransform(value: any, currencyCode: string = 'USD', symbolDisplay: boolean = false,\n            digits: string = null): string {\n    return NumberPipe._format(value, NumberFormatStyle.Currency, digits, currencyCode,\n                              symbolDisplay);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'currency'}, ] },\n{ type: Injectable },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}