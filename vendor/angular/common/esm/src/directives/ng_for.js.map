{"version":3,"file":"ng_for.js","sourceRoot":"","sources":["../../../../../../modules/@angular/common/src/directives/ng_for.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  DoCheck,\n  Directive,\n  ChangeDetectorRef,\n  IterableDiffer,\n  IterableDiffers,\n  ViewContainerRef,\n  TemplateRef,\n  EmbeddedViewRef,\n  TrackByFn,\n  DefaultIterableDiffer,\n  CollectionChangeRecord\n} from '@angular/core';\nimport {isPresent, isBlank, getTypeNameForDebugging} from '../../src/facade/lang';\nimport {BaseException} from '../../src/facade/exceptions';\n\nexport class NgForRow {\n/**\n * @param {?} $implicit\n * @param {?} index\n * @param {?} count\n */\nconstructor(public $implicit: any,\npublic index: number,\npublic count: number) {}\n\n  get first(): boolean { return this.index === 0; }\n\n  get last(): boolean { return this.index === this.count - 1; }\n\n  get even(): boolean { return this.index % 2 === 0; }\n\n  get odd(): boolean { return !this.even; }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nNgForRow.prototype.$implicit;\n /** @type {?} */\nNgForRow.prototype.index;\n /** @type {?} */\nNgForRow.prototype.count;\n  }\n\n}\nexport class NgFor implements DoCheck {\n  /** @internal */\n  _ngForOf: any;\n  /** @internal */\n  _ngForTrackBy: TrackByFn;\nprivate _differ: IterableDiffer;\n/**\n * @param {?} _viewContainer\n * @param {?} _templateRef\n * @param {?} _iterableDiffers\n * @param {?} _cdr\n */\nconstructor(private _viewContainer: ViewContainerRef,\nprivate _templateRef: TemplateRef<NgForRow>,\nprivate _iterableDiffers: IterableDiffers,\nprivate _cdr: ChangeDetectorRef) {}\n\n  set ngForOf(value: any) {\n    this._ngForOf = value;\n    if (isBlank(this._differ) && isPresent(value)) {\n      try {\n        this._differ = this._iterableDiffers.find(value).create(this._cdr, this._ngForTrackBy);\n      } catch ( /** @type {?} */e) {\n        throw new BaseException(\n            `Cannot find a differ supporting object '${value}' of type '${getTypeNameForDebugging(value)}'. NgFor only supports binding to Iterables such as Arrays.`);\n      }\n    }\n  }\n\n  set ngForTemplate(value: TemplateRef<NgForRow>) {\n    if (isPresent(value)) {\n      this._templateRef = value;\n    }\n  }\n\n  set ngForTrackBy(value: TrackByFn) { this._ngForTrackBy = value; }\n/**\n * @return {?}\n */\nngDoCheck() {\n    if (isPresent(this._differ)) {\n      var /** @type {?} */ changes = this._differ.diff(this._ngForOf);\n      if (isPresent(changes)) this._applyChanges(changes);\n    }\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nprivate _applyChanges(changes: DefaultIterableDiffer) {\n    // TODO(rado): check if change detection can produce a change record that is\n    // easier to consume than current.\n    var /** @type {?} */ recordViewTuples: RecordViewTuple[] = [];\n    changes.forEachRemovedItem((removedRecord: CollectionChangeRecord) =>\n                                   recordViewTuples.push(new RecordViewTuple(removedRecord, null)));\n\n    changes.forEachMovedItem((movedRecord: CollectionChangeRecord) =>\n                                 recordViewTuples.push(new RecordViewTuple(movedRecord, null)));\n\n    var /** @type {?} */ insertTuples = this._bulkRemove(recordViewTuples);\n\n    changes.forEachAddedItem((addedRecord: CollectionChangeRecord) =>\n                                 insertTuples.push(new RecordViewTuple(addedRecord, null)));\n\n    this._bulkInsert(insertTuples);\n\n    for (var /** @type {?} */ i = 0; i < insertTuples.length; i++) {\n      this._perViewChange(insertTuples[i].view, insertTuples[i].record);\n    }\n\n    for (var /** @type {?} */ i = 0, /** @type {?} */ ilen = this._viewContainer.length; i < ilen; i++) {\n      var /** @type {?} */ viewRef = /** @type {?} */(( <EmbeddedViewRef<NgForRow>>this._viewContainer.get(i)));\n      viewRef.context.index = i;\n      viewRef.context.count = ilen;\n    }\n\n    changes.forEachIdentityChange((record) => {\n      var /** @type {?} */ viewRef = /** @type {?} */(( <EmbeddedViewRef<NgForRow>>this._viewContainer.get(record.currentIndex)));\n      viewRef.context.$implicit = record.item;\n    });\n  }\n/**\n * @param {?} view\n * @param {?} record\n * @return {?}\n */\nprivate _perViewChange(view: EmbeddedViewRef<NgForRow>, record: CollectionChangeRecord) {\n    view.context.$implicit = record.item;\n  }\n/**\n * @param {?} tuples\n * @return {?}\n */\nprivate _bulkRemove(tuples: RecordViewTuple[]): RecordViewTuple[] {\n    tuples.sort((a: RecordViewTuple, b: RecordViewTuple) =>\n                    a.record.previousIndex - b.record.previousIndex);\n    var /** @type {?} */ movedTuples: RecordViewTuple[] = [];\n    for (var /** @type {?} */ i = tuples.length - 1; i >= 0; i--) {\n      var /** @type {?} */ tuple = tuples[i];\n      // separate moved views from removed views.\n      if (isPresent(tuple.record.currentIndex)) {\n        tuple.view = /** @type {?} */((\n            <EmbeddedViewRef<NgForRow>>this._viewContainer.detach(tuple.record.previousIndex)));\n        movedTuples.push(tuple);\n      } else {\n        this._viewContainer.remove(tuple.record.previousIndex);\n      }\n    }\n    return movedTuples;\n  }\n/**\n * @param {?} tuples\n * @return {?}\n */\nprivate _bulkInsert(tuples: RecordViewTuple[]): RecordViewTuple[] {\n    tuples.sort((a, b) => a.record.currentIndex - b.record.currentIndex);\n    for (var /** @type {?} */ i = 0; i < tuples.length; i++) {\n      var /** @type {?} */ tuple = tuples[i];\n      if (isPresent(tuple.view)) {\n        this._viewContainer.insert(tuple.view, tuple.record.currentIndex);\n      } else {\n        tuple.view = this._viewContainer.createEmbeddedView(\n            this._templateRef, new NgForRow(null, null, null), tuple.record.currentIndex);\n      }\n    }\n    return tuples;\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @internal\n @type {?} */\nNgFor.prototype._ngForOf;\n /** @internal\n @type {?} */\nNgFor.prototype._ngForTrackBy;\n /** @type {?} */\nNgFor.prototype._differ;\n /** @type {?} */\nNgFor.prototype._viewContainer;\n /** @type {?} */\nNgFor.prototype._templateRef;\n /** @type {?} */\nNgFor.prototype._iterableDiffers;\n /** @type {?} */\nNgFor.prototype._cdr;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngFor][ngForOf]', inputs: ['ngForTrackBy', 'ngForOf', 'ngForTemplate']}, ] },\n];\n/** @nocollapse */ static ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: ViewContainerRef, },\n{type: TemplateRef, },\n{type: IterableDiffers, },\n{type: ChangeDetectorRef, },\n];\n}\n\nclass RecordViewTuple {\n  view: EmbeddedViewRef<NgForRow>;\n  record: any;\n/**\n * @param {?} record\n * @param {?} view\n */\nconstructor(record: any, view: EmbeddedViewRef<NgForRow>) {\n    this.record = record;\n    this.view = view;\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nRecordViewTuple.prototype.view;\n /** @type {?} */\nRecordViewTuple.prototype.record;\n  }\n\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}