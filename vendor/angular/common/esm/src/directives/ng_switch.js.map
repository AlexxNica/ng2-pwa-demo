{"version":3,"file":"ng_switch.js","sourceRoot":"","sources":["../../../../../../modules/@angular/common/src/directives/ng_switch.ts"],"names":[],"mappings":"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","sourcesContent":["import {Directive, Host, ViewContainerRef, TemplateRef} from '@angular/core';\nimport {isPresent, isBlank, normalizeBlank} from '../../src/facade/lang';\nimport {ListWrapper, Map} from '../../src/facade/collection';\n\nconst /** @type {?} */ _WHEN_DEFAULT = /*@ts2dart_const*/ new Object();\n\nexport class SwitchView {\n/**\n * @param {?} _viewContainerRef\n * @param {?} _templateRef\n */\nconstructor(private _viewContainerRef: ViewContainerRef,\nprivate _templateRef: TemplateRef<Object>) {}\n/**\n * @return {?}\n */\ncreate(): void { this._viewContainerRef.createEmbeddedView(this._templateRef); }\n/**\n * @return {?}\n */\ndestroy(): void { this._viewContainerRef.clear(); }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nSwitchView.prototype._viewContainerRef;\n /** @type {?} */\nSwitchView.prototype._templateRef;\n  }\n\n}\nexport class NgSwitch {\nprivate _switchValue: any;\nprivate _useDefault: boolean = false;\nprivate _valueViews = new Map<any, SwitchView[]>();\nprivate _activeViews: SwitchView[] = [];\n\n  set ngSwitch(value: any) {\n    // Empty the currently active ViewContainers\n    this._emptyAllActiveViews();\n\n    // Add the ViewContainers matching the value (with a fallback to default)\n    this._useDefault = false;\n    var /** @type {?} */ views = this._valueViews.get(value);\n    if (isBlank(views)) {\n      this._useDefault = true;\n      views = normalizeBlank(this._valueViews.get(_WHEN_DEFAULT));\n    }\n    this._activateViews(views);\n\n    this._switchValue = value;\n  }\n/**\n * @internal\n * @param {?} oldWhen\n * @param {?} newWhen\n * @param {?} view\n * @return {?}\n */\n_onWhenValueChanged(oldWhen: any, newWhen: any, view: SwitchView): void {\n    this._deregisterView(oldWhen, view);\n    this._registerView(newWhen, view);\n\n    if (oldWhen === this._switchValue) {\n      view.destroy();\n      ListWrapper.remove(this._activeViews, view);\n    } else if (newWhen === this._switchValue) {\n      if (this._useDefault) {\n        this._useDefault = false;\n        this._emptyAllActiveViews();\n      }\n      view.create();\n      this._activeViews.push(view);\n    }\n\n    // Switch to default when there is no more active ViewContainers\n    if (this._activeViews.length === 0 && !this._useDefault) {\n      this._useDefault = true;\n      this._activateViews(this._valueViews.get(_WHEN_DEFAULT));\n    }\n  }\n/**\n * @internal\n * @return {?}\n */\n_emptyAllActiveViews(): void {\n    var /** @type {?} */ activeContainers = this._activeViews;\n    for (var /** @type {?} */ i = 0; i < activeContainers.length; i++) {\n      activeContainers[i].destroy();\n    }\n    this._activeViews = [];\n  }\n/**\n * @internal\n * @param {?} views\n * @return {?}\n */\n_activateViews(views: SwitchView[]): void {\n    // TODO(vicb): assert(this._activeViews.length === 0);\n    if (isPresent(views)) {\n      for (var /** @type {?} */ i = 0; i < views.length; i++) {\n        views[i].create();\n      }\n      this._activeViews = views;\n    }\n  }\n/**\n * @internal\n * @param {?} value\n * @param {?} view\n * @return {?}\n */\n_registerView(value: any, view: SwitchView): void {\n    var /** @type {?} */ views = this._valueViews.get(value);\n    if (isBlank(views)) {\n      views = [];\n      this._valueViews.set(value, views);\n    }\n    views.push(view);\n  }\n/**\n * @internal\n * @param {?} value\n * @param {?} view\n * @return {?}\n */\n_deregisterView(value: any, view: SwitchView): void {\n    // `_WHEN_DEFAULT` is used a marker for non-registered whens\n    if (value === _WHEN_DEFAULT) return;\n    var /** @type {?} */ views = this._valueViews.get(value);\n    if (views.length == 1) {\n      this._valueViews.delete(value);\n    } else {\n      ListWrapper.remove(views, view);\n    }\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nNgSwitch.prototype._switchValue;\n /** @type {?} */\nNgSwitch.prototype._useDefault;\n /** @type {?} */\nNgSwitch.prototype._valueViews;\n /** @type {?} */\nNgSwitch.prototype._activeViews;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngSwitch]', inputs: ['ngSwitch']}, ] },\n];\n}\nexport class NgSwitchWhen {\n  // `_WHEN_DEFAULT` is used as a marker for a not yet initialized value\n  /** @internal */\n  _value: any = _WHEN_DEFAULT;\n  /** @internal */\n  _view: SwitchView;\nprivate _switch: NgSwitch;\n/**\n * @param {?} viewContainer\n * @param {?} templateRef\n * @param {?} ngSwitch\n */\nconstructor(viewContainer: ViewContainerRef, templateRef: TemplateRef<Object>, ngSwitch: NgSwitch) {\n    this._switch = ngSwitch;\n    this._view = new SwitchView(viewContainer, templateRef);\n  }\n\n  set ngSwitchWhen(value: any) {\n    this._switch._onWhenValueChanged(this._value, value, this._view);\n    this._value = value;\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @internal\n @type {?} */\nNgSwitchWhen.prototype._value;\n /** @internal\n @type {?} */\nNgSwitchWhen.prototype._view;\n /** @type {?} */\nNgSwitchWhen.prototype._switch;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngSwitchWhen]', inputs: ['ngSwitchWhen']}, ] },\n];\n/** @nocollapse */ static ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: ViewContainerRef, },\n{type: TemplateRef, },\n{type: NgSwitch, decorators: [{ type: Host }, ]},\n];\n}\nexport class NgSwitchDefault {\n/**\n * @param {?} viewContainer\n * @param {?} templateRef\n * @param {?} sswitch\n */\nconstructor(viewContainer: ViewContainerRef, templateRef: TemplateRef<Object>, sswitch: NgSwitch) {\n    sswitch._registerView(_WHEN_DEFAULT, new SwitchView(viewContainer, templateRef));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngSwitchDefault]'}, ] },\n];\n/** @nocollapse */ static ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: ViewContainerRef, },\n{type: TemplateRef, },\n{type: NgSwitch, decorators: [{ type: Host }, ]},\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}