{"version":3,"file":"promise.js","sourceRoot":"","sources":["../../../../../../modules/@angular/common/src/facade/promise.ts"],"names":[],"mappings":";AACA;IAIA;OACG;IACH;QACI,IAAI,CAAC,OAAO,GAAG,IAAI,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG;YAClC,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC;YACnB,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC;QACpB,CAAC,CAAC,CAAC;IACL,CAAC;IAED,OAAO,8BAA8B;QACtC,gBAAgB;QACjB,gBAAgB,CAAC,SAAS,CAAC,OAAO,CAAC;QAClC,gBAAgB;QACjB,gBAAgB,CAAC,SAAS,CAAC,OAAO,CAAC;QAClC,gBAAgB;QACjB,gBAAgB,CAAC,SAAS,CAAC,MAAM,CAAC;IAChC,CAAC;AAEH,CAAC;AAtBY,wBAAgB,mBAsB5B,CAAA;AAED;IACA;;;OAGG;IACH,OAAO,OAAO,CAAI,GAAM,IAAgB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACtE;;;;OAIG;IACH,OAAO,MAAM,CAAC,GAAQ,EAAE,CAAC,IAAkB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACxE;;;;OAIG;IACH,OAAO,UAAU,CAAI,OAAmB,EACjB,OAA2C;QAC9D,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;IAChC,CAAC;IACH;;;OAGG;IACH,OAAO,GAAG,CAAI,QAA4B;QACtC,EAAE,CAAC,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAC,CAAC;YAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QACrD,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAC/B,CAAC;IACH;;;;;OAKG;IACH,OAAO,IAAI,CAAO,OAAmB,EAAE,OAAyC,EAC5D,SAA2D;QAC3E,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;IAC1C,CAAC;IACH;;;OAGG;IACH,OAAO,IAAI,CAAI,WAAoB;QAC/B,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG;YAC1B,IAAI,CAAC;gBACH,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC;YACrB,CAAE;YAAA,KAAK,CAAC,CAAkB,CAAC,CAAC,CAAC,CAAC;gBAC5B,GAAG,CAAC,CAAC,CAAC,CAAC;YACT,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACH;;;OAGG;IACH,OAAO,iBAAiB,CAAC,WAAsB;QAC3C,cAAc,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,WAAW,EAAE,CAAC,CAAC,OAAM,CAAC,CAAC,CAAC;IAC5E,CAAC;IACH;;;OAGG;IACH,OAAO,SAAS,CAAC,GAAQ,IAAa,MAAM,CAAC,GAAG,YAAY,OAAO,CAAC,CAAC,CAAC;IACtE;;OAEG;IACH,OAAO,SAAS,KAA6B,MAAM,CAAC,IAAI,gBAAgB,EAAK,CAAC,CAAC,CAAC;AAChF,CAAC;AApEY,sBAAc,iBAoE1B,CAAA","sourcesContent":["\nexport class PromiseCompleter<R> {\n  promise: Promise<R>;\n  resolve: (value?: R | PromiseLike<R>) => void;\n  reject: (error?: any, stackTrace?: string) => void;\n/**\n */\nconstructor() {\n    this.promise = new Promise((res, rej) => {\n      this.resolve = res;\n      this.reject = rej;\n    });\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nPromiseCompleter.prototype.promise;\n /** @type {?} */\nPromiseCompleter.prototype.resolve;\n /** @type {?} */\nPromiseCompleter.prototype.reject;\n  }\n\n}\n\nexport class PromiseWrapper {\n/**\n * @param {?} obj\n * @return {?}\n */\nstatic resolve<T>(obj: T): Promise<T> { return Promise.resolve(obj); }\n/**\n * @param {?} obj\n * @param {?} _\n * @return {?}\n */\nstatic reject(obj: any, _): Promise<any> { return Promise.reject(obj); }\n/**\n * @param {?} promise\n * @param {?} onError\n * @return {?}\n */\nstatic catchError<T>(promise: Promise<T>,\n                       onError: (error: any) => T | PromiseLike<T>): Promise<T> {\n    return promise.catch(onError);\n  }\n/**\n * @param {?} promises\n * @return {?}\n */\nstatic all<T>(promises: (T | Promise<T>)[]): Promise<T[]> {\n    if (promises.length == 0) return Promise.resolve([]);\n    return Promise.all(promises);\n  }\n/**\n * @param {?} promise\n * @param {?} success\n * @param {?=} rejection\n * @return {?}\n */\nstatic then<T, U>(promise: Promise<T>, success: (value: T) => U | PromiseLike<U>,\n                    rejection?: (error: any, stack?: any) => U | PromiseLike<U>): Promise<U> {\n    return promise.then(success, rejection);\n  }\n/**\n * @param {?} computation\n * @return {?}\n */\nstatic wrap<T>(computation: () => T): Promise<T> {\n    return new Promise((res, rej) => {\n      try {\n        res(computation());\n      } catch ( /** @type {?} */e) {\n        rej(e);\n      }\n    });\n  }\n/**\n * @param {?} computation\n * @return {?}\n */\nstatic scheduleMicrotask(computation: () => any): void {\n    PromiseWrapper.then(PromiseWrapper.resolve(null), computation, (_) => {});\n  }\n/**\n * @param {?} obj\n * @return {?}\n */\nstatic isPromise(obj: any): boolean { return obj instanceof Promise; }\n/**\n * @return {?}\n */\nstatic completer<T>(): PromiseCompleter<T> { return new PromiseCompleter<T>(); }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}