{"version":3,"file":"intl.js","sourceRoot":"","sources":["../../../../../../modules/@angular/common/src/facade/intl.ts"],"names":[],"mappings":"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","sourcesContent":["\n// Modified version of internal Typescript intl.d.ts.\n// TODO(piloopin): remove when https://github.com/Microsoft/TypeScript/issues/3521 is shipped.\ndeclare module Intl {\n  interface NumberFormatOptions {\n    localeMatcher?: string;\n    style?: string;\n    currency?: string;\n    currencyDisplay?: string;\n    useGrouping?: boolean;\n    minimumIntegerDigits?: number;\n    minimumFractionDigits?: number;\n    maximumFractionDigits?: number;\n  }\n\n  interface NumberFormat {\n    format(value: number): string;\n  }\n\n  var NumberFormat: {new (locale?: string, options?: NumberFormatOptions): NumberFormat};\n\n  interface DateTimeFormatOptions {\n    localeMatcher?: string;\n    weekday?: string;\n    era?: string;\n    year?: string;\n    month?: string;\n    day?: string;\n    hour?: string;\n    minute?: string;\n    second?: string;\n    timeZoneName?: string;\n    formatMatcher?: string;\n    hour12?: boolean;\n  }\n\n  interface DateTimeFormat {\n    format(date?: Date | number): string;\n  }\n\n  var DateTimeFormat: {new (locale?: string, options?: DateTimeFormatOptions): DateTimeFormat};\n}\nexport type NumberFormatStyle = number;\nexport let NumberFormatStyle: any = {};\nNumberFormatStyle.Decimal = 0;\nNumberFormatStyle.Percent = 1;\nNumberFormatStyle.Currency = 2;\nNumberFormatStyle[NumberFormatStyle.Decimal] = \"Decimal\";\nNumberFormatStyle[NumberFormatStyle.Percent] = \"Percent\";\nNumberFormatStyle[NumberFormatStyle.Currency] = \"Currency\";\n\n\nexport class NumberFormatter {\n/**\n * @param {?} num\n * @param {?} locale\n * @param {?} style\n * @param {?=} __3\n * @return {?}\n */\nstatic format(num: number, locale: string, style: NumberFormatStyle,\n                {minimumIntegerDigits = 1, minimumFractionDigits = 0, maximumFractionDigits = 3,\n                 currency, currencyAsSymbol = false}: {\n                  minimumIntegerDigits?: number,\n                  minimumFractionDigits?: number,\n                  maximumFractionDigits?: number,\n                  currency?: string,\n                  currencyAsSymbol?: boolean\n                } = {}): string {\n    var /** @type {?} */ intlOptions: Intl.NumberFormatOptions = {\n      minimumIntegerDigits: minimumIntegerDigits,\n      minimumFractionDigits: minimumFractionDigits,\n      maximumFractionDigits: maximumFractionDigits\n    };\n    intlOptions.style = NumberFormatStyle[style].toLowerCase();\n    if (style == NumberFormatStyle.Currency) {\n      intlOptions.currency = currency;\n      intlOptions.currencyDisplay = currencyAsSymbol ? 'symbol' : 'code';\n    }\n    return new Intl.NumberFormat(locale, intlOptions).format(num);\n  }\n}\n/**\n * @param {?} len\n * @return {?}\n */\nfunction digitCondition(len: number): string {\n  return len == 2 ? '2-digit' : 'numeric';\n}\n/**\n * @param {?} len\n * @return {?}\n */\nfunction nameCondition(len: number): string {\n  return len < 4 ? 'short' : 'long';\n}\n/**\n * @param {?} pattern\n * @return {?}\n */\nfunction extractComponents(pattern: string): Intl.DateTimeFormatOptions {\n  var /** @type {?} */ ret: Intl.DateTimeFormatOptions = {};\n  var /** @type {?} */ i = 0, /** @type {?} */ j;\n  while (i < pattern.length) {\n    j = i;\n    while (j < pattern.length && pattern[j] == pattern[i]) j++;\n    let /** @type {?} */ len = j - i;\n    switch (pattern[i]) {\n      case 'G':\n        ret.era = nameCondition(len);\n        break;\n      case 'y':\n        ret.year = digitCondition(len);\n        break;\n      case 'M':\n        if (len >= 3)\n          ret.month = nameCondition(len);\n        else\n          ret.month = digitCondition(len);\n        break;\n      case 'd':\n        ret.day = digitCondition(len);\n        break;\n      case 'E':\n        ret.weekday = nameCondition(len);\n        break;\n      case 'j':\n        ret.hour = digitCondition(len);\n        break;\n      case 'h':\n        ret.hour = digitCondition(len);\n        ret.hour12 = true;\n        break;\n      case 'H':\n        ret.hour = digitCondition(len);\n        ret.hour12 = false;\n        break;\n      case 'm':\n        ret.minute = digitCondition(len);\n        break;\n      case 's':\n        ret.second = digitCondition(len);\n        break;\n      case 'z':\n        ret.timeZoneName = 'long';\n        break;\n      case 'Z':\n        ret.timeZoneName = 'short';\n        break;\n    }\n    i = j;\n  }\n  return ret;\n}\n\nvar /** @type {?} */ dateFormatterCache: Map<string, Intl.DateTimeFormat> = new Map<string, Intl.DateTimeFormat>();\n\nexport class DateFormatter {\n/**\n * @param {?} date\n * @param {?} locale\n * @param {?} pattern\n * @return {?}\n */\nstatic format(date: Date, locale: string, pattern: string): string {\n    var /** @type {?} */ key = locale + pattern;\n    if (dateFormatterCache.has(key)) {\n      return dateFormatterCache.get(key).format(date);\n    }\n    var /** @type {?} */ formatter = new Intl.DateTimeFormat(locale, extractComponents(pattern));\n    dateFormatterCache.set(key, formatter);\n    return formatter.format(date);\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}