{"version":3,"file":"form_builder.js","sourceRoot":"","sources":["../../../../../../modules/@angular/common/src/forms/form_builder.ts"],"names":[],"mappings":"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","sourcesContent":["import {Injectable} from '@angular/core';\nimport {StringMapWrapper} from '../../src/facade/collection';\nimport {isPresent, isArray} from '../../src/facade/lang';\nimport * as modelModule from './model';\nimport {ValidatorFn, AsyncValidatorFn} from './directives/validators';\nexport class FormBuilder {\n/**\n *  Construct a new {@link ControlGroup} with the given map of configuration. Valid keys for the `extra` parameter map are `optionals` and `validator`. * See the {@link ControlGroup} constructor for more details.\n * @param {?} controlsConfig\n * @param {?=} extra\n * @return {?}\n */\ngroup(controlsConfig: {[key: string]: any},\n        extra: {[key: string]: any} = null): modelModule.ControlGroup {\n    var /** @type {?} */ controls = this._reduceControls(controlsConfig);\n    var /** @type {?} */ optionals = /** @type {?} */(( <{[key: string]: boolean}>(\n        isPresent(extra) ? StringMapWrapper.get(extra, \"optionals\") : null)));\n    var /** @type {?} */ validator: ValidatorFn = isPresent(extra) ? StringMapWrapper.get(extra, \"validator\") : null;\n    var /** @type {?} */ asyncValidator: AsyncValidatorFn =\n        isPresent(extra) ? StringMapWrapper.get(extra, \"asyncValidator\") : null;\n    return new modelModule.ControlGroup(controls, optionals, validator, asyncValidator);\n  }\n/**\n *  Construct a new {@link Control} with the given `value`,`validator`, and `asyncValidator`.\n * @param {?} value\n * @param {?=} validator\n * @param {?=} asyncValidator\n * @return {?}\n */\ncontrol(value: Object, validator: ValidatorFn = null,\n          asyncValidator: AsyncValidatorFn = null): modelModule.Control {\n    return new modelModule.Control(value, validator, asyncValidator);\n  }\n/**\n *  Construct an array of {@link Control}s from the given `controlsConfig` array of configuration, with the given optional `validator` and `asyncValidator`.\n * @param {?} controlsConfig\n * @param {?=} validator\n * @param {?=} asyncValidator\n * @return {?}\n */\narray(controlsConfig: any[], validator: ValidatorFn = null,\n        asyncValidator: AsyncValidatorFn = null): modelModule.ControlArray {\n    var /** @type {?} */ controls = controlsConfig.map(c => this._createControl(c));\n    return new modelModule.ControlArray(controls, validator, asyncValidator);\n  }\n/**\n * @internal\n * @param {?} controlsConfig\n * @return {?}\n */\n_reduceControls(controlsConfig: {[k: string]:\n                                       any}): {[key: string]: modelModule.AbstractControl} {\n    var /** @type {?} */ controls: {[key: string]: modelModule.AbstractControl} = {};\n    StringMapWrapper.forEach(controlsConfig, (controlConfig: any, controlName: string) => {\n      controls[controlName] = this._createControl(controlConfig);\n    });\n    return controls;\n  }\n/**\n * @internal\n * @param {?} controlConfig\n * @return {?}\n */\n_createControl(controlConfig: any): modelModule.AbstractControl {\n    if (controlConfig instanceof modelModule.Control ||\n        controlConfig instanceof modelModule.ControlGroup ||\n        controlConfig instanceof modelModule.ControlArray) {\n      return controlConfig;\n\n    } else if (isArray(controlConfig)) {\n      var /** @type {?} */ value = controlConfig[0];\n      var /** @type {?} */ validator: ValidatorFn = controlConfig.length > 1 ? controlConfig[1] : null;\n      var /** @type {?} */ asyncValidator: AsyncValidatorFn = controlConfig.length > 2 ? controlConfig[2] : null;\n      return this.control(value, validator, asyncValidator);\n\n    } else {\n      return this.control(controlConfig);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}