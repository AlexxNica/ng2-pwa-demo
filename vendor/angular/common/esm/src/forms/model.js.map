{"version":3,"file":"model.js","sourceRoot":"","sources":["../../../../../../modules/@angular/common/src/forms/model.ts"],"names":[],"mappings":"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","sourcesContent":["import {isPresent, isBlank, normalizeBool} from '../../src/facade/lang';\nimport {Observable, EventEmitter, ObservableWrapper} from '../../src/facade/async';\nimport {PromiseWrapper} from '../../src/facade/promise';\nimport {StringMapWrapper, ListWrapper} from '../../src/facade/collection';\nimport {ValidatorFn, AsyncValidatorFn} from './directives/validators';\n\n/**\n * Indicates that a Control is valid, i.e. that no errors exist in the input value.\n */\nexport const /** @type {?} */ VALID = \"VALID\";\n\n/**\n * Indicates that a Control is invalid, i.e. that an error exists in the input value.\n */\nexport const /** @type {?} */ INVALID = \"INVALID\";\n\n/**\n * Indicates that a Control is pending, i.e. that async validation is occurring and\n * errors are not yet available for the input value.\n */\nexport const /** @type {?} */ PENDING = \"PENDING\";\n/**\n * @param {?} control\n * @return {?}\n */\nexport function isControl(control: Object): boolean {\n  return control instanceof AbstractControl;\n}\n/**\n * @param {?} control\n * @param {?} path\n * @return {?}\n */\nfunction _find(control: AbstractControl, path: Array<string | number>| string) {\n  if (isBlank(path)) return null;\n\n  if (!(path instanceof Array)) {\n    path = ( /** @type {?} */((<string>path))).split(\"/\");\n  }\n  if (path instanceof Array && ListWrapper.isEmpty(path)) return null;\n\n  return ( /** @type {?} */((<Array<string | number>>path)))\n      .reduce((v, name) => {\n        if (v instanceof ControlGroup) {\n          return isPresent(v.controls[name]) ? v.controls[name] : null;\n        } else if (v instanceof ControlArray) {\n          var /** @type {?} */ index = /** @type {?} */(( <number>name));\n          return isPresent(v.at(index)) ? v.at(index) : null;\n        } else {\n          return null;\n        }\n      }, control);\n}\n/**\n * @param {?} r\n * @return {?}\n */\nfunction toObservable(r: any): Observable<any> {\n  return PromiseWrapper.isPromise(r) ? ObservableWrapper.fromPromise(r) : r;\n}\n\n/**\n *\n */\nexport abstract class AbstractControl {\n  /** @internal */\n  _value: any;\nprivate _valueChanges: EventEmitter<any>;\nprivate _statusChanges: EventEmitter<any>;\nprivate _status: string;\nprivate _errors: {[key: string]: any};\nprivate _pristine: boolean = true;\nprivate _touched: boolean = false;\nprivate _parent: ControlGroup | ControlArray;\nprivate _asyncValidationSubscription: any;\n/**\n * @param {?} validator\n * @param {?} asyncValidator\n */\nconstructor(public validator: ValidatorFn,\npublic asyncValidator: AsyncValidatorFn) {}\n\n  get value(): any { return this._value; }\n\n  get status(): string { return this._status; }\n\n  get valid(): boolean { return this._status === VALID; }\n\n  /**\n   * Returns the errors of this control.\n   */\n  get errors(): {[key: string]: any} { return this._errors; }\n\n  get pristine(): boolean { return this._pristine; }\n\n  get dirty(): boolean { return !this.pristine; }\n\n  get touched(): boolean { return this._touched; }\n\n  get untouched(): boolean { return !this._touched; }\n\n  get valueChanges(): Observable<any> { return this._valueChanges; }\n\n  get statusChanges(): Observable<any> { return this._statusChanges; }\n\n  get pending(): boolean { return this._status == PENDING; }\n/**\n * @return {?}\n */\nmarkAsTouched(): void { this._touched = true; }\n/**\n * @param {?=} __0\n * @return {?}\n */\nmarkAsDirty({onlySelf}: {onlySelf?: boolean} = {}): void {\n    onlySelf = normalizeBool(onlySelf);\n    this._pristine = false;\n\n    if (isPresent(this._parent) && !onlySelf) {\n      this._parent.markAsDirty({onlySelf: onlySelf});\n    }\n  }\n/**\n * @param {?=} __0\n * @return {?}\n */\nmarkAsPending({onlySelf}: {onlySelf?: boolean} = {}): void {\n    onlySelf = normalizeBool(onlySelf);\n    this._status = PENDING;\n\n    if (isPresent(this._parent) && !onlySelf) {\n      this._parent.markAsPending({onlySelf: onlySelf});\n    }\n  }\n/**\n * @param {?} parent\n * @return {?}\n */\nsetParent(parent: ControlGroup | ControlArray): void { this._parent = parent; }\n/**\n * @param {?=} __0\n * @return {?}\n */\nupdateValueAndValidity(\n      {onlySelf, emitEvent}: {onlySelf?: boolean, emitEvent?: boolean} = {}): void {\n    onlySelf = normalizeBool(onlySelf);\n    emitEvent = isPresent(emitEvent) ? emitEvent : true;\n\n    this._updateValue();\n\n    this._errors = this._runValidator();\n    this._status = this._calculateStatus();\n\n    if (this._status == VALID || this._status == PENDING) {\n      this._runAsyncValidator(emitEvent);\n    }\n\n    if (emitEvent) {\n      ObservableWrapper.callEmit(this._valueChanges, this._value);\n      ObservableWrapper.callEmit(this._statusChanges, this._status);\n    }\n\n    if (isPresent(this._parent) && !onlySelf) {\n      this._parent.updateValueAndValidity({onlySelf: onlySelf, emitEvent: emitEvent});\n    }\n  }\n/**\n * @return {?}\n */\nprivate _runValidator(): {[key: string]: any} {\n    return isPresent(this.validator) ? this.validator(this) : null;\n  }\n/**\n * @param {?} emitEvent\n * @return {?}\n */\nprivate _runAsyncValidator(emitEvent: boolean): void {\n    if (isPresent(this.asyncValidator)) {\n      this._status = PENDING;\n      this._cancelExistingSubscription();\n      var /** @type {?} */ obs = toObservable(this.asyncValidator(this));\n      this._asyncValidationSubscription = ObservableWrapper.subscribe(\n          obs, (res: {[key: string]: any}) => this.setErrors(res, {emitEvent: emitEvent}));\n    }\n  }\n/**\n * @return {?}\n */\nprivate _cancelExistingSubscription(): void {\n    if (isPresent(this._asyncValidationSubscription)) {\n      ObservableWrapper.dispose(this._asyncValidationSubscription);\n    }\n  }\n/**\n *  Sets errors on a control. * This is used when validations are run not automatically, but manually by the user. * Calling `setErrors` will also update the validity of the parent control. * ## Usage * ``` var login = new Control(\"someLogin\"); login.setErrors({ \"notUnique\": true }); * expect(login.valid).toEqual(false); expect(login.errors).toEqual({\"notUnique\": true}); * login.updateValue(\"someOtherLogin\"); * expect(login.valid).toEqual(true); ```\n * @param {?} errors\n * @param {?=} __1\n * @return {?}\n */\nsetErrors(errors: {[key: string]: any}, {emitEvent}: {emitEvent?: boolean} = {}): void {\n    emitEvent = isPresent(emitEvent) ? emitEvent : true;\n\n    this._errors = errors;\n    this._status = this._calculateStatus();\n\n    if (emitEvent) {\n      ObservableWrapper.callEmit(this._statusChanges, this._status);\n    }\n\n    if (isPresent(this._parent)) {\n      this._parent._updateControlsErrors();\n    }\n  }\n/**\n * @param {?} path\n * @return {?}\n */\nfind(path: Array<string | number>| string): AbstractControl { return _find(this, path); }\n/**\n * @param {?} errorCode\n * @param {?=} path\n * @return {?}\n */\ngetError(errorCode: string, path: string[] = null): any {\n    var /** @type {?} */ control = isPresent(path) && !ListWrapper.isEmpty(path) ? this.find(path) : this;\n    if (isPresent(control) && isPresent(control._errors)) {\n      return StringMapWrapper.get(control._errors, errorCode);\n    } else {\n      return null;\n    }\n  }\n/**\n * @param {?} errorCode\n * @param {?=} path\n * @return {?}\n */\nhasError(errorCode: string, path: string[] = null): boolean {\n    return isPresent(this.getError(errorCode, path));\n  }\n\n  get root(): AbstractControl {\n    let /** @type {?} */ x: AbstractControl = this;\n\n    while (isPresent(x._parent)) {\n      x = x._parent;\n    }\n\n    return x;\n  }\n/**\n * @internal\n * @return {?}\n */\n_updateControlsErrors(): void {\n    this._status = this._calculateStatus();\n\n    if (isPresent(this._parent)) {\n      this._parent._updateControlsErrors();\n    }\n  }\n/**\n * @internal\n * @return {?}\n */\n_initObservables() {\n    this._valueChanges = new EventEmitter();\n    this._statusChanges = new EventEmitter();\n  }\n/**\n * @return {?}\n */\nprivate _calculateStatus(): string {\n    if (isPresent(this._errors)) return INVALID;\n    if (this._anyControlsHaveStatus(PENDING)) return PENDING;\n    if (this._anyControlsHaveStatus(INVALID)) return INVALID;\n    return VALID;\n  }\n\n  /** @internal */\n  abstract _updateValue(): void;\n\n  /** @internal */\n  abstract _anyControlsHaveStatus(status: string): boolean;\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @internal\n @type {?} */\nAbstractControl.prototype._value;\n /** @type {?} */\nAbstractControl.prototype._valueChanges;\n /** @type {?} */\nAbstractControl.prototype._statusChanges;\n /** @type {?} */\nAbstractControl.prototype._status;\n /** @type {?} */\nAbstractControl.prototype._errors;\n /** @type {?} */\nAbstractControl.prototype._pristine;\n /** @type {?} */\nAbstractControl.prototype._touched;\n /** @type {?} */\nAbstractControl.prototype._parent;\n /** @type {?} */\nAbstractControl.prototype._asyncValidationSubscription;\n /** @type {?} */\nAbstractControl.prototype.validator;\n /** @type {?} */\nAbstractControl.prototype.asyncValidator;\n  }\n\n}\n\n/**\n * Defines a part of a form that cannot be divided into other controls. `Control`s have values and\n * validation state, which is determined by an optional validation function.\n *\n * `Control` is one of the three fundamental building blocks used to define forms in Angular, along\n * with {@link ControlGroup} and {@link ControlArray}.\n *\n * ## Usage\n *\n * By default, a `Control` is created for every `<input>` or other form component.\n * With {@link NgFormControl} or {@link NgFormModel} an existing {@link Control} can be\n * bound to a DOM element instead. This `Control` can be configured with a custom\n * validation function.\n *\n * ### Example ([live demo](http://plnkr.co/edit/23DESOpbNnBpBHZt1BR4?p=preview))\n */\nexport class Control extends AbstractControl {\n  /** @internal */\n  _onChange: Function;\n/**\n * @param {?=} value\n * @param {?=} validator\n * @param {?=} asyncValidator\n */\nconstructor(value: any = null, validator: ValidatorFn = null,\n              asyncValidator: AsyncValidatorFn = null) {\n    super(validator, asyncValidator);\n    this._value = value;\n    this.updateValueAndValidity({onlySelf: true, emitEvent: false});\n    this._initObservables();\n  }\n/**\n *  Set the value of the control to `value`. * If `onlySelf` is `true`, this change will only affect the validation of this `Control` and not its parent component. If `emitEvent` is `true`, this change will cause a `valueChanges` event on the `Control` to be emitted. Both of these options default to `false`. * If `emitModelToViewChange` is `true`, the view will be notified about the new value via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not specified.\n * @param {?} value\n * @param {?=} __1\n * @return {?}\n */\nupdateValue(value: any, {onlySelf, emitEvent, emitModelToViewChange}: {\n    onlySelf?: boolean,\n    emitEvent?: boolean,\n    emitModelToViewChange?: boolean\n  } = {}): void {\n    emitModelToViewChange = isPresent(emitModelToViewChange) ? emitModelToViewChange : true;\n    this._value = value;\n    if (isPresent(this._onChange) && emitModelToViewChange) this._onChange(this._value);\n    this.updateValueAndValidity({onlySelf: onlySelf, emitEvent: emitEvent});\n  }\n/**\n * @internal\n * @return {?}\n */\n_updateValue() {}\n/**\n * @internal\n * @param {?} status\n * @return {?}\n */\n_anyControlsHaveStatus(status: string): boolean { return false; }\n/**\n *  Register a listener for change events.\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: Function): void { this._onChange = fn; }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @internal\n @type {?} */\nControl.prototype._onChange;\n  }\n\n}\n\n/**\n * Defines a part of a form, of fixed length, that can contain other controls.\n *\n * A `ControlGroup` aggregates the values of each {@link Control} in the group.\n * The status of a `ControlGroup` depends on the status of its children.\n * If one of the controls in a group is invalid, the entire group is invalid.\n * Similarly, if a control changes its value, the entire group changes as well.\n *\n * `ControlGroup` is one of the three fundamental building blocks used to define forms in Angular,\n * along with {@link Control} and {@link ControlArray}. {@link ControlArray} can also contain other\n * controls, but is of variable length.\n *\n * ### Example ([live demo](http://plnkr.co/edit/23DESOpbNnBpBHZt1BR4?p=preview))\n */\nexport class ControlGroup extends AbstractControl {\nprivate _optionals: {[key: string]: boolean};\n/**\n * @param {?} controls\n * @param {?=} optionals\n * @param {?=} validator\n * @param {?=} asyncValidator\n */\nconstructor(public controls: {[key: string]: AbstractControl},\n              optionals: {[key: string]: boolean} = null, validator: ValidatorFn = null,\n              asyncValidator: AsyncValidatorFn = null) {\n    super(validator, asyncValidator);\n    this._optionals = isPresent(optionals) ? optionals : {};\n    this._initObservables();\n    this._setParentForControls();\n    this.updateValueAndValidity({onlySelf: true, emitEvent: false});\n  }\n/**\n *  Add a control to this group.\n * @param {?} name\n * @param {?} control\n * @return {?}\n */\naddControl(name: string, control: AbstractControl): void {\n    this.controls[name] = control;\n    control.setParent(this);\n  }\n/**\n *  Remove a control from this group.\n * @param {?} name\n * @return {?}\n */\nremoveControl(name: string): void { StringMapWrapper.delete(this.controls, name); }\n/**\n *  Mark the named control as non-optional.\n * @param {?} controlName\n * @return {?}\n */\ninclude(controlName: string): void {\n    StringMapWrapper.set(this._optionals, controlName, true);\n    this.updateValueAndValidity();\n  }\n/**\n *  Mark the named control as optional.\n * @param {?} controlName\n * @return {?}\n */\nexclude(controlName: string): void {\n    StringMapWrapper.set(this._optionals, controlName, false);\n    this.updateValueAndValidity();\n  }\n/**\n *  Check whether there is a control with the given name in the group.\n * @param {?} controlName\n * @return {?}\n */\ncontains(controlName: string): boolean {\n    var /** @type {?} */ c = StringMapWrapper.contains(this.controls, controlName);\n    return c && this._included(controlName);\n  }\n/**\n * @internal\n * @return {?}\n */\n_setParentForControls() {\n    StringMapWrapper.forEach(\n        this.controls, (control: AbstractControl, name: string) => { control.setParent(this); });\n  }\n/**\n * @internal\n * @return {?}\n */\n_updateValue() { this._value = this._reduceValue(); }\n/**\n * @internal\n * @param {?} status\n * @return {?}\n */\n_anyControlsHaveStatus(status: string): boolean {\n    var /** @type {?} */ res = false;\n    StringMapWrapper.forEach(this.controls, (control: AbstractControl, name: string) => {\n      res = res || (this.contains(name) && control.status == status);\n    });\n    return res;\n  }\n/**\n * @internal\n * @return {?}\n */\n_reduceValue() {\n    return this._reduceChildren(\n        {}, (acc: {[k: string]: AbstractControl}, control: AbstractControl, name: string) => {\n          acc[name] = control.value;\n          return acc;\n        });\n  }\n/**\n * @internal\n * @param {?} initValue\n * @param {?} fn\n * @return {?}\n */\n_reduceChildren(initValue: any, fn: Function) {\n    var /** @type {?} */ res = initValue;\n    StringMapWrapper.forEach(this.controls, (control: AbstractControl, name: string) => {\n      if (this._included(name)) {\n        res = fn(res, control, name);\n      }\n    });\n    return res;\n  }\n/**\n * @internal\n * @param {?} controlName\n * @return {?}\n */\n_included(controlName: string): boolean {\n    var /** @type {?} */ isOptional = StringMapWrapper.contains(this._optionals, controlName);\n    return !isOptional || StringMapWrapper.get(this._optionals, controlName);\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nControlGroup.prototype._optionals;\n /** @type {?} */\nControlGroup.prototype.controls;\n  }\n\n}\n\n/**\n * Defines a part of a form, of variable length, that can contain other controls.\n *\n * A `ControlArray` aggregates the values of each {@link Control} in the group.\n * The status of a `ControlArray` depends on the status of its children.\n * If one of the controls in a group is invalid, the entire array is invalid.\n * Similarly, if a control changes its value, the entire array changes as well.\n *\n * `ControlArray` is one of the three fundamental building blocks used to define forms in Angular,\n * along with {@link Control} and {@link ControlGroup}. {@link ControlGroup} can also contain\n * other controls, but is of fixed length.\n *\n * ## Adding or removing controls\n *\n * To change the controls in the array, use the `push`, `insert`, or `removeAt` methods\n * in `ControlArray` itself. These methods ensure the controls are properly tracked in the\n * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate\n * the `ControlArray` directly, as that will result in strange and unexpected behavior such\n * as broken change detection.\n *\n * ### Example ([live demo](http://plnkr.co/edit/23DESOpbNnBpBHZt1BR4?p=preview))\n */\nexport class ControlArray extends AbstractControl {\n/**\n * @param {?} controls\n * @param {?=} validator\n * @param {?=} asyncValidator\n */\nconstructor(public controls: AbstractControl[], validator: ValidatorFn = null,\n              asyncValidator: AsyncValidatorFn = null) {\n    super(validator, asyncValidator);\n    this._initObservables();\n    this._setParentForControls();\n    this.updateValueAndValidity({onlySelf: true, emitEvent: false});\n  }\n/**\n *  Get the {@link AbstractControl} at the given `index` in the array.\n * @param {?} index\n * @return {?}\n */\nat(index: number): AbstractControl { return this.controls[index]; }\n/**\n *  Insert a new {@link AbstractControl} at the end of the array.\n * @param {?} control\n * @return {?}\n */\npush(control: AbstractControl): void {\n    this.controls.push(control);\n    control.setParent(this);\n    this.updateValueAndValidity();\n  }\n/**\n *  Insert a new {@link AbstractControl} at the given `index` in the array.\n * @param {?} index\n * @param {?} control\n * @return {?}\n */\ninsert(index: number, control: AbstractControl): void {\n    ListWrapper.insert(this.controls, index, control);\n    control.setParent(this);\n    this.updateValueAndValidity();\n  }\n/**\n *  Remove the control at the given `index` in the array.\n * @param {?} index\n * @return {?}\n */\nremoveAt(index: number): void {\n    ListWrapper.removeAt(this.controls, index);\n    this.updateValueAndValidity();\n  }\n\n  /**\n   * Length of the control array.\n   */\n  get length(): number { return this.controls.length; }\n/**\n * @internal\n * @return {?}\n */\n_updateValue(): void { this._value = this.controls.map((control) => control.value); }\n/**\n * @internal\n * @param {?} status\n * @return {?}\n */\n_anyControlsHaveStatus(status: string): boolean {\n    return this.controls.some(c => c.status == status);\n  }\n/**\n * @internal\n * @return {?}\n */\n_setParentForControls(): void {\n    this.controls.forEach((control) => { control.setParent(this); });\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nControlArray.prototype.controls;\n  }\n\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}