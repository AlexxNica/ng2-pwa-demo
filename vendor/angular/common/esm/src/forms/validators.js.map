{"version":3,"file":"validators.js","sourceRoot":"","sources":["../../../../../../modules/@angular/common/src/forms/validators.ts"],"names":[],"mappings":";AAAA,uBAA0B,eAAe,CAAC,CAAA;AAE1C,uBAA2C,uBAAuB,CAAC,CAAA;AACnE,0BAA6B,0BAA0B,CAAC,CAAA;AACxD,wBAAgC,wBAAwB,CAAC,CAAA;AACzD,6BAA+B,6BAA6B,CAAC,CAAA;AAI7D;;;;;;;;GAQG;AAC2B,qBAAa,GAAmC,IAAI,kBAAW,CAAC,cAAc,CAAC,CAAC;AAE9G;;;;;;;GAOG;AAC2B,2BAAmB;AAC7C,kBAAkB,CAAC,IAAI,kBAAW,CAAC,mBAAmB,CAAC,CAAC;AAE5D;;;;;;;;;;;GAWG;AACH;IACA;;;;OAIG;IACH,OAAO,QAAQ,CAAC,OAAoC;QAChD,MAAM,CAAC,cAAO,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,eAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,OAAO,CAAC,KAAK,IAAI,EAAE,CAAC;YACtE,EAAC,UAAU,EAAE,IAAI,EAAC;YAClB,IAAI,CAAC;IAClB,CAAC;IACH;;;;OAIG;IACH,OAAO,SAAS,CAAC,SAAiB;QAC9B,MAAM,CAAC,CAAC,OAAoC;YAC1C,EAAE,CAAC,CAAC,gBAAS,CAAC,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;gBAAC,MAAM,CAAC,IAAI,CAAC;YACzD,IAAI,gBAAgB,CAAC,CAAC,GAAW,OAAO,CAAC,KAAK,CAAC;YAC/C,MAAM,CAAC,CAAC,CAAC,MAAM,GAAG,SAAS;gBAChB,EAAC,WAAW,EAAE,EAAC,gBAAgB,EAAE,SAAS,EAAE,cAAc,EAAE,CAAC,CAAC,MAAM,EAAC,EAAC;gBACtE,IAAI,CAAC;QAClB,CAAC,CAAC;IACJ,CAAC;IACH;;;;OAIG;IACH,OAAO,SAAS,CAAC,SAAiB;QAC9B,MAAM,CAAC,CAAC,OAAoC;YAC1C,EAAE,CAAC,CAAC,gBAAS,CAAC,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;gBAAC,MAAM,CAAC,IAAI,CAAC;YACzD,IAAI,gBAAgB,CAAC,CAAC,GAAW,OAAO,CAAC,KAAK,CAAC;YAC/C,MAAM,CAAC,CAAC,CAAC,MAAM,GAAG,SAAS;gBAChB,EAAC,WAAW,EAAE,EAAC,gBAAgB,EAAE,SAAS,EAAE,cAAc,EAAE,CAAC,CAAC,MAAM,EAAC,EAAC;gBACtE,IAAI,CAAC;QAClB,CAAC,CAAC;IACJ,CAAC;IACH;;;;OAIG;IACH,OAAO,OAAO,CAAC,OAAe;QAC1B,MAAM,CAAC,CAAC,OAAoC;YAC1C,EAAE,CAAC,CAAC,gBAAS,CAAC,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;gBAAC,MAAM,CAAC,IAAI,CAAC;YACzD,IAAI,gBAAgB,CAAC,KAAK,GAAG,IAAI,MAAM,CAAC,IAAI,OAAO,GAAG,CAAC,CAAC;YACxD,IAAI,gBAAgB,CAAC,CAAC,GAAW,OAAO,CAAC,KAAK,CAAC;YAC/C,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI;gBACJ,EAAC,SAAS,EAAE,EAAC,iBAAiB,EAAE,IAAI,OAAO,GAAG,EAAE,aAAa,EAAE,CAAC,EAAC,EAAC,CAAC;QAC5F,CAAC,CAAC;IACJ,CAAC;IACH;;;;OAIG;IACH,OAAO,aAAa,CAAC,CAA8B,IAA8B,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;IAC/F;;;;OAIG;IACH,OAAO,OAAO,CAAC,UAAyB;QACpC,EAAE,CAAC,CAAC,cAAO,CAAC,UAAU,CAAC,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC;QACrC,IAAI,gBAAgB,CAAC,iBAAiB,GAAG,UAAU,CAAC,MAAM,CAAC,gBAAS,CAAC,CAAC;QACtE,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,IAAI,CAAC,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC;QAE/C,MAAM,CAAC,UAAS,OAAoC;YAClD,MAAM,CAAC,YAAY,CAAC,kBAAkB,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAAC,CAAC;QACtE,CAAC,CAAC;IACJ,CAAC;IACH;;;OAGG;IACH,OAAO,YAAY,CAAC,UAA8B;QAC9C,EAAE,CAAC,CAAC,cAAO,CAAC,UAAU,CAAC,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC;QACrC,IAAI,gBAAgB,CAAC,iBAAiB,GAAG,UAAU,CAAC,MAAM,CAAC,gBAAS,CAAC,CAAC;QACtE,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,IAAI,CAAC,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC;QAE/C,MAAM,CAAC,UAAS,OAAoC;YAClD,IAAI,gBAAgB,CAAC,QAAQ,GAAG,uBAAuB,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;YAC3G,MAAM,CAAC,wBAAc,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACzD,CAAC,CAAC;IACJ,CAAC;AACH,CAAC;AAvFY,kBAAU,aAuFtB,CAAA;AACD;;;GAGG;AACH,2BAA2B,GAAQ;IACjC,MAAM,CAAC,wBAAc,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,yBAAiB,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;AAChF,CAAC;AACD;;;;GAIG;AACH,4BAA4B,OAAoC,EACpC,UAAyB;IACnD,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;AACzC,CAAC;AACD;;;;GAIG;AACH,iCAAiC,OAAoC,EACpC,UAA8B;IAC7D,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;AACzC,CAAC;AACD;;;GAGG;AACH,sBAAsB,aAAoB;IACxC,IAAI,gBAAgB,CAAC,GAAG,GACpB,aAAa,CAAC,MAAM,CAAC,CAAC,GAAyB,EAAE,MAA4B;QAC3E,MAAM,CAAC,gBAAS,CAAC,MAAM,CAAC,GAAG,6BAAgB,CAAC,KAAK,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,GAAG,CAAC;IACvE,CAAC,EAAE,EAAE,CAAC,CAAC;IACX,MAAM,CAAC,6BAAgB,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,GAAG,CAAC;AACpD,CAAC","sourcesContent":["import {OpaqueToken} from '@angular/core';\n\nimport {isBlank, isPresent, isString} from '../../src/facade/lang';\nimport {PromiseWrapper} from '../../src/facade/promise';\nimport {ObservableWrapper} from '../../src/facade/async';\nimport {StringMapWrapper} from '../../src/facade/collection';\nimport * as modelModule from './model';\nimport {ValidatorFn, AsyncValidatorFn} from './directives/validators';\n\n/**\n * Providers for validators to be used for {@link Control}s in a form.\n *\n * Provide this using `multi: true` to add validators.\n *\n * ### Example\n *\n * {@example core/forms/ts/ng_validators/ng_validators.ts region='ng_validators'}\n */\nexport const /** @type {?} */ NG_VALIDATORS: OpaqueToken = /*@ts2dart_const*/ new OpaqueToken(\"NgValidators\");\n\n/**\n * Providers for asynchronous validators to be used for {@link Control}s\n * in a form.\n *\n * Provide this using `multi: true` to add validators.\n *\n * See {@link NG_VALIDATORS} for more details.\n */\nexport const /** @type {?} */ NG_ASYNC_VALIDATORS: OpaqueToken =\n    /*@ts2dart_const*/ new OpaqueToken(\"NgAsyncValidators\");\n\n/**\n * Provides a set of validators used by form controls.\n *\n * A validator is a function that processes a {@link Control} or collection of\n * controls and returns a map of errors. A null map means that validation has passed.\n *\n * ### Example\n *\n * ```typescript\n * var loginControl = new Control(\"\", Validators.required)\n * ```\n */\nexport class Validators {\n/**\n *  Validator that requires controls to have a non-empty value.\n * @param {?} control\n * @return {?}\n */\nstatic required(control: modelModule.AbstractControl): {[key: string]: boolean} {\n    return isBlank(control.value) || (isString(control.value) && control.value == \"\") ?\n               {\"required\": true} :\n               null;\n  }\n/**\n *  Validator that requires controls to have a value of a minimum length.\n * @param {?} minLength\n * @return {?}\n */\nstatic minLength(minLength: number): ValidatorFn {\n    return (control: modelModule.AbstractControl): {[key: string]: any} => {\n      if (isPresent(Validators.required(control))) return null;\n      var /** @type {?} */ v: string = control.value;\n      return v.length < minLength ?\n                 {\"minlength\": {\"requiredLength\": minLength, \"actualLength\": v.length}} :\n                 null;\n    };\n  }\n/**\n *  Validator that requires controls to have a value of a maximum length.\n * @param {?} maxLength\n * @return {?}\n */\nstatic maxLength(maxLength: number): ValidatorFn {\n    return (control: modelModule.AbstractControl): {[key: string]: any} => {\n      if (isPresent(Validators.required(control))) return null;\n      var /** @type {?} */ v: string = control.value;\n      return v.length > maxLength ?\n                 {\"maxlength\": {\"requiredLength\": maxLength, \"actualLength\": v.length}} :\n                 null;\n    };\n  }\n/**\n *  Validator that requires a control to match a regex to its value.\n * @param {?} pattern\n * @return {?}\n */\nstatic pattern(pattern: string): ValidatorFn {\n    return (control: modelModule.AbstractControl): {[key: string]: any} => {\n      if (isPresent(Validators.required(control))) return null;\n      let /** @type {?} */ regex = new RegExp(`^${pattern}$`);\n      let /** @type {?} */ v: string = control.value;\n      return regex.test(v) ? null :\n                             {\"pattern\": {\"requiredPattern\": `^${pattern}$`, \"actualValue\": v}};\n    };\n  }\n/**\n *  No-op validator.\n * @param {?} c\n * @return {?}\n */\nstatic nullValidator(c: modelModule.AbstractControl): {[key: string]: boolean} { return null; }\n/**\n *  Compose multiple validators into a single function that returns the union of the individual error maps.\n * @param {?} validators\n * @return {?}\n */\nstatic compose(validators: ValidatorFn[]): ValidatorFn {\n    if (isBlank(validators)) return null;\n    var /** @type {?} */ presentValidators = validators.filter(isPresent);\n    if (presentValidators.length == 0) return null;\n\n    return function(control: modelModule.AbstractControl) {\n      return _mergeErrors(_executeValidators(control, presentValidators));\n    };\n  }\n/**\n * @param {?} validators\n * @return {?}\n */\nstatic composeAsync(validators: AsyncValidatorFn[]): AsyncValidatorFn {\n    if (isBlank(validators)) return null;\n    var /** @type {?} */ presentValidators = validators.filter(isPresent);\n    if (presentValidators.length == 0) return null;\n\n    return function(control: modelModule.AbstractControl) {\n      let /** @type {?} */ promises = _executeAsyncValidators(control, presentValidators).map(_convertToPromise);\n      return PromiseWrapper.all(promises).then(_mergeErrors);\n    };\n  }\n}\n/**\n * @param {?} obj\n * @return {?}\n */\nfunction _convertToPromise(obj: any): any {\n  return PromiseWrapper.isPromise(obj) ? obj : ObservableWrapper.toPromise(obj);\n}\n/**\n * @param {?} control\n * @param {?} validators\n * @return {?}\n */\nfunction _executeValidators(control: modelModule.AbstractControl,\n                            validators: ValidatorFn[]): any[] {\n  return validators.map(v => v(control));\n}\n/**\n * @param {?} control\n * @param {?} validators\n * @return {?}\n */\nfunction _executeAsyncValidators(control: modelModule.AbstractControl,\n                                 validators: AsyncValidatorFn[]): any[] {\n  return validators.map(v => v(control));\n}\n/**\n * @param {?} arrayOfErrors\n * @return {?}\n */\nfunction _mergeErrors(arrayOfErrors: any[]): {[key: string]: any} {\n  var /** @type {?} */ res: {[key: string]: any} =\n      arrayOfErrors.reduce((res: {[key: string]: any}, errors: {[key: string]: any}) => {\n        return isPresent(errors) ? StringMapWrapper.merge(res, errors) : res;\n      }, {});\n  return StringMapWrapper.isEmpty(res) ? null : res;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}