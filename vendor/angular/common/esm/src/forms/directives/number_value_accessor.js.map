{"version":3,"file":"number_value_accessor.js","sourceRoot":"","sources":["../../../../../../../modules/@angular/common/src/forms/directives/number_value_accessor.ts"],"names":[],"mappings":";AAAA,uBAA0E,eAAe,CAAC,CAAA;AAC1F,uBAA4B,0BAA0B,CAAC,CAAA;AACvD,yCAAsD,0BAA0B,CAAC,CAAA;AAEnD,6BAAqB,GAAiD;IAClG,OAAO,EAAE,0CAAiB;IAC1B,WAAW,EAAE,iBAAU,CAAC,MAAM,mBAAmB,CAAC;IAClD,KAAK,EAAE,IAAI;CACZ,CAAC;AACF;IAGA;;;OAGG;IACH,YAAoB,SAAmB,EAC/B,WAAuB;QADX,cAAS,GAAT,SAAS,CAAU;QAC/B,gBAAW,GAAX,WAAW,CAAY;QAP7B,aAAQ,GAAG,CAAC,CAAM,OAAM,CAAC,CAAC;QAC1B,cAAS,GAAG,QAAO,CAAC,CAAC;IAMW,CAAC;IACnC;;;OAGG;IACH,UAAU,CAAC,KAAa;QACpB,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;IACpF,CAAC;IACH;;;OAGG;IACH,gBAAgB,CAAC,EAAuB;QACpC,IAAI,CAAC,QAAQ,GAAG,CAAC,KAAK,OAAO,EAAE,CAAC,KAAK,IAAI,EAAE,GAAG,IAAI,GAAG,oBAAa,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC3F,CAAC;IACH;;;OAGG;IACH,iBAAiB,CAAC,EAAc,IAAU,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC,CAAC,CAAC;IAE9D,OAAO,8BAA8B;QACtC,gBAAgB;QACjB,mBAAmB,CAAC,SAAS,CAAC,QAAQ,CAAC;QACtC,gBAAgB;QACjB,mBAAmB,CAAC,SAAS,CAAC,SAAS,CAAC;QACvC,gBAAgB;QACjB,mBAAmB,CAAC,SAAS,CAAC,SAAS,CAAC;QACvC,gBAAgB;QACjB,mBAAmB,CAAC,SAAS,CAAC,WAAW,CAAC;IACxC,CAAC;AAkBH,CAAC;AAhBM,8BAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,gBAAS,EAAE,IAAI,EAAE,CAAC;gBACxB,QAAQ,EACJ,6FAA6F;gBACjG,IAAI,EAAE;oBACJ,UAAU,EAAE,+BAA+B;oBAC3C,SAAS,EAAE,+BAA+B;oBAC1C,QAAQ,EAAE,aAAa;iBACxB;gBACD,QAAQ,EAAE,CAAC,6BAAqB,CAAC;aAClC,EAAG,EAAE;CACL,CAAC;AACF,kBAAkB,CAAQ,kCAAc,GAA2D;IACnG,EAAC,IAAI,EAAE,eAAQ,GAAG;IAClB,EAAC,IAAI,EAAE,iBAAU,GAAG;CACnB,CAAC;AAvDW,2BAAmB,sBAwD/B,CAAA","sourcesContent":["import {Directive, ElementRef, Renderer, Self, forwardRef, Provider} from '@angular/core';\nimport {NumberWrapper} from '../../../src/facade/lang';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from './control_value_accessor';\n\nexport const /** @type {?} */ NUMBER_VALUE_ACCESSOR: any = /*@ts2dart_const*/ /*@ts2dart_Provider*/ {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => NumberValueAccessor),\n  multi: true\n};\nexport class NumberValueAccessor implements ControlValueAccessor {\n  onChange = (_: any) => {};\n  onTouched = () => {};\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(private _renderer: Renderer,\nprivate _elementRef: ElementRef) {}\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: number): void {\n    this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', value);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (_: number) => void): void {\n    this.onChange = (value) => { fn(value == '' ? null : NumberWrapper.parseFloat(value)); };\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => void): void { this.onTouched = fn; }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nNumberValueAccessor.prototype.onChange;\n /** @type {?} */\nNumberValueAccessor.prototype.onTouched;\n /** @type {?} */\nNumberValueAccessor.prototype._renderer;\n /** @type {?} */\nNumberValueAccessor.prototype._elementRef;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'input[type=number][ngControl],input[type=number][ngFormControl],input[type=number][ngModel]',\n  host: {\n    '(change)': 'onChange($event.target.value)',\n    '(input)': 'onChange($event.target.value)',\n    '(blur)': 'onTouched()'\n  },\n  bindings: [NUMBER_VALUE_ACCESSOR]\n}, ] },\n];\n/** @nocollapse */ static ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: Renderer, },\n{type: ElementRef, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}