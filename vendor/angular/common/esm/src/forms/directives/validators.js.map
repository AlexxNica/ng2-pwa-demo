{"version":3,"file":"validators.js","sourceRoot":"","sources":["../../../../../../../modules/@angular/common/src/forms/directives/validators.ts"],"names":[],"mappings":"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","sourcesContent":["import {forwardRef, Attribute, Directive} from '@angular/core';\nimport {NumberWrapper} from '../../facade/lang';\nimport {Validators, NG_VALIDATORS} from '../validators';\nimport {AbstractControl} from '../model';\nimport * as modelModule from '../model';\n\n\n\n/**\n * An interface that can be implemented by classes that can act as validators.\n *\n * ## Usage\n *\n * ```typescript\n * @Directive({\n *   selector: '[custom-validator]',\n *   providers: [provide(NG_VALIDATORS, {useExisting: CustomValidatorDirective, multi: true})]\n * })\n * class CustomValidatorDirective implements Validator {\n *   validate(c: Control): {[key: string]: any} {\n *     return {\"custom\": true};\n *   }\n * }\n * ```\n */\nexport interface Validator { validate(c: modelModule.AbstractControl): {[key: string]: any}; }\n\nconst /** @type {?} */ REQUIRED = /*@ts2dart_const*/ Validators.required;\n\nexport const /** @type {?} */ REQUIRED_VALIDATOR: any = /*@ts2dart_const*/ /*@ts2dart_Provider*/ {\n  provide: NG_VALIDATORS,\n  useValue: REQUIRED,\n  multi: true\n};\nexport class RequiredValidator {\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[required][ngControl],[required][ngFormControl],[required][ngModel]',\n  providers: [REQUIRED_VALIDATOR]\n}, ] },\n];\n}\n\nexport interface ValidatorFn { (c: AbstractControl): {[key: string]: any}; }\nexport interface AsyncValidatorFn {\n  (c: AbstractControl): any /*Promise<{[key: string]: any}>|Observable<{[key: string]: any}>*/;\n}\n\n/**\n * Provivder which adds {@link MinLengthValidator} to {@link NG_VALIDATORS}.\n *\n * ## Example:\n *\n * {@example common/forms/ts/validators/validators.ts region='min'}\n */\nexport const /** @type {?} */ MIN_LENGTH_VALIDATOR: any = /*@ts2dart_const*/ /*@ts2dart_Provider*/ {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MinLengthValidator),\n  multi: true\n};\nexport class MinLengthValidator implements Validator {\nprivate _validator: ValidatorFn;\n/**\n * @param {?} minLength\n */\nconstructor( minLength: string) {\n    this._validator = Validators.minLength(NumberWrapper.parseInt(minLength, 10));\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): {[key: string]: any} { return this._validator(c); }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nMinLengthValidator.prototype._validator;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[minlength][ngControl],[minlength][ngFormControl],[minlength][ngModel]',\n  providers: [MIN_LENGTH_VALIDATOR]\n}, ] },\n];\n/** @nocollapse */ static ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: undefined, decorators: [{ type: Attribute, args: [\"minlength\", ] }, ]},\n];\n}\n\n/**\n * Provider which adds {@link MaxLengthValidator} to {@link NG_VALIDATORS}.\n *\n * ## Example:\n *\n * {@example common/forms/ts/validators/validators.ts region='max'}\n */\nexport const /** @type {?} */ MAX_LENGTH_VALIDATOR: any = /*@ts2dart_const*/ /*@ts2dart_Provider*/ {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MaxLengthValidator),\n  multi: true\n};\nexport class MaxLengthValidator implements Validator {\nprivate _validator: ValidatorFn;\n/**\n * @param {?} maxLength\n */\nconstructor( maxLength: string) {\n    this._validator = Validators.maxLength(NumberWrapper.parseInt(maxLength, 10));\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): {[key: string]: any} { return this._validator(c); }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nMaxLengthValidator.prototype._validator;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[maxlength][ngControl],[maxlength][ngFormControl],[maxlength][ngModel]',\n  providers: [MAX_LENGTH_VALIDATOR]\n}, ] },\n];\n/** @nocollapse */ static ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: undefined, decorators: [{ type: Attribute, args: [\"maxlength\", ] }, ]},\n];\n}\n\n\n/**\n * A Directive that adds the `pattern` validator to any controls marked with the\n * `pattern` attribute, via the {@link NG_VALIDATORS} binding. Uses attribute value\n * as the regex to validate Control value against.  Follows pattern attribute\n * semantics; i.e. regex must match entire Control value.\n *\n * ### Example\n *\n * ```\n * <input [ngControl]=\"fullName\" pattern=\"[a-zA-Z ]*\">\n * ```\n */\nexport const /** @type {?} */ PATTERN_VALIDATOR: any = /*@ts2dart_const*/ /*@ts2dart_Provider*/ {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => PatternValidator),\n  multi: true\n};\nexport class PatternValidator implements Validator {\nprivate _validator: ValidatorFn;\n/**\n * @param {?} pattern\n */\nconstructor( pattern: string) {\n    this._validator = Validators.pattern(pattern);\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): {[key: string]: any} { return this._validator(c); }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nPatternValidator.prototype._validator;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[pattern][ngControl],[pattern][ngFormControl],[pattern][ngModel]',\n  providers: [PATTERN_VALIDATOR]\n}, ] },\n];\n/** @nocollapse */ static ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: undefined, decorators: [{ type: Attribute, args: [\"pattern\", ] }, ]},\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}