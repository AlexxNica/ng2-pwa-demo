{"version":3,"file":"ng_form.js","sourceRoot":"","sources":["../../../../../../../modules/@angular/common/src/forms/directives/ng_form.ts"],"names":[],"mappings":"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","sourcesContent":["import {Directive, forwardRef, Provider, Optional, Inject, Self} from '@angular/core';\nimport {\n  PromiseWrapper,\n  ObservableWrapper,\n  EventEmitter,\n  PromiseCompleter\n} from '../../../src/facade/async';\nimport {ListWrapper} from '../../../src/facade/collection';\nimport {isPresent} from '../../../src/facade/lang';\nimport {NgControl} from './ng_control';\nimport {Form} from './form_interface';\nimport {NgControlGroup} from './ng_control_group';\nimport {ControlContainer} from './control_container';\nimport {AbstractControl, ControlGroup, Control} from '../model';\nimport {setUpControl, setUpControlGroup, composeValidators, composeAsyncValidators} from './shared';\nimport {NG_VALIDATORS, NG_ASYNC_VALIDATORS} from '../validators';\n\nexport const /** @type {?} */ formDirectiveProvider: any =\n    /*@ts2dart_const*/ {provide: ControlContainer, useExisting: forwardRef(() => NgForm)};\nexport class NgForm extends ControlContainer implements Form {\n  form: ControlGroup;\n  ngSubmit = new EventEmitter();\n/**\n * @param {?} validators\n * @param {?} asyncValidators\n */\nconstructor( validators: any[], asyncValidators: any[]) {\n    super();\n    this.form = new ControlGroup({}, null, composeValidators(validators),\n                                 composeAsyncValidators(asyncValidators));\n  }\n\n  get formDirective(): Form { return this; }\n\n  get control(): ControlGroup { return this.form; }\n\n  get path(): string[] { return []; }\n\n  get controls(): {[key: string]: AbstractControl} { return this.form.controls; }\n/**\n * @param {?} dir\n * @return {?}\n */\naddControl(dir: NgControl): void {\n    PromiseWrapper.scheduleMicrotask(() => {\n      var /** @type {?} */ container = this._findContainer(dir.path);\n      var /** @type {?} */ ctrl = new Control();\n      setUpControl(ctrl, dir);\n      container.addControl(dir.name, ctrl);\n      ctrl.updateValueAndValidity({emitEvent: false});\n    });\n  }\n/**\n * @param {?} dir\n * @return {?}\n */\ngetControl(dir: NgControl): Control { return /** @type {?} */(( <Control>this.form.find(dir.path))); }\n/**\n * @param {?} dir\n * @return {?}\n */\nremoveControl(dir: NgControl): void {\n    PromiseWrapper.scheduleMicrotask(() => {\n      var /** @type {?} */ container = this._findContainer(dir.path);\n      if (isPresent(container)) {\n        container.removeControl(dir.name);\n        container.updateValueAndValidity({emitEvent: false});\n      }\n    });\n  }\n/**\n * @param {?} dir\n * @return {?}\n */\naddControlGroup(dir: NgControlGroup): void {\n    PromiseWrapper.scheduleMicrotask(() => {\n      var /** @type {?} */ container = this._findContainer(dir.path);\n      var /** @type {?} */ group = new ControlGroup({});\n      setUpControlGroup(group, dir);\n      container.addControl(dir.name, group);\n      group.updateValueAndValidity({emitEvent: false});\n    });\n  }\n/**\n * @param {?} dir\n * @return {?}\n */\nremoveControlGroup(dir: NgControlGroup): void {\n    PromiseWrapper.scheduleMicrotask(() => {\n      var /** @type {?} */ container = this._findContainer(dir.path);\n      if (isPresent(container)) {\n        container.removeControl(dir.name);\n        container.updateValueAndValidity({emitEvent: false});\n      }\n    });\n  }\n/**\n * @param {?} dir\n * @return {?}\n */\ngetControlGroup(dir: NgControlGroup): ControlGroup {\n    return /** @type {?} */(( <ControlGroup>this.form.find(dir.path)));\n  }\n/**\n * @param {?} dir\n * @param {?} value\n * @return {?}\n */\nupdateModel(dir: NgControl, value: any): void {\n    PromiseWrapper.scheduleMicrotask(() => {\n      var /** @type {?} */ ctrl = /** @type {?} */(( <Control>this.form.find(dir.path)));\n      ctrl.updateValue(value);\n    });\n  }\n/**\n * @return {?}\n */\nonSubmit(): boolean {\n    ObservableWrapper.callEmit(this.ngSubmit, null);\n    return false;\n  }\n/**\n * @internal\n * @param {?} path\n * @return {?}\n */\n_findContainer(path: string[]): ControlGroup {\n    path.pop();\n    return ListWrapper.isEmpty(path) ? this.form : /** @type {?} */(( <ControlGroup>this.form.find(path)));\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nNgForm.prototype.form;\n /** @type {?} */\nNgForm.prototype.ngSubmit;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'form:not([ngNoForm]):not([ngFormModel]),ngForm,[ngForm]',\n  bindings: [formDirectiveProvider],\n  host: {\n    '(submit)': 'onSubmit()',\n  },\n  outputs: ['ngSubmit'],\n  exportAs: 'ngForm'\n}, ] },\n];\n/** @nocollapse */ static ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: undefined, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS, ] }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS, ] }, ]},\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}