{"version":3,"file":"checkbox_value_accessor.js","sourceRoot":"","sources":["../../../../../../../modules/@angular/common/src/forms/directives/checkbox_value_accessor.ts"],"names":[],"mappings":";AAAA,uBAA0E,eAAe,CAAC,CAAA;AAC1F,yCAAsD,0BAA0B,CAAC,CAAA;AAEnD,+BAAuB,GAA2B;IAC9E,OAAO,EAAE,0CAAiB;IAC1B,WAAW,EAAE,iBAAU,CAAC,MAAM,4BAA4B,CAAC;IAC3D,KAAK,EAAE,IAAI;CACZ,CAAC;AACF;IAGA;;;OAGG;IACH,YAAoB,SAAmB,EAC/B,WAAuB;QADX,cAAS,GAAT,SAAS,CAAU;QAC/B,gBAAW,GAAX,WAAW,CAAY;QAP7B,aAAQ,GAAG,CAAC,CAAM,OAAM,CAAC,CAAC;QAC1B,cAAS,GAAG,QAAO,CAAC,CAAC;IAMW,CAAC;IACnC;;;OAGG;IACH,UAAU,CAAC,KAAU;QACjB,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;IACtF,CAAC;IACH;;;OAGG;IACH,gBAAgB,CAAC,EAAkB,IAAU,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC,CAAC,CAAC;IAClE;;;OAGG;IACH,iBAAiB,CAAC,EAAY,IAAU,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC,CAAC,CAAC;IAE5D,OAAO,8BAA8B;QACtC,gBAAgB;QACjB,4BAA4B,CAAC,SAAS,CAAC,QAAQ,CAAC;QAC/C,gBAAgB;QACjB,4BAA4B,CAAC,SAAS,CAAC,SAAS,CAAC;QAChD,gBAAgB;QACjB,4BAA4B,CAAC,SAAS,CAAC,SAAS,CAAC;QAChD,gBAAgB;QACjB,4BAA4B,CAAC,SAAS,CAAC,WAAW,CAAC;IACjD,CAAC;AAcH,CAAC;AAZM,uCAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,gBAAS,EAAE,IAAI,EAAE,CAAC;gBACxB,QAAQ,EACJ,mGAAmG;gBACvG,IAAI,EAAE,EAAC,UAAU,EAAE,iCAAiC,EAAE,QAAQ,EAAE,aAAa,EAAC;gBAC9E,SAAS,EAAE,CAAC,+BAAuB,CAAC;aACrC,EAAG,EAAE;CACL,CAAC;AACF,kBAAkB,CAAQ,2CAAc,GAA2D;IACnG,EAAC,IAAI,EAAE,eAAQ,GAAG;IAClB,EAAC,IAAI,EAAE,iBAAU,GAAG;CACnB,CAAC;AAjDW,oCAA4B,+BAkDxC,CAAA","sourcesContent":["import {Directive, Renderer, ElementRef, Self, forwardRef, Provider} from '@angular/core';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from './control_value_accessor';\n\nexport const /** @type {?} */ CHECKBOX_VALUE_ACCESSOR: any = /*@ts2dart_const*/ {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => CheckboxControlValueAccessor),\n  multi: true\n};\nexport class CheckboxControlValueAccessor implements ControlValueAccessor {\n  onChange = (_: any) => {};\n  onTouched = () => {};\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(private _renderer: Renderer,\nprivate _elementRef: ElementRef) {}\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n    this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', value);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (_: any) => {}): void { this.onChange = fn; }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => {}): void { this.onTouched = fn; }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nCheckboxControlValueAccessor.prototype.onChange;\n /** @type {?} */\nCheckboxControlValueAccessor.prototype.onTouched;\n /** @type {?} */\nCheckboxControlValueAccessor.prototype._renderer;\n /** @type {?} */\nCheckboxControlValueAccessor.prototype._elementRef;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'input[type=checkbox][ngControl],input[type=checkbox][ngFormControl],input[type=checkbox][ngModel]',\n  host: {'(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()'},\n  providers: [CHECKBOX_VALUE_ACCESSOR]\n}, ] },\n];\n/** @nocollapse */ static ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: Renderer, },\n{type: ElementRef, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}