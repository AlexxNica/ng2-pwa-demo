{"version":3,"file":"radio_control_value_accessor.js","sourceRoot":"","sources":["../../../../../../../modules/@angular/common/src/forms/directives/radio_control_value_accessor.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Directive,\n  ElementRef,\n  Renderer,\n  forwardRef,\n  Provider,\n  Input,\n  OnInit,\n  OnDestroy,\n  Injector,\n  Injectable\n} from '@angular/core';\nimport {isPresent} from '../../../src/facade/lang';\nimport {ListWrapper} from '../../../src/facade/collection';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from './control_value_accessor';\nimport {NgControl} from './ng_control';\n\nexport const /** @type {?} */ RADIO_VALUE_ACCESSOR: any = /*@ts2dart_const*/ /*@ts2dart_Provider*/ {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => RadioControlValueAccessor),\n  multi: true\n};\nexport class RadioControlRegistry {\nprivate _accessors: any[] = [];\n/**\n * @param {?} control\n * @param {?} accessor\n * @return {?}\n */\nadd(control: NgControl, accessor: RadioControlValueAccessor) {\n    this._accessors.push([control, accessor]);\n  }\n/**\n * @param {?} accessor\n * @return {?}\n */\nremove(accessor: RadioControlValueAccessor) {\n    var /** @type {?} */ indexToRemove = -1;\n    for (var /** @type {?} */ i = 0; i < this._accessors.length; ++i) {\n      if (this._accessors[i][1] === accessor) {\n        indexToRemove = i;\n      }\n    }\n    ListWrapper.removeAt(this._accessors, indexToRemove);\n  }\n/**\n * @param {?} accessor\n * @return {?}\n */\nselect(accessor: RadioControlValueAccessor) {\n    this._accessors.forEach((c) => {\n      if (c[0].control.root === accessor._control.control.root && c[1] !== accessor) {\n        c[1].fireUncheck();\n      }\n    });\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nRadioControlRegistry.prototype._accessors;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n}\n\n/**\n * The value provided by the forms API for radio buttons.\n */\nexport class RadioButtonState {\n/**\n * @param {?} checked\n * @param {?} value\n */\nconstructor(public checked: boolean,\npublic value: string) {}\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nRadioButtonState.prototype.checked;\n /** @type {?} */\nRadioButtonState.prototype.value;\n  }\n\n}\nexport class RadioControlValueAccessor implements ControlValueAccessor,\n    OnDestroy, OnInit {\n  /** @internal */\n  _state: RadioButtonState;\n  /** @internal */\n  _control: NgControl; name: string;\n  /** @internal */\n  _fn: Function;\n  onChange = () => {};\n  onTouched = () => {};\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _registry\n * @param {?} _injector\n */\nconstructor(private _renderer: Renderer,\nprivate _elementRef: ElementRef,\nprivate _registry: RadioControlRegistry,\nprivate _injector: Injector) {}\n/**\n * @return {?}\n */\nngOnInit(): void {\n    this._control = this._injector.get(NgControl);\n    this._registry.add(this._control, this);\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void { this._registry.remove(this); }\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n    this._state = value;\n    if (isPresent(value) && value.checked) {\n      this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', true);\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (_: any) => {}): void {\n    this._fn = fn;\n    this.onChange = () => {\n      fn(new RadioButtonState(true, this._state.value));\n      this._registry.select(this);\n    };\n  }\n/**\n * @return {?}\n */\nfireUncheck(): void { this._fn(new RadioButtonState(false, this._state.value)); }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => {}): void { this.onTouched = fn; }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @internal\n @type {?} */\nRadioControlValueAccessor.prototype._state;\n /** @internal\n @type {?} */\nRadioControlValueAccessor.prototype._control;\n /** @type {?} */\nRadioControlValueAccessor.prototype.name;\n /** @internal\n @type {?} */\nRadioControlValueAccessor.prototype._fn;\n /** @type {?} */\nRadioControlValueAccessor.prototype.onChange;\n /** @type {?} */\nRadioControlValueAccessor.prototype.onTouched;\n /** @type {?} */\nRadioControlValueAccessor.prototype._renderer;\n /** @type {?} */\nRadioControlValueAccessor.prototype._elementRef;\n /** @type {?} */\nRadioControlValueAccessor.prototype._registry;\n /** @type {?} */\nRadioControlValueAccessor.prototype._injector;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'input[type=radio][ngControl],input[type=radio][ngFormControl],input[type=radio][ngModel]',\n  host: {'(change)': 'onChange()', '(blur)': 'onTouched()'},\n  providers: [RADIO_VALUE_ACCESSOR]\n}, ] },\n];\n/** @nocollapse */ static ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: Renderer, },\n{type: ElementRef, },\n{type: RadioControlRegistry, },\n{type: Injector, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}