{"version":3,"file":"http.js","sourceRoot":"","sources":["../../../../../modules/@angular/http/src/http.ts"],"names":[],"mappings":"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","sourcesContent":["import {isString, isPresent} from '../src/facade/lang';\nimport {makeTypeError} from '../src/facade/exceptions';\nimport {Injectable} from '@angular/core';\nimport {RequestOptionsArgs, ConnectionBackend} from './interfaces';\nimport {Request} from './static_request';\nimport {Response} from './static_response';\nimport {BaseRequestOptions, RequestOptions} from './base_request_options';\nimport {RequestMethod} from './enums';\nimport {Observable} from 'rxjs/Observable';\n/**\n * @param {?} backend\n * @param {?} request\n * @return {?}\n */\nfunction httpRequest(backend: ConnectionBackend, request: Request): Observable<Response> {\n  return backend.createConnection(request).response;\n}\n/**\n * @param {?} defaultOpts\n * @param {?} providedOpts\n * @param {?} method\n * @param {?} url\n * @return {?}\n */\nfunction mergeOptions(defaultOpts: BaseRequestOptions, providedOpts: RequestOptionsArgs,\n                      method: RequestMethod, url: string): RequestOptions {\n  var /** @type {?} */ newOptions = defaultOpts;\n  if (isPresent(providedOpts)) {\n    // Hack so Dart can used named parameters\n    return newOptions.merge(new RequestOptions({\n      method: providedOpts.method || method,\n      url: providedOpts.url || url,\n      search: providedOpts.search,\n      headers: providedOpts.headers,\n      body: providedOpts.body\n    }));\n  }\n  if (isPresent(method)) {\n    return newOptions.merge(new RequestOptions({method: method, url: url}));\n  } else {\n    return newOptions.merge(new RequestOptions({url: url}));\n  }\n}\nexport class Http {\n/**\n * @param {?} _backend\n * @param {?} _defaultOptions\n */\nconstructor(protected _backend: ConnectionBackend, protected _defaultOptions: RequestOptions) {}\n/**\n *  Performs any type of http request. First argument is required, and can either be a url or a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions} object can be provided as the 2nd argument. The options object will be merged with the values of {@link BaseRequestOptions} before performing the request.\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\nrequest(url: string | Request, options?: RequestOptionsArgs): Observable<Response> {\n    var /** @type {?} */ responseObservable: any;\n    if (isString(url)) {\n      responseObservable = httpRequest(\n          this._backend,\n          new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */(( <string>url)))));\n    } else if (url instanceof Request) {\n      responseObservable = httpRequest(this._backend, url);\n    } else {\n      throw makeTypeError('First argument must be a url string or Request instance.');\n    }\n    return responseObservable;\n  }\n/**\n *  Performs a request with `get` http method.\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\nget(url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options,\n                                                               RequestMethod.Get, url)));\n  }\n/**\n *  Performs a request with `post` http method.\n * @param {?} url\n * @param {?} body\n * @param {?=} options\n * @return {?}\n */\npost(url: string, body: string, options?: RequestOptionsArgs): Observable<Response> {\n    return httpRequest(\n        this._backend,\n        new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({body: body})),\n                                 options, RequestMethod.Post, url)));\n  }\n/**\n *  Performs a request with `put` http method.\n * @param {?} url\n * @param {?} body\n * @param {?=} options\n * @return {?}\n */\nput(url: string, body: string, options?: RequestOptionsArgs): Observable<Response> {\n    return httpRequest(\n        this._backend,\n        new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({body: body})),\n                                 options, RequestMethod.Put, url)));\n  }\n/**\n *  Performs a request with `delete` http method.\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\ndelete (url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options,\n                                                               RequestMethod.Delete, url)));\n  }\n/**\n *  Performs a request with `patch` http method.\n * @param {?} url\n * @param {?} body\n * @param {?=} options\n * @return {?}\n */\npatch(url: string, body: string, options?: RequestOptionsArgs): Observable<Response> {\n    return httpRequest(\n        this._backend,\n        new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({body: body})),\n                                 options, RequestMethod.Patch, url)));\n  }\n/**\n *  Performs a request with `head` http method.\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\nhead(url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options,\n                                                               RequestMethod.Head, url)));\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nHttp.prototype._backend;\n /** @type {?} */\nHttp.prototype._defaultOptions;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */ static ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: ConnectionBackend, },\n{type: RequestOptions, },\n];\n}\nexport class Jsonp extends Http {\n/**\n * @param {?} backend\n * @param {?} defaultOptions\n */\nconstructor(backend: ConnectionBackend, defaultOptions: RequestOptions) {\n    super(backend, defaultOptions);\n  }\n/**\n *  Performs any type of http request. First argument is required, and can either be a url or a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions} object can be provided as the 2nd argument. The options object will be merged with the values of {@link BaseRequestOptions} before performing the request.\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\nrequest(url: string | Request, options?: RequestOptionsArgs): Observable<Response> {\n    var /** @type {?} */ responseObservable: any;\n    if (isString(url)) {\n      url =\n          new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */(( <string>url))));\n    }\n    if (url instanceof Request) {\n      if (url.method !== RequestMethod.Get) {\n        makeTypeError('JSONP requests must use GET request method.');\n      }\n      responseObservable = httpRequest(this._backend, url);\n    } else {\n      throw makeTypeError('First argument must be a url string or Request instance.');\n    }\n    return responseObservable;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */ static ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: ConnectionBackend, },\n{type: RequestOptions, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}