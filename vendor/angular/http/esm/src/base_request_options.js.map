{"version":3,"file":"base_request_options.js","sourceRoot":"","sources":["../../../../../modules/@angular/http/src/base_request_options.ts"],"names":[],"mappings":"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","sourcesContent":["import {isPresent, isString} from '../src/facade/lang';\nimport {Headers} from './headers';\nimport {RequestMethod} from './enums';\nimport {RequestOptionsArgs} from './interfaces';\nimport {Injectable} from '@angular/core';\nimport {URLSearchParams} from './url_search_params';\nimport {normalizeMethodName} from './http_utils';\n\n/**\n * Creates a request options object to be optionally provided when instantiating a\n * {@link Request}.\n *\n * This class is based on the `RequestInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\n *\n * All values are null by default. Typical defaults can be found in the {@link BaseRequestOptions}\n * class, which sub-classes `RequestOptions`.\n *\n * ### Example ([live demo](http://plnkr.co/edit/7Wvi3lfLq41aQPKlxB4O?p=preview))\n *\n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '@angular/http';\n *\n * var options = new RequestOptions({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * });\n * var req = new Request(options);\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // https://google.com\n * ```\n */\nexport class RequestOptions {\n  /**\n   * Http method with which to execute a {@link Request}.\n   * Acceptable methods are defined in the {@link RequestMethod} enum.\n   */\n  method: RequestMethod | string;\n  /**\n   * {@link Headers} to be attached to a {@link Request}.\n   */\n  headers: Headers;\n  /**\n   * Body to be used when creating a {@link Request}.\n   */\n  // TODO: support FormData, Blob, URLSearchParams\n  body: string;\n  /**\n   * Url with which to perform a {@link Request}.\n   */\n  url: string;\n  /**\n   * Search parameters to be included in a {@link Request}.\n   */\n  search: URLSearchParams;\n/**\n * @param {?=} __0\n */\nconstructor({method, headers, body, url, search}: RequestOptionsArgs = {}) {\n    this.method = isPresent(method) ? normalizeMethodName(method) : null;\n    this.headers = isPresent(headers) ? headers : null;\n    this.body = isPresent(body) ? body : null;\n    this.url = isPresent(url) ? url : null;\n    this.search = isPresent(search) ? (isString(search) ? new URLSearchParams(<string>(search)) :\n                                                          <URLSearchParams>(search)) :\n                                      null;\n  }\n/**\n *  Creates a copy of the `RequestOptions` instance, using the optional input as values to override existing values. This method will not change the values of the instance on which it is being called. * Note that `headers` and `search` will override existing values completely if present in the `options` object. If these values should be merged, it should be done prior to calling `merge` on the `RequestOptions` instance. * ### Example ([live demo](http://plnkr.co/edit/6w8XA8YTkDRcPYpdB9dk?p=preview)) * ```typescript import {RequestOptions, Request, RequestMethod} from '@angular/http'; * var options = new RequestOptions({ method: RequestMethod.Post }); var req = new Request(options.merge({ url: 'https://google.com' })); console.log('req.method:', RequestMethod[req.method]); // Post console.log('options.url:', options.url); // null console.log('req.url:', req.url); // https://google.com ```\n * @param {?=} options\n * @return {?}\n */\nmerge(options?: RequestOptionsArgs): RequestOptions {\n    return new RequestOptions({\n      method: isPresent(options) && isPresent(options.method) ? options.method : this.method,\n      headers: isPresent(options) && isPresent(options.headers) ? options.headers : this.headers,\n      body: isPresent(options) && isPresent(options.body) ? options.body : this.body,\n      url: isPresent(options) && isPresent(options.url) ? options.url : this.url,\n      search: isPresent(options) && isPresent(options.search) ?\n                  (isString(options.search) ? new URLSearchParams( /** @type {?} */((<string>(options.search)))) :\n                                              ( /** @type {?} */((<URLSearchParams>(options.search)))).clone()) :\n                  this.search\n    });\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** Http method with which to execute a {@link Request}. Acceptable methods are defined in the {@link RequestMethod} enum.\n @type {?} */\nRequestOptions.prototype.method;\n /** {@link Headers} to be attached to a {@link Request}.\n @type {?} */\nRequestOptions.prototype.headers;\n /** @type {?} */\nRequestOptions.prototype.body;\n /** Url with which to perform a {@link Request}.\n @type {?} */\nRequestOptions.prototype.url;\n /** Search parameters to be included in a {@link Request}.\n @type {?} */\nRequestOptions.prototype.search;\n  }\n\n}\nexport class BaseRequestOptions extends RequestOptions {\n/**\n */\nconstructor() { super({method: RequestMethod.Get, headers: new Headers()}); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */ static ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}