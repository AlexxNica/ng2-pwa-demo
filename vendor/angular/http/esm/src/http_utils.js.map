{"version":3,"file":"http_utils.js","sourceRoot":"","sources":["../../../../../modules/@angular/http/src/http_utils.ts"],"names":[],"mappings":";AAAA,uBAAuB,oBAAoB,CAAC,CAAA;AAC5C,wBAA4B,SAAS,CAAC,CAAA;AACtC,6BAA4B,0BAA0B,CAAC,CAAA;AACvD;;;GAGG;AACH,6BAAoC,MAA8B;IAChE,EAAE,CAAC,CAAC,eAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QACrB,IAAI,gBAAgB,CAAC,cAAc,GAAG,MAAM,CAAC;QAC7C,MAAM,GAAG,CAAkB,CAAU,MAAO,CAAC,CAAC;aAChC,OAAO,CAAC,YAAY,EAAE,CAAC,EAAU,EAAE,EAAU,EAAE,EAAU,KAC/B,EAAE,CAAC,WAAW,EAAE,GAAG,EAAE,CAAC,WAAW,EAAE,CAAC,CAAC;QAC7E,MAAM,GAAmB,CAAW,CAAkB,CAAwB,qBAAc,CAAC,CAAC,CAAC,MAAM,CAAE,CAAC,CAAC;QACzG,EAAE,CAAC,CAAC,OAAO,MAAM,KAAK,QAAQ,CAAC;YAC7B,MAAM,0BAAa,CACf,uCAAuC,cAAc,qBAAqB,CAAC,CAAC;IACpF,CAAC;IACD,MAAM,CAAiB,CAAkB,MAAO,CAAC,CAAC;AACpD,CAAC;AAZe,2BAAmB,sBAYlC,CAAA;AAE6B,iBAAS,GAAG,CAAC,MAAc,KAAc,CAAC,MAAM,IAAI,GAAG,IAAI,MAAM,GAAG,GAAG,CAAC,CAAC;AACvG;;;GAGG;AACH,wBAA+B,GAAQ;IACrC,EAAE,CAAC,CAAC,aAAa,IAAI,GAAG,CAAC,CAAC,CAAC;QACzB,MAAM,CAAC,GAAG,CAAC,WAAW,CAAC;IACzB,CAAC;IACD,EAAE,CAAC,CAAC,kBAAkB,CAAC,IAAI,CAAC,GAAG,CAAC,qBAAqB,EAAE,CAAC,CAAC,CAAC,CAAC;QACzD,MAAM,CAAC,GAAG,CAAC,iBAAiB,CAAC,eAAe,CAAC,CAAC;IAChD,CAAC;IACD,MAAM,CAAC;AACT,CAAC;AARe,sBAAc,iBAQ7B,CAAA;AAED,qBAAyB,oBAAoB,CAAC;AAAtC,uCAAsC","sourcesContent":["import {isString} from '../src/facade/lang';\nimport {RequestMethod} from './enums';\nimport {makeTypeError} from '../src/facade/exceptions';\n/**\n * @param {?} method\n * @return {?}\n */\nexport function normalizeMethodName(method: string | RequestMethod): RequestMethod {\n  if (isString(method)) {\n    var /** @type {?} */ originalMethod = method;\n    method = ( /** @type {?} */((<string>method)))\n                 .replace(/(\\w)(\\w*)/g, (g0: string, g1: string, g2: string) =>\n                                            g1.toUpperCase() + g2.toLowerCase());\n    method = /** @type {?} */(( <number>( /** @type {?} */((<{[key: string]: any}>RequestMethod)))[method]));\n    if (typeof method !== 'number')\n      throw makeTypeError(\n          `Invalid request method. The method \"${originalMethod}\" is not supported.`);\n  }\n  return /** @type {?} */(( <RequestMethod>method));\n}\n\nexport const /** @type {?} */ isSuccess = (status: number): boolean => (status >= 200 && status < 300);\n/**\n * @param {?} xhr\n * @return {?}\n */\nexport function getResponseURL(xhr: any): string {\n  if ('responseURL' in xhr) {\n    return xhr.responseURL;\n  }\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader('X-Request-URL');\n  }\n  return;\n}\n\nexport {isJsObject} from '../src/facade/lang';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}