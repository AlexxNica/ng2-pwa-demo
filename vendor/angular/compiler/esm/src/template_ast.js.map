{"version":3,"file":"template_ast.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/template_ast.ts"],"names":[],"mappings":"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","sourcesContent":["import {AST} from './expression_parser/ast';\nimport {isPresent} from '../src/facade/lang';\nimport {\n  CompileDirectiveMetadata,\n  CompileTokenMetadata,\n  CompileProviderMetadata,\n} from './compile_metadata';\nimport {ParseSourceSpan} from './parse_util';\nimport {SecurityContext} from '../core_private';\n\n/**\n * An Abstract Syntax Tree node representing part of a parsed Angular template.\n */\nexport interface TemplateAst {\n  /**\n   * The source span from which this node was parsed.\n   */\n  sourceSpan: ParseSourceSpan;\n\n  /**\n   * Visit this node and possibly transform it.\n   */\n  visit(visitor: TemplateAstVisitor, context: any): any;\n}\n\n/**\n * A segment of text within the template.\n */\nexport class TextAst implements TemplateAst {\n/**\n * @param {?} value\n * @param {?} ngContentIndex\n * @param {?} sourceSpan\n */\nconstructor(public value: string,\npublic ngContentIndex: number,\npublic sourceSpan: ParseSourceSpan) {}\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisit(visitor: TemplateAstVisitor, context: any): any { return visitor.visitText(this, context); }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nTextAst.prototype.value;\n /** @type {?} */\nTextAst.prototype.ngContentIndex;\n /** @type {?} */\nTextAst.prototype.sourceSpan;\n  }\n\n}\n\n/**\n * A bound expression within the text of a template.\n */\nexport class BoundTextAst implements TemplateAst {\n/**\n * @param {?} value\n * @param {?} ngContentIndex\n * @param {?} sourceSpan\n */\nconstructor(public value: AST,\npublic ngContentIndex: number,\npublic sourceSpan: ParseSourceSpan) {}\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitBoundText(this, context);\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nBoundTextAst.prototype.value;\n /** @type {?} */\nBoundTextAst.prototype.ngContentIndex;\n /** @type {?} */\nBoundTextAst.prototype.sourceSpan;\n  }\n\n}\n\n/**\n * A plain attribute on an element.\n */\nexport class AttrAst implements TemplateAst {\n/**\n * @param {?} name\n * @param {?} value\n * @param {?} sourceSpan\n */\nconstructor(public name: string,\npublic value: string,\npublic sourceSpan: ParseSourceSpan) {}\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisit(visitor: TemplateAstVisitor, context: any): any { return visitor.visitAttr(this, context); }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nAttrAst.prototype.name;\n /** @type {?} */\nAttrAst.prototype.value;\n /** @type {?} */\nAttrAst.prototype.sourceSpan;\n  }\n\n}\n\n/**\n * A binding for an element property (e.g. `[property]=\"expression\"`).\n */\nexport class BoundElementPropertyAst implements TemplateAst {\n/**\n * @param {?} name\n * @param {?} type\n * @param {?} securityContext\n * @param {?} value\n * @param {?} unit\n * @param {?} sourceSpan\n */\nconstructor(public name: string,\npublic type: PropertyBindingType,\npublic securityContext: SecurityContext,\npublic value: AST,\npublic unit: string,\npublic sourceSpan: ParseSourceSpan) {}\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitElementProperty(this, context);\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nBoundElementPropertyAst.prototype.name;\n /** @type {?} */\nBoundElementPropertyAst.prototype.type;\n /** @type {?} */\nBoundElementPropertyAst.prototype.securityContext;\n /** @type {?} */\nBoundElementPropertyAst.prototype.value;\n /** @type {?} */\nBoundElementPropertyAst.prototype.unit;\n /** @type {?} */\nBoundElementPropertyAst.prototype.sourceSpan;\n  }\n\n}\n\n/**\n * A binding for an element event (e.g. `(event)=\"handler()\"`).\n */\nexport class BoundEventAst implements TemplateAst {\n/**\n * @param {?} name\n * @param {?} target\n * @param {?} handler\n * @param {?} sourceSpan\n */\nconstructor(public name: string,\npublic target: string,\npublic handler: AST,\npublic sourceSpan: ParseSourceSpan) {}\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitEvent(this, context);\n  }\n  get fullName() {\n    if (isPresent(this.target)) {\n      return `${this.target}:${this.name}`;\n    } else {\n      return this.name;\n    }\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nBoundEventAst.prototype.name;\n /** @type {?} */\nBoundEventAst.prototype.target;\n /** @type {?} */\nBoundEventAst.prototype.handler;\n /** @type {?} */\nBoundEventAst.prototype.sourceSpan;\n  }\n\n}\n\n/**\n * A reference declaration on an element (e.g. `let someName=\"expression\"`).\n */\nexport class ReferenceAst implements TemplateAst {\n/**\n * @param {?} name\n * @param {?} value\n * @param {?} sourceSpan\n */\nconstructor(public name: string,\npublic value: CompileTokenMetadata,\npublic sourceSpan: ParseSourceSpan) {}\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitReference(this, context);\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nReferenceAst.prototype.name;\n /** @type {?} */\nReferenceAst.prototype.value;\n /** @type {?} */\nReferenceAst.prototype.sourceSpan;\n  }\n\n}\n\n/**\n * A variable declaration on a <template> (e.g. `var-someName=\"someLocalName\"`).\n */\nexport class VariableAst implements TemplateAst {\n/**\n * @param {?} name\n * @param {?} value\n * @param {?} sourceSpan\n */\nconstructor(public name: string,\npublic value: string,\npublic sourceSpan: ParseSourceSpan) {}\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitVariable(this, context);\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nVariableAst.prototype.name;\n /** @type {?} */\nVariableAst.prototype.value;\n /** @type {?} */\nVariableAst.prototype.sourceSpan;\n  }\n\n}\n\n/**\n * An element declaration in a template.\n */\nexport class ElementAst implements TemplateAst {\n/**\n * @param {?} name\n * @param {?} attrs\n * @param {?} inputs\n * @param {?} outputs\n * @param {?} references\n * @param {?} directives\n * @param {?} providers\n * @param {?} hasViewContainer\n * @param {?} children\n * @param {?} ngContentIndex\n * @param {?} sourceSpan\n */\nconstructor(public name: string,\npublic attrs: AttrAst[],\npublic inputs: BoundElementPropertyAst[],\npublic outputs: BoundEventAst[],\npublic references: ReferenceAst[],\npublic directives: DirectiveAst[],\npublic providers: ProviderAst[],\npublic hasViewContainer: boolean,\npublic children: TemplateAst[],\npublic ngContentIndex: number,\npublic sourceSpan: ParseSourceSpan) {}\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitElement(this, context);\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nElementAst.prototype.name;\n /** @type {?} */\nElementAst.prototype.attrs;\n /** @type {?} */\nElementAst.prototype.inputs;\n /** @type {?} */\nElementAst.prototype.outputs;\n /** @type {?} */\nElementAst.prototype.references;\n /** @type {?} */\nElementAst.prototype.directives;\n /** @type {?} */\nElementAst.prototype.providers;\n /** @type {?} */\nElementAst.prototype.hasViewContainer;\n /** @type {?} */\nElementAst.prototype.children;\n /** @type {?} */\nElementAst.prototype.ngContentIndex;\n /** @type {?} */\nElementAst.prototype.sourceSpan;\n  }\n\n}\n\n/**\n * A `<template>` element included in an Angular template.\n */\nexport class EmbeddedTemplateAst implements TemplateAst {\n/**\n * @param {?} attrs\n * @param {?} outputs\n * @param {?} references\n * @param {?} variables\n * @param {?} directives\n * @param {?} providers\n * @param {?} hasViewContainer\n * @param {?} children\n * @param {?} ngContentIndex\n * @param {?} sourceSpan\n */\nconstructor(public attrs: AttrAst[],\npublic outputs: BoundEventAst[],\npublic references: ReferenceAst[],\npublic variables: VariableAst[],\npublic directives: DirectiveAst[],\npublic providers: ProviderAst[],\npublic hasViewContainer: boolean,\npublic children: TemplateAst[],\npublic ngContentIndex: number,\npublic sourceSpan: ParseSourceSpan) {}\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitEmbeddedTemplate(this, context);\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nEmbeddedTemplateAst.prototype.attrs;\n /** @type {?} */\nEmbeddedTemplateAst.prototype.outputs;\n /** @type {?} */\nEmbeddedTemplateAst.prototype.references;\n /** @type {?} */\nEmbeddedTemplateAst.prototype.variables;\n /** @type {?} */\nEmbeddedTemplateAst.prototype.directives;\n /** @type {?} */\nEmbeddedTemplateAst.prototype.providers;\n /** @type {?} */\nEmbeddedTemplateAst.prototype.hasViewContainer;\n /** @type {?} */\nEmbeddedTemplateAst.prototype.children;\n /** @type {?} */\nEmbeddedTemplateAst.prototype.ngContentIndex;\n /** @type {?} */\nEmbeddedTemplateAst.prototype.sourceSpan;\n  }\n\n}\n\n/**\n * A directive property with a bound value (e.g. `*ngIf=\"condition\").\n */\nexport class BoundDirectivePropertyAst implements TemplateAst {\n/**\n * @param {?} directiveName\n * @param {?} templateName\n * @param {?} value\n * @param {?} sourceSpan\n */\nconstructor(public directiveName: string,\npublic templateName: string,\npublic value: AST,\npublic sourceSpan: ParseSourceSpan) {}\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitDirectiveProperty(this, context);\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nBoundDirectivePropertyAst.prototype.directiveName;\n /** @type {?} */\nBoundDirectivePropertyAst.prototype.templateName;\n /** @type {?} */\nBoundDirectivePropertyAst.prototype.value;\n /** @type {?} */\nBoundDirectivePropertyAst.prototype.sourceSpan;\n  }\n\n}\n\n/**\n * A directive declared on an element.\n */\nexport class DirectiveAst implements TemplateAst {\n/**\n * @param {?} directive\n * @param {?} inputs\n * @param {?} hostProperties\n * @param {?} hostEvents\n * @param {?} sourceSpan\n */\nconstructor(public directive: CompileDirectiveMetadata,\npublic inputs: BoundDirectivePropertyAst[],\npublic hostProperties: BoundElementPropertyAst[],\npublic hostEvents: BoundEventAst[],\npublic sourceSpan: ParseSourceSpan) {}\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitDirective(this, context);\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nDirectiveAst.prototype.directive;\n /** @type {?} */\nDirectiveAst.prototype.inputs;\n /** @type {?} */\nDirectiveAst.prototype.hostProperties;\n /** @type {?} */\nDirectiveAst.prototype.hostEvents;\n /** @type {?} */\nDirectiveAst.prototype.sourceSpan;\n  }\n\n}\n\n/**\n * A provider declared on an element\n */\nexport class ProviderAst implements TemplateAst {\n/**\n * @param {?} token\n * @param {?} multiProvider\n * @param {?} eager\n * @param {?} providers\n * @param {?} providerType\n * @param {?} sourceSpan\n */\nconstructor(public token: CompileTokenMetadata,\npublic multiProvider: boolean,\npublic eager: boolean,\npublic providers: CompileProviderMetadata[],\npublic providerType: ProviderAstType,\npublic sourceSpan: ParseSourceSpan) {}\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisit(visitor: TemplateAstVisitor, context: any): any {\n    // No visit method in the visitor for now...\n    return null;\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nProviderAst.prototype.token;\n /** @type {?} */\nProviderAst.prototype.multiProvider;\n /** @type {?} */\nProviderAst.prototype.eager;\n /** @type {?} */\nProviderAst.prototype.providers;\n /** @type {?} */\nProviderAst.prototype.providerType;\n /** @type {?} */\nProviderAst.prototype.sourceSpan;\n  }\n\n}\nexport type ProviderAstType = number;\nexport let ProviderAstType: any = {};\nProviderAstType.PublicService = 0;\nProviderAstType.PrivateService = 1;\nProviderAstType.Component = 2;\nProviderAstType.Directive = 3;\nProviderAstType.Builtin = 4;\nProviderAstType[ProviderAstType.PublicService] = \"PublicService\";\nProviderAstType[ProviderAstType.PrivateService] = \"PrivateService\";\nProviderAstType[ProviderAstType.Component] = \"Component\";\nProviderAstType[ProviderAstType.Directive] = \"Directive\";\nProviderAstType[ProviderAstType.Builtin] = \"Builtin\";\n\n\n/**\n * Position where content is to be projected (instance of `<ng-content>` in a template).\n */\nexport class NgContentAst implements TemplateAst {\n/**\n * @param {?} index\n * @param {?} ngContentIndex\n * @param {?} sourceSpan\n */\nconstructor(public index: number,\npublic ngContentIndex: number,\npublic sourceSpan: ParseSourceSpan) {}\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisit(visitor: TemplateAstVisitor, context: any): any {\n    return visitor.visitNgContent(this, context);\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nNgContentAst.prototype.index;\n /** @type {?} */\nNgContentAst.prototype.ngContentIndex;\n /** @type {?} */\nNgContentAst.prototype.sourceSpan;\n  }\n\n}\nexport type PropertyBindingType = number;\nexport let PropertyBindingType: any = {};\nPropertyBindingType.Property = 0;\nPropertyBindingType.Attribute = 1;\nPropertyBindingType.Class = 2;\nPropertyBindingType.Style = 3;\nPropertyBindingType[PropertyBindingType.Property] = \"Property\";\nPropertyBindingType[PropertyBindingType.Attribute] = \"Attribute\";\nPropertyBindingType[PropertyBindingType.Class] = \"Class\";\nPropertyBindingType[PropertyBindingType.Style] = \"Style\";\n\n\n/**\n * A visitor for {@link TemplateAst} trees that will process each node.\n */\nexport interface TemplateAstVisitor {\n  visitNgContent(ast: NgContentAst, context: any): any;\n  visitEmbeddedTemplate(ast: EmbeddedTemplateAst, context: any): any;\n  visitElement(ast: ElementAst, context: any): any;\n  visitReference(ast: ReferenceAst, context: any): any;\n  visitVariable(ast: VariableAst, context: any): any;\n  visitEvent(ast: BoundEventAst, context: any): any;\n  visitElementProperty(ast: BoundElementPropertyAst, context: any): any;\n  visitAttr(ast: AttrAst, context: any): any;\n  visitBoundText(ast: BoundTextAst, context: any): any;\n  visitText(ast: TextAst, context: any): any;\n  visitDirective(ast: DirectiveAst, context: any): any;\n  visitDirectiveProperty(ast: BoundDirectivePropertyAst, context: any): any;\n}\n/**\n *  Visit every node in a list of {@link TemplateAst}s with the given {@link TemplateAstVisitor}.\n * @param {?} visitor\n * @param {?} asts\n * @param {?=} context\n * @return {?}\n */\nexport function templateVisitAll(visitor: TemplateAstVisitor, asts: TemplateAst[],\n                                 context: any = null): any[] {\n  var /** @type {?} */ result = [];\n  asts.forEach(ast => {\n    var /** @type {?} */ astResult = ast.visit(visitor, context);\n    if (isPresent(astResult)) {\n      result.push(astResult);\n    }\n  });\n  return result;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}