{"version":3,"file":"directive_resolver.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/directive_resolver.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  resolveForwardRef,\n  Injectable,\n  DirectiveMetadata,\n  ComponentMetadata,\n  InputMetadata,\n  OutputMetadata,\n  HostBindingMetadata,\n  HostListenerMetadata,\n  ContentChildrenMetadata,\n  ViewChildrenMetadata,\n  ContentChildMetadata,\n  ViewChildMetadata,\n  reflector\n} from '@angular/core';\nimport {ReflectorReader} from '../core_private';\n\nimport {Type, isPresent, stringify} from '../src/facade/lang';\nimport {BaseException} from '../src/facade/exceptions';\nimport {ListWrapper, StringMapWrapper} from '../src/facade/collection';\n/**\n * @param {?} type\n * @return {?}\n */\nfunction _isDirectiveMetadata(type: any): boolean {\n  return type instanceof DirectiveMetadata;\n}\nexport class DirectiveResolver {\nprivate _reflector: ReflectorReader;\n/**\n * @param {?=} _reflector\n */\nconstructor(_reflector?: ReflectorReader) {\n    if (isPresent(_reflector)) {\n      this._reflector = _reflector;\n    } else {\n      this._reflector = reflector;\n    }\n  }\n/**\n *  Return {@link DirectiveMetadata} for a given `Type`.\n * @param {?} type\n * @return {?}\n */\nresolve(type: Type): DirectiveMetadata {\n    var /** @type {?} */ typeMetadata = this._reflector.annotations(resolveForwardRef(type));\n    if (isPresent(typeMetadata)) {\n      var /** @type {?} */ metadata = typeMetadata.find(_isDirectiveMetadata);\n      if (isPresent(metadata)) {\n        var /** @type {?} */ propertyMetadata = this._reflector.propMetadata(type);\n        return this._mergeWithPropertyMetadata(metadata, propertyMetadata, type);\n      }\n    }\n\n    throw new BaseException(`No Directive annotation found on ${stringify(type)}`);\n  }\n/**\n * @param {?} dm\n * @param {?} propertyMetadata\n * @param {?} directiveType\n * @return {?}\n */\nprivate _mergeWithPropertyMetadata(dm: DirectiveMetadata,\n                                     propertyMetadata: {[key: string]: any[]},\n                                     directiveType: Type): DirectiveMetadata {\n    var /** @type {?} */ inputs = [];\n    var /** @type {?} */ outputs = [];\n    var /** @type {?} */ host: {[key: string]: string} = {};\n    var /** @type {?} */ queries: {[key: string]: any} = {};\n\n    StringMapWrapper.forEach(propertyMetadata, (metadata: any[], propName: string) => {\n      metadata.forEach(a => {\n        if (a instanceof InputMetadata) {\n          if (isPresent(a.bindingPropertyName)) {\n            inputs.push(`${propName}: ${a.bindingPropertyName}`);\n          } else {\n            inputs.push(propName);\n          }\n        }\n\n        if (a instanceof OutputMetadata) {\n          if (isPresent(a.bindingPropertyName)) {\n            outputs.push(`${propName}: ${a.bindingPropertyName}`);\n          } else {\n            outputs.push(propName);\n          }\n        }\n\n        if (a instanceof HostBindingMetadata) {\n          if (isPresent(a.hostPropertyName)) {\n            host[`[${a.hostPropertyName}]`] = propName;\n          } else {\n            host[`[${propName}]`] = propName;\n          }\n        }\n\n        if (a instanceof HostListenerMetadata) {\n          var /** @type {?} */ args = isPresent(a.args) ? ( /** @type {?} */((<any[]>a.args))).join(', ') : '';\n          host[`(${a.eventName})`] = `${propName}(${args})`;\n        }\n\n        if (a instanceof ContentChildrenMetadata) {\n          queries[propName] = a;\n        }\n\n        if (a instanceof ViewChildrenMetadata) {\n          queries[propName] = a;\n        }\n\n        if (a instanceof ContentChildMetadata) {\n          queries[propName] = a;\n        }\n\n        if (a instanceof ViewChildMetadata) {\n          queries[propName] = a;\n        }\n      });\n    });\n    return this._merge(dm, inputs, outputs, host, queries, directiveType);\n  }\n/**\n * @param {?} dm\n * @param {?} inputs\n * @param {?} outputs\n * @param {?} host\n * @param {?} queries\n * @param {?} directiveType\n * @return {?}\n */\nprivate _merge(dm: DirectiveMetadata, inputs: string[], outputs: string[],\n                 host: {[key: string]: string}, queries: {[key: string]: any},\n                 directiveType: Type): DirectiveMetadata {\n    var /** @type {?} */ mergedInputs = isPresent(dm.inputs) ? ListWrapper.concat(dm.inputs, inputs) : inputs;\n\n    var /** @type {?} */ mergedOutputs;\n    if (isPresent(dm.outputs)) {\n      dm.outputs.forEach((propName: string) => {\n        if (ListWrapper.contains(outputs, propName)) {\n          throw new BaseException(\n              `Output event '${propName}' defined multiple times in '${stringify(directiveType)}'`);\n        }\n      });\n      mergedOutputs = ListWrapper.concat(dm.outputs, outputs);\n    } else {\n      mergedOutputs = outputs;\n    }\n\n    var /** @type {?} */ mergedHost = isPresent(dm.host) ? StringMapWrapper.merge(dm.host, host) : host;\n    var /** @type {?} */ mergedQueries =\n        isPresent(dm.queries) ? StringMapWrapper.merge(dm.queries, queries) : queries;\n\n    if (dm instanceof ComponentMetadata) {\n      return new ComponentMetadata({\n        selector: dm.selector,\n        inputs: mergedInputs,\n        outputs: mergedOutputs,\n        host: mergedHost,\n        exportAs: dm.exportAs,\n        moduleId: dm.moduleId,\n        queries: mergedQueries,\n        changeDetection: dm.changeDetection,\n        providers: dm.providers,\n        viewProviders: dm.viewProviders\n      });\n\n    } else {\n      return new DirectiveMetadata({\n        selector: dm.selector,\n        inputs: mergedInputs,\n        outputs: mergedOutputs,\n        host: mergedHost,\n        exportAs: dm.exportAs,\n        queries: mergedQueries,\n        providers: dm.providers\n      });\n    }\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nDirectiveResolver.prototype._reflector;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */ static ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: ReflectorReader, },\n];\n}\n\nexport var /** @type {?} */ CODEGEN_DIRECTIVE_RESOLVER = new DirectiveResolver(reflector);\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}