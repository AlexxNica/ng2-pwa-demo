{"version":3,"file":"expression_converter.js","sourceRoot":"","sources":["../../../../../../modules/@angular/compiler/src/view_compiler/expression_converter.ts"],"names":[],"mappings":"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","sourcesContent":["import {BaseException} from '../../src/facade/exceptions';\nimport {isBlank, isPresent, isArray} from '../../src/facade/lang';\n\nimport * as cdAst from '../expression_parser/ast';\nimport * as o from '../output/output_ast';\nimport {Identifiers} from '../identifiers';\n\nvar /** @type {?} */ IMPLICIT_RECEIVER = o.variable('#implicit');\n\nexport interface NameResolver {\n  callPipe(name: string, input: o.Expression, args: o.Expression[]): o.Expression;\n  getLocal(name: string): o.Expression;\n  createLiteralArray(values: o.Expression[]): o.Expression;\n  createLiteralMap(values: Array<Array<string | o.Expression>>): o.Expression;\n}\n\nexport class ExpressionWithWrappedValueInfo {\n/**\n * @param {?} expression\n * @param {?} needsValueUnwrapper\n */\nconstructor(public expression: o.Expression,\npublic needsValueUnwrapper: boolean) {}\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nExpressionWithWrappedValueInfo.prototype.expression;\n /** @type {?} */\nExpressionWithWrappedValueInfo.prototype.needsValueUnwrapper;\n  }\n\n}\n/**\n * @param {?} nameResolver\n * @param {?} implicitReceiver\n * @param {?} expression\n * @param {?} valueUnwrapper\n * @return {?}\n */\nexport function convertCdExpressionToIr(\n    nameResolver: NameResolver, implicitReceiver: o.Expression, expression: cdAst.AST,\n    valueUnwrapper: o.ReadVarExpr): ExpressionWithWrappedValueInfo {\n  var /** @type {?} */ visitor = new _AstToIrVisitor(nameResolver, implicitReceiver, valueUnwrapper);\n  var /** @type {?} */ irAst: o.Expression = expression.visit(visitor, _Mode.Expression);\n  return new ExpressionWithWrappedValueInfo(irAst, visitor.needsValueUnwrapper);\n}\n/**\n * @param {?} nameResolver\n * @param {?} implicitReceiver\n * @param {?} stmt\n * @return {?}\n */\nexport function convertCdStatementToIr(nameResolver: NameResolver, implicitReceiver: o.Expression,\n                                       stmt: cdAst.AST): o.Statement[] {\n  var /** @type {?} */ visitor = new _AstToIrVisitor(nameResolver, implicitReceiver, null);\n  var /** @type {?} */ statements = [];\n  flattenStatements(stmt.visit(visitor, _Mode.Statement), statements);\n  return statements;\n}\ntype _Mode = number;\nlet _Mode: any = {};\n_Mode.Statement = 0;\n_Mode.Expression = 1;\n_Mode[_Mode.Statement] = \"Statement\";\n_Mode[_Mode.Expression] = \"Expression\";\n\n/**\n * @param {?} mode\n * @param {?} ast\n * @return {?}\n */\nfunction ensureStatementMode(mode: _Mode, ast: cdAst.AST) {\n  if (mode !== _Mode.Statement) {\n    throw new BaseException(`Expected a statement, but saw ${ast}`);\n  }\n}\n/**\n * @param {?} mode\n * @param {?} ast\n * @return {?}\n */\nfunction ensureExpressionMode(mode: _Mode, ast: cdAst.AST) {\n  if (mode !== _Mode.Expression) {\n    throw new BaseException(`Expected an expression, but saw ${ast}`);\n  }\n}\n/**\n * @param {?} mode\n * @param {?} expr\n * @return {?}\n */\nfunction convertToStatementIfNeeded(mode: _Mode, expr: o.Expression): o.Expression | o.Statement {\n  if (mode === _Mode.Statement) {\n    return expr.toStmt();\n  } else {\n    return expr;\n  }\n}\n\nclass _AstToIrVisitor implements cdAst.AstVisitor {\npublic needsValueUnwrapper: boolean = false;\n/**\n * @param {?} _nameResolver\n * @param {?} _implicitReceiver\n * @param {?} _valueUnwrapper\n */\nconstructor(private _nameResolver: NameResolver,\nprivate _implicitReceiver: o.Expression,\nprivate _valueUnwrapper: o.ReadVarExpr) {}\n/**\n * @param {?} ast\n * @param {?} mode\n * @return {?}\n */\nvisitBinary(ast: cdAst.Binary, mode: _Mode): any {\n    var /** @type {?} */ op;\n    switch (ast.operation) {\n      case '+':\n        op = o.BinaryOperator.Plus;\n        break;\n      case '-':\n        op = o.BinaryOperator.Minus;\n        break;\n      case '*':\n        op = o.BinaryOperator.Multiply;\n        break;\n      case '/':\n        op = o.BinaryOperator.Divide;\n        break;\n      case '%':\n        op = o.BinaryOperator.Modulo;\n        break;\n      case '&&':\n        op = o.BinaryOperator.And;\n        break;\n      case '||':\n        op = o.BinaryOperator.Or;\n        break;\n      case '==':\n        op = o.BinaryOperator.Equals;\n        break;\n      case '!=':\n        op = o.BinaryOperator.NotEquals;\n        break;\n      case '===':\n        op = o.BinaryOperator.Identical;\n        break;\n      case '!==':\n        op = o.BinaryOperator.NotIdentical;\n        break;\n      case '<':\n        op = o.BinaryOperator.Lower;\n        break;\n      case '>':\n        op = o.BinaryOperator.Bigger;\n        break;\n      case '<=':\n        op = o.BinaryOperator.LowerEquals;\n        break;\n      case '>=':\n        op = o.BinaryOperator.BiggerEquals;\n        break;\n      default:\n        throw new BaseException(`Unsupported operation ${ast.operation}`);\n    }\n\n    return convertToStatementIfNeeded(\n        mode, new o.BinaryOperatorExpr(op, ast.left.visit(this, _Mode.Expression),\n                                       ast.right.visit(this, _Mode.Expression)));\n  }\n/**\n * @param {?} ast\n * @param {?} mode\n * @return {?}\n */\nvisitChain(ast: cdAst.Chain, mode: _Mode): any {\n    ensureStatementMode(mode, ast);\n    return this.visitAll(ast.expressions, mode);\n  }\n/**\n * @param {?} ast\n * @param {?} mode\n * @return {?}\n */\nvisitConditional(ast: cdAst.Conditional, mode: _Mode): any {\n    var /** @type {?} */ value: o.Expression = ast.condition.visit(this, _Mode.Expression);\n    return convertToStatementIfNeeded(\n        mode, value.conditional(ast.trueExp.visit(this, _Mode.Expression),\n                                ast.falseExp.visit(this, _Mode.Expression)));\n  }\n/**\n * @param {?} ast\n * @param {?} mode\n * @return {?}\n */\nvisitPipe(ast: cdAst.BindingPipe, mode: _Mode): any {\n    var /** @type {?} */ input = ast.exp.visit(this, _Mode.Expression);\n    var /** @type {?} */ args = this.visitAll(ast.args, _Mode.Expression);\n    var /** @type {?} */ value = this._nameResolver.callPipe(ast.name, input, args);\n    this.needsValueUnwrapper = true;\n    return convertToStatementIfNeeded(mode, this._valueUnwrapper.callMethod('unwrap', [value]));\n  }\n/**\n * @param {?} ast\n * @param {?} mode\n * @return {?}\n */\nvisitFunctionCall(ast: cdAst.FunctionCall, mode: _Mode): any {\n    return convertToStatementIfNeeded(mode, ast.target.visit(this, _Mode.Expression)\n                                                .callFn(this.visitAll(ast.args, _Mode.Expression)));\n  }\n/**\n * @param {?} ast\n * @param {?} mode\n * @return {?}\n */\nvisitImplicitReceiver(ast: cdAst.ImplicitReceiver, mode: _Mode): any {\n    ensureExpressionMode(mode, ast);\n    return IMPLICIT_RECEIVER;\n  }\n/**\n * @param {?} ast\n * @param {?} mode\n * @return {?}\n */\nvisitInterpolation(ast: cdAst.Interpolation, mode: _Mode): any {\n    ensureExpressionMode(mode, ast);\n    var /** @type {?} */ args = [o.literal(ast.expressions.length)];\n    for (var /** @type {?} */ i = 0; i < ast.strings.length - 1; i++) {\n      args.push(o.literal(ast.strings[i]));\n      args.push(ast.expressions[i].visit(this, _Mode.Expression));\n    }\n    args.push(o.literal(ast.strings[ast.strings.length - 1]));\n    return o.importExpr(Identifiers.interpolate).callFn(args);\n  }\n/**\n * @param {?} ast\n * @param {?} mode\n * @return {?}\n */\nvisitKeyedRead(ast: cdAst.KeyedRead, mode: _Mode): any {\n    return convertToStatementIfNeeded(\n        mode, ast.obj.visit(this, _Mode.Expression).key(ast.key.visit(this, _Mode.Expression)));\n  }\n/**\n * @param {?} ast\n * @param {?} mode\n * @return {?}\n */\nvisitKeyedWrite(ast: cdAst.KeyedWrite, mode: _Mode): any {\n    var /** @type {?} */ obj: o.Expression = ast.obj.visit(this, _Mode.Expression);\n    var /** @type {?} */ key: o.Expression = ast.key.visit(this, _Mode.Expression);\n    var /** @type {?} */ value: o.Expression = ast.value.visit(this, _Mode.Expression);\n    return convertToStatementIfNeeded(mode, obj.key(key).set(value));\n  }\n/**\n * @param {?} ast\n * @param {?} mode\n * @return {?}\n */\nvisitLiteralArray(ast: cdAst.LiteralArray, mode: _Mode): any {\n    return convertToStatementIfNeeded(\n        mode, this._nameResolver.createLiteralArray(this.visitAll(ast.expressions, mode)));\n  }\n/**\n * @param {?} ast\n * @param {?} mode\n * @return {?}\n */\nvisitLiteralMap(ast: cdAst.LiteralMap, mode: _Mode): any {\n    var /** @type {?} */ parts = [];\n    for (var /** @type {?} */ i = 0; i < ast.keys.length; i++) {\n      parts.push([ast.keys[i], ast.values[i].visit(this, _Mode.Expression)]);\n    }\n    return convertToStatementIfNeeded(mode, this._nameResolver.createLiteralMap(parts));\n  }\n/**\n * @param {?} ast\n * @param {?} mode\n * @return {?}\n */\nvisitLiteralPrimitive(ast: cdAst.LiteralPrimitive, mode: _Mode): any {\n    return convertToStatementIfNeeded(mode, o.literal(ast.value));\n  }\n/**\n * @param {?} ast\n * @param {?} mode\n * @return {?}\n */\nvisitMethodCall(ast: cdAst.MethodCall, mode: _Mode): any {\n    var /** @type {?} */ args = this.visitAll(ast.args, _Mode.Expression);\n    var /** @type {?} */ result = null;\n    var /** @type {?} */ receiver = ast.receiver.visit(this, _Mode.Expression);\n    if (receiver === IMPLICIT_RECEIVER) {\n      var /** @type {?} */ varExpr = this._nameResolver.getLocal(ast.name);\n      if (isPresent(varExpr)) {\n        result = varExpr.callFn(args);\n      } else {\n        receiver = this._implicitReceiver;\n      }\n    }\n    if (isBlank(result)) {\n      result = receiver.callMethod(ast.name, args);\n    }\n    return convertToStatementIfNeeded(mode, result);\n  }\n/**\n * @param {?} ast\n * @param {?} mode\n * @return {?}\n */\nvisitPrefixNot(ast: cdAst.PrefixNot, mode: _Mode): any {\n    return convertToStatementIfNeeded(mode, o.not(ast.expression.visit(this, _Mode.Expression)));\n  }\n/**\n * @param {?} ast\n * @param {?} mode\n * @return {?}\n */\nvisitPropertyRead(ast: cdAst.PropertyRead, mode: _Mode): any {\n    var /** @type {?} */ result = null;\n    var /** @type {?} */ receiver = ast.receiver.visit(this, _Mode.Expression);\n    if (receiver === IMPLICIT_RECEIVER) {\n      result = this._nameResolver.getLocal(ast.name);\n      if (isBlank(result)) {\n        receiver = this._implicitReceiver;\n      }\n    }\n    if (isBlank(result)) {\n      result = receiver.prop(ast.name);\n    }\n    return convertToStatementIfNeeded(mode, result);\n  }\n/**\n * @param {?} ast\n * @param {?} mode\n * @return {?}\n */\nvisitPropertyWrite(ast: cdAst.PropertyWrite, mode: _Mode): any {\n    var /** @type {?} */ receiver: o.Expression = ast.receiver.visit(this, _Mode.Expression);\n    if (receiver === IMPLICIT_RECEIVER) {\n      var /** @type {?} */ varExpr = this._nameResolver.getLocal(ast.name);\n      if (isPresent(varExpr)) {\n        throw new BaseException('Cannot assign to a reference or variable!');\n      }\n      receiver = this._implicitReceiver;\n    }\n    return convertToStatementIfNeeded(\n        mode, receiver.prop(ast.name).set(ast.value.visit(this, _Mode.Expression)));\n  }\n/**\n * @param {?} ast\n * @param {?} mode\n * @return {?}\n */\nvisitSafePropertyRead(ast: cdAst.SafePropertyRead, mode: _Mode): any {\n    var /** @type {?} */ receiver = ast.receiver.visit(this, _Mode.Expression);\n    return convertToStatementIfNeeded(\n        mode, receiver.isBlank().conditional(o.NULL_EXPR, receiver.prop(ast.name)));\n  }\n/**\n * @param {?} ast\n * @param {?} mode\n * @return {?}\n */\nvisitSafeMethodCall(ast: cdAst.SafeMethodCall, mode: _Mode): any {\n    var /** @type {?} */ receiver = ast.receiver.visit(this, _Mode.Expression);\n    var /** @type {?} */ args = this.visitAll(ast.args, _Mode.Expression);\n    return convertToStatementIfNeeded(\n        mode, receiver.isBlank().conditional(o.NULL_EXPR, receiver.callMethod(ast.name, args)));\n  }\n/**\n * @param {?} asts\n * @param {?} mode\n * @return {?}\n */\nvisitAll(asts: cdAst.AST[], mode: _Mode): any { return asts.map(ast => ast.visit(this, mode)); }\n/**\n * @param {?} ast\n * @param {?} mode\n * @return {?}\n */\nvisitQuote(ast: cdAst.Quote, mode: _Mode): any {\n    throw new BaseException('Quotes are not supported for evaluation!');\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\n_AstToIrVisitor.prototype.needsValueUnwrapper;\n /** @type {?} */\n_AstToIrVisitor.prototype._nameResolver;\n /** @type {?} */\n_AstToIrVisitor.prototype._implicitReceiver;\n /** @type {?} */\n_AstToIrVisitor.prototype._valueUnwrapper;\n  }\n\n}\n/**\n * @param {?} arg\n * @param {?} output\n * @return {?}\n */\nfunction flattenStatements(arg: any, output: o.Statement[]) {\n  if (isArray(arg)) {\n    ( /** @type {?} */((<any[]>arg))).forEach((entry) => flattenStatements(entry, output));\n  } else {\n    output.push(arg);\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}