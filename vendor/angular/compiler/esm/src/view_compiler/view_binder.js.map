{"version":3,"file":"view_binder.js","sourceRoot":"","sources":["../../../../../../modules/@angular/compiler/src/view_compiler/view_binder.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ListWrapper,\n} from '../../src/facade/collection';\nimport {\n  TemplateAst,\n  TemplateAstVisitor,\n  NgContentAst,\n  EmbeddedTemplateAst,\n  ElementAst,\n  ReferenceAst,\n  VariableAst,\n  BoundEventAst,\n  BoundElementPropertyAst,\n  AttrAst,\n  BoundTextAst,\n  TextAst,\n  DirectiveAst,\n  BoundDirectivePropertyAst,\n  templateVisitAll,\n} from '../template_ast';\nimport {\n  bindRenderText,\n  bindRenderInputs,\n  bindDirectiveInputs,\n  bindDirectiveHostProps\n} from './property_binder';\nimport {bindRenderOutputs, collectEventListeners, bindDirectiveOutputs} from './event_binder';\nimport {\n  bindDirectiveAfterContentLifecycleCallbacks,\n  bindDirectiveAfterViewLifecycleCallbacks,\n  bindDirectiveDestroyLifecycleCallbacks,\n  bindPipeDestroyLifecycleCallbacks,\n  bindDirectiveDetectChangesLifecycleCallbacks\n} from './lifecycle_binder';\nimport {CompileView} from './compile_view';\nimport {CompileElement, CompileNode} from './compile_element';\n/**\n * @param {?} view\n * @param {?} parsedTemplate\n * @return {?}\n */\nexport function bindView(view: CompileView, parsedTemplate: TemplateAst[]): void {\n  var /** @type {?} */ visitor = new ViewBinderVisitor(view);\n  templateVisitAll(visitor, parsedTemplate);\n  view.pipes.forEach(\n      (pipe) => { bindPipeDestroyLifecycleCallbacks(pipe.meta, pipe.instance, pipe.view); });\n}\n\nclass ViewBinderVisitor implements TemplateAstVisitor {\nprivate _nodeIndex: number = 0;\n/**\n * @param {?} view\n */\nconstructor(public view: CompileView) {}\n/**\n * @param {?} ast\n * @param {?} parent\n * @return {?}\n */\nvisitBoundText(ast: BoundTextAst, parent: CompileElement): any {\n    var /** @type {?} */ node = this.view.nodes[this._nodeIndex++];\n    bindRenderText(ast, node, this.view);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} parent\n * @return {?}\n */\nvisitText(ast: TextAst, parent: CompileElement): any {\n    this._nodeIndex++;\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} parent\n * @return {?}\n */\nvisitNgContent(ast: NgContentAst, parent: CompileElement): any { return null; }\n/**\n * @param {?} ast\n * @param {?} parent\n * @return {?}\n */\nvisitElement(ast: ElementAst, parent: CompileElement): any {\n    var /** @type {?} */ compileElement = /** @type {?} */(( <CompileElement>this.view.nodes[this._nodeIndex++]));\n    var /** @type {?} */ eventListeners = collectEventListeners(ast.outputs, ast.directives, compileElement);\n    bindRenderInputs(ast.inputs, compileElement);\n    bindRenderOutputs(eventListeners);\n    ListWrapper.forEachWithIndex(ast.directives, (directiveAst, index) => {\n      var /** @type {?} */ directiveInstance = compileElement.directiveInstances[index];\n      bindDirectiveInputs(directiveAst, directiveInstance, compileElement);\n      bindDirectiveDetectChangesLifecycleCallbacks(directiveAst, directiveInstance, compileElement);\n\n      bindDirectiveHostProps(directiveAst, directiveInstance, compileElement);\n      bindDirectiveOutputs(directiveAst, directiveInstance, eventListeners);\n    });\n    templateVisitAll(this, ast.children, compileElement);\n    // afterContent and afterView lifecycles need to be called bottom up\n    // so that children are notified before parents\n    ListWrapper.forEachWithIndex(ast.directives, (directiveAst, index) => {\n      var /** @type {?} */ directiveInstance = compileElement.directiveInstances[index];\n      bindDirectiveAfterContentLifecycleCallbacks(directiveAst.directive, directiveInstance,\n                                                  compileElement);\n      bindDirectiveAfterViewLifecycleCallbacks(directiveAst.directive, directiveInstance,\n                                               compileElement);\n      bindDirectiveDestroyLifecycleCallbacks(directiveAst.directive, directiveInstance,\n                                             compileElement);\n    });\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} parent\n * @return {?}\n */\nvisitEmbeddedTemplate(ast: EmbeddedTemplateAst, parent: CompileElement): any {\n    var /** @type {?} */ compileElement = /** @type {?} */(( <CompileElement>this.view.nodes[this._nodeIndex++]));\n    var /** @type {?} */ eventListeners = collectEventListeners(ast.outputs, ast.directives, compileElement);\n    ListWrapper.forEachWithIndex(ast.directives, (directiveAst, index) => {\n      var /** @type {?} */ directiveInstance = compileElement.directiveInstances[index];\n      bindDirectiveInputs(directiveAst, directiveInstance, compileElement);\n      bindDirectiveDetectChangesLifecycleCallbacks(directiveAst, directiveInstance, compileElement);\n      bindDirectiveOutputs(directiveAst, directiveInstance, eventListeners);\n      bindDirectiveAfterContentLifecycleCallbacks(directiveAst.directive, directiveInstance,\n                                                  compileElement);\n      bindDirectiveAfterViewLifecycleCallbacks(directiveAst.directive, directiveInstance,\n                                               compileElement);\n      bindDirectiveDestroyLifecycleCallbacks(directiveAst.directive, directiveInstance,\n                                             compileElement);\n    });\n    bindView(compileElement.embeddedView, ast.children);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitAttr(ast: AttrAst, ctx: any): any { return null; }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitDirective(ast: DirectiveAst, ctx: any): any { return null; }\n/**\n * @param {?} ast\n * @param {?} eventTargetAndNames\n * @return {?}\n */\nvisitEvent(ast: BoundEventAst, eventTargetAndNames: Map<string, BoundEventAst>): any {\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitReference(ast: ReferenceAst, ctx: any): any { return null; }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitVariable(ast: VariableAst, ctx: any): any { return null; }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitDirectiveProperty(ast: BoundDirectivePropertyAst, context: any): any { return null; }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitElementProperty(ast: BoundElementPropertyAst, context: any): any { return null; }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nViewBinderVisitor.prototype._nodeIndex;\n /** @type {?} */\nViewBinderVisitor.prototype.view;\n  }\n\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}