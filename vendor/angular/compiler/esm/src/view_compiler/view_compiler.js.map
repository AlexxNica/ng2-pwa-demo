{"version":3,"file":"view_compiler.js","sourceRoot":"","sources":["../../../../../../modules/@angular/compiler/src/view_compiler/view_compiler.ts"],"names":[],"mappings":";AAAA,uBAAyB,eAAe,CAAC,CAAA;AAEzC,kCAA6B,mBAAmB,CAAC,CAAA;AACjD,+BAA0B,gBAAgB,CAAC,CAAA;AAC3C,+BAA2D,gBAAgB,CAAC,CAAA;AAC5E,8BAAuB,eAAe,CAAC,CAAA;AAGvC,yBAA6B,WAAW,CAAC,CAAA;AAEzC;IACA;;;;OAIG;IACH,YAAmB,UAAyB,EACrC,cAAsB,EACtB,YAAqC;QAFzB,eAAU,GAAV,UAAU,CAAe;QACrC,mBAAc,GAAd,cAAc,CAAQ;QACtB,iBAAY,GAAZ,YAAY,CAAyB;IAAG,CAAC;IAE9C,OAAO,8BAA8B;QACtC,gBAAgB;QACjB,iBAAiB,CAAC,SAAS,CAAC,UAAU,CAAC;QACtC,gBAAgB;QACjB,iBAAiB,CAAC,SAAS,CAAC,cAAc,CAAC;QAC1C,gBAAgB;QACjB,iBAAiB,CAAC,SAAS,CAAC,YAAY,CAAC;IACvC,CAAC;AAEH,CAAC;AAnBY,yBAAiB,oBAmB7B,CAAA;AACD;IACA;;OAEG;IACH,YAAoB,UAA0B;QAA1B,eAAU,GAAV,UAAU,CAAgB;IAAG,CAAC;IAClD;;;;;;OAMG;IACH,gBAAgB,CAAC,SAAmC,EAAE,QAAuB,EAC1D,MAAoB,EAAE,KAA4B;QACjE,IAAI,gBAAgB,CAAC,UAAU,GAAG,EAAE,CAAC;QACrC,IAAI,gBAAgB,CAAC,YAAY,GAAG,EAAE,CAAC;QACvC,IAAI,gBAAgB,CAAC,IAAI,GAAG,IAAI,0BAAW,CAAC,SAAS,EAAE,IAAI,CAAC,UAAU,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,EAC7D,gCAAc,CAAC,UAAU,EAAE,EAAE,EAAE,CAAC,CAAC;QAC5D,wBAAS,CAAC,IAAI,EAAE,QAAQ,EAAE,YAAY,CAAC,CAAC;QACxC,gEAAgE;QAChE,iDAAiD;QACjD,sBAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QACzB,yBAAU,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;QAE7B,MAAM,CAAC,IAAI,iBAAiB,CAAC,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;IAChF,CAAC;IAED,OAAO,8BAA8B;QACtC,gBAAgB;QACjB,YAAY,CAAC,SAAS,CAAC,UAAU,CAAC;IAChC,CAAC;AAQH,CAAC;AANM,uBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,iBAAU,EAAE;CACnB,CAAC;AACF,kBAAkB,CAAQ,2BAAc,GAA2D;IACnG,EAAC,IAAI,EAAE,uBAAc,GAAG;CACvB,CAAC;AArCW,oBAAY,eAsCxB,CAAA","sourcesContent":["import {Injectable} from '@angular/core';\nimport * as o from '../output/output_ast';\nimport {CompileElement} from './compile_element';\nimport {CompileView} from './compile_view';\nimport {buildView, finishView, ViewCompileDependency} from './view_builder';\nimport {bindView} from './view_binder';\nimport {CompileDirectiveMetadata, CompilePipeMetadata} from '../compile_metadata';\nimport {TemplateAst} from '../template_ast';\nimport {CompilerConfig} from '../config';\n\nexport class ViewCompileResult {\n/**\n * @param {?} statements\n * @param {?} viewFactoryVar\n * @param {?} dependencies\n */\nconstructor(public statements: o.Statement[],\npublic viewFactoryVar: string,\npublic dependencies: ViewCompileDependency[]) {}\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nViewCompileResult.prototype.statements;\n /** @type {?} */\nViewCompileResult.prototype.viewFactoryVar;\n /** @type {?} */\nViewCompileResult.prototype.dependencies;\n  }\n\n}\nexport class ViewCompiler {\n/**\n * @param {?} _genConfig\n */\nconstructor(private _genConfig: CompilerConfig) {}\n/**\n * @param {?} component\n * @param {?} template\n * @param {?} styles\n * @param {?} pipes\n * @return {?}\n */\ncompileComponent(component: CompileDirectiveMetadata, template: TemplateAst[],\n                   styles: o.Expression, pipes: CompilePipeMetadata[]): ViewCompileResult {\n    var /** @type {?} */ statements = [];\n    var /** @type {?} */ dependencies = [];\n    var /** @type {?} */ view = new CompileView(component, this._genConfig, pipes, styles, 0,\n                               CompileElement.createNull(), []);\n    buildView(view, template, dependencies);\n    // Need to separate binding from creation to be able to refer to\n    // variables that have been declared after usage.\n    bindView(view, template);\n    finishView(view, statements);\n\n    return new ViewCompileResult(statements, view.viewFactory.name, dependencies);\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nViewCompiler.prototype._genConfig;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */ static ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: CompilerConfig, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}