{"version":3,"file":"output_ast.js","sourceRoot":"","sources":["../../../../../../modules/@angular/compiler/src/output/output_ast.ts"],"names":[],"mappings":"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","sourcesContent":["import {isString, isPresent, isBlank} from '../../src/facade/lang';\nimport {CompileIdentifierMetadata} from '../compile_metadata';\nexport type TypeModifier = number;\nexport let TypeModifier: any = {};\nTypeModifier.Const = 0;\nTypeModifier[TypeModifier.Const] = \"Const\";\n\n\nexport abstract class Type {\n/**\n * @param {?=} modifiers\n */\nconstructor(public modifiers: TypeModifier[] = null) {\n    if (isBlank(modifiers)) {\n      this.modifiers = [];\n    }\n  }\n  abstract visitType(visitor: TypeVisitor, context: any): any;\n/**\n * @param {?} modifier\n * @return {?}\n */\nhasModifier(modifier: TypeModifier): boolean { return this.modifiers.indexOf(modifier) !== -1; }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nType.prototype.modifiers;\n  }\n\n}\nexport type BuiltinTypeName = number;\nexport let BuiltinTypeName: any = {};\nBuiltinTypeName.Dynamic = 0;\nBuiltinTypeName.Bool = 1;\nBuiltinTypeName.String = 2;\nBuiltinTypeName.Int = 3;\nBuiltinTypeName.Number = 4;\nBuiltinTypeName.Function = 5;\nBuiltinTypeName[BuiltinTypeName.Dynamic] = \"Dynamic\";\nBuiltinTypeName[BuiltinTypeName.Bool] = \"Bool\";\nBuiltinTypeName[BuiltinTypeName.String] = \"String\";\nBuiltinTypeName[BuiltinTypeName.Int] = \"Int\";\nBuiltinTypeName[BuiltinTypeName.Number] = \"Number\";\nBuiltinTypeName[BuiltinTypeName.Function] = \"Function\";\n\n\nexport class BuiltinType extends Type {\n/**\n * @param {?} name\n * @param {?=} modifiers\n */\nconstructor(public name: BuiltinTypeName, modifiers: TypeModifier[] = null) { super(modifiers); }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitType(visitor: TypeVisitor, context: any): any {\n    return visitor.visitBuiltintType(this, context);\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nBuiltinType.prototype.name;\n  }\n\n}\n\nexport class ExternalType extends Type {\n/**\n * @param {?} value\n * @param {?=} typeParams\n * @param {?=} modifiers\n */\nconstructor(public value: CompileIdentifierMetadata,\npublic typeParams: Type[] = null,\n              modifiers: TypeModifier[] = null) {\n    super(modifiers);\n  }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitType(visitor: TypeVisitor, context: any): any {\n    return visitor.visitExternalType(this, context);\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nExternalType.prototype.value;\n /** @type {?} */\nExternalType.prototype.typeParams;\n  }\n\n}\n\n\nexport class ArrayType extends Type {\n/**\n * @param {?} of\n * @param {?=} modifiers\n */\nconstructor(public of: Type, modifiers: TypeModifier[] = null) { super(modifiers); }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitType(visitor: TypeVisitor, context: any): any {\n    return visitor.visitArrayType(this, context);\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nArrayType.prototype.of;\n  }\n\n}\n\n\nexport class MapType extends Type {\n/**\n * @param {?} valueType\n * @param {?=} modifiers\n */\nconstructor(public valueType: Type, modifiers: TypeModifier[] = null) { super(modifiers); }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitType(visitor: TypeVisitor, context: any): any { return visitor.visitMapType(this, context); }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nMapType.prototype.valueType;\n  }\n\n}\n\nexport var /** @type {?} */ DYNAMIC_TYPE = new BuiltinType(BuiltinTypeName.Dynamic);\nexport var /** @type {?} */ BOOL_TYPE = new BuiltinType(BuiltinTypeName.Bool);\nexport var /** @type {?} */ INT_TYPE = new BuiltinType(BuiltinTypeName.Int);\nexport var /** @type {?} */ NUMBER_TYPE = new BuiltinType(BuiltinTypeName.Number);\nexport var /** @type {?} */ STRING_TYPE = new BuiltinType(BuiltinTypeName.String);\nexport var /** @type {?} */ FUNCTION_TYPE = new BuiltinType(BuiltinTypeName.Function);\n\n\nexport interface TypeVisitor {\n  visitBuiltintType(type: BuiltinType, context: any): any;\n  visitExternalType(type: ExternalType, context: any): any;\n  visitArrayType(type: ArrayType, context: any): any;\n  visitMapType(type: MapType, context: any): any;\n}\nexport type BinaryOperator = number;\nexport let BinaryOperator: any = {};\nBinaryOperator.Equals = 0;\nBinaryOperator.NotEquals = 1;\nBinaryOperator.Identical = 2;\nBinaryOperator.NotIdentical = 3;\nBinaryOperator.Minus = 4;\nBinaryOperator.Plus = 5;\nBinaryOperator.Divide = 6;\nBinaryOperator.Multiply = 7;\nBinaryOperator.Modulo = 8;\nBinaryOperator.And = 9;\nBinaryOperator.Or = 10;\nBinaryOperator.Lower = 11;\nBinaryOperator.LowerEquals = 12;\nBinaryOperator.Bigger = 13;\nBinaryOperator.BiggerEquals = 14;\nBinaryOperator[BinaryOperator.Equals] = \"Equals\";\nBinaryOperator[BinaryOperator.NotEquals] = \"NotEquals\";\nBinaryOperator[BinaryOperator.Identical] = \"Identical\";\nBinaryOperator[BinaryOperator.NotIdentical] = \"NotIdentical\";\nBinaryOperator[BinaryOperator.Minus] = \"Minus\";\nBinaryOperator[BinaryOperator.Plus] = \"Plus\";\nBinaryOperator[BinaryOperator.Divide] = \"Divide\";\nBinaryOperator[BinaryOperator.Multiply] = \"Multiply\";\nBinaryOperator[BinaryOperator.Modulo] = \"Modulo\";\nBinaryOperator[BinaryOperator.And] = \"And\";\nBinaryOperator[BinaryOperator.Or] = \"Or\";\nBinaryOperator[BinaryOperator.Lower] = \"Lower\";\nBinaryOperator[BinaryOperator.LowerEquals] = \"LowerEquals\";\nBinaryOperator[BinaryOperator.Bigger] = \"Bigger\";\nBinaryOperator[BinaryOperator.BiggerEquals] = \"BiggerEquals\";\n\n\n\nexport abstract class Expression {\n/**\n * @param {?} type\n */\nconstructor(public type: Type) {}\n\n  abstract visitExpression(visitor: ExpressionVisitor, context: any): any;\n/**\n * @param {?} name\n * @return {?}\n */\nprop(name: string): ReadPropExpr { return new ReadPropExpr(this, name); }\n/**\n * @param {?} index\n * @param {?=} type\n * @return {?}\n */\nkey(index: Expression, type: Type = null): ReadKeyExpr {\n    return new ReadKeyExpr(this, index, type);\n  }\n/**\n * @param {?} name\n * @param {?} params\n * @return {?}\n */\ncallMethod(name: string | BuiltinMethod, params: Expression[]): InvokeMethodExpr {\n    return new InvokeMethodExpr(this, name, params);\n  }\n/**\n * @param {?} params\n * @return {?}\n */\ncallFn(params: Expression[]): InvokeFunctionExpr { return new InvokeFunctionExpr(this, params); }\n/**\n * @param {?} params\n * @param {?=} type\n * @return {?}\n */\ninstantiate(params: Expression[], type: Type = null): InstantiateExpr {\n    return new InstantiateExpr(this, params, type);\n  }\n/**\n * @param {?} trueCase\n * @param {?=} falseCase\n * @return {?}\n */\nconditional(trueCase: Expression, falseCase: Expression = null): ConditionalExpr {\n    return new ConditionalExpr(this, trueCase, falseCase);\n  }\n/**\n * @param {?} rhs\n * @return {?}\n */\nequals(rhs: Expression): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.Equals, this, rhs);\n  }\n/**\n * @param {?} rhs\n * @return {?}\n */\nnotEquals(rhs: Expression): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.NotEquals, this, rhs);\n  }\n/**\n * @param {?} rhs\n * @return {?}\n */\nidentical(rhs: Expression): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.Identical, this, rhs);\n  }\n/**\n * @param {?} rhs\n * @return {?}\n */\nnotIdentical(rhs: Expression): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.NotIdentical, this, rhs);\n  }\n/**\n * @param {?} rhs\n * @return {?}\n */\nminus(rhs: Expression): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.Minus, this, rhs);\n  }\n/**\n * @param {?} rhs\n * @return {?}\n */\nplus(rhs: Expression): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.Plus, this, rhs);\n  }\n/**\n * @param {?} rhs\n * @return {?}\n */\ndivide(rhs: Expression): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.Divide, this, rhs);\n  }\n/**\n * @param {?} rhs\n * @return {?}\n */\nmultiply(rhs: Expression): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.Multiply, this, rhs);\n  }\n/**\n * @param {?} rhs\n * @return {?}\n */\nmodulo(rhs: Expression): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.Modulo, this, rhs);\n  }\n/**\n * @param {?} rhs\n * @return {?}\n */\nand(rhs: Expression): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.And, this, rhs);\n  }\n/**\n * @param {?} rhs\n * @return {?}\n */\nor(rhs: Expression): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.Or, this, rhs);\n  }\n/**\n * @param {?} rhs\n * @return {?}\n */\nlower(rhs: Expression): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.Lower, this, rhs);\n  }\n/**\n * @param {?} rhs\n * @return {?}\n */\nlowerEquals(rhs: Expression): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.LowerEquals, this, rhs);\n  }\n/**\n * @param {?} rhs\n * @return {?}\n */\nbigger(rhs: Expression): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.Bigger, this, rhs);\n  }\n/**\n * @param {?} rhs\n * @return {?}\n */\nbiggerEquals(rhs: Expression): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.BiggerEquals, this, rhs);\n  }\n/**\n * @return {?}\n */\nisBlank(): Expression {\n    // Note: We use equals by purpose here to compare to null and undefined in JS.\n    return this.equals(NULL_EXPR);\n  }\n/**\n * @param {?} type\n * @return {?}\n */\ncast(type: Type): Expression { return new CastExpr(this, type); }\n/**\n * @return {?}\n */\ntoStmt(): Statement { return new ExpressionStatement(this); }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nExpression.prototype.type;\n  }\n\n}\nexport type BuiltinVar = number;\nexport let BuiltinVar: any = {};\nBuiltinVar.This = 0;\nBuiltinVar.Super = 1;\nBuiltinVar.CatchError = 2;\nBuiltinVar.CatchStack = 3;\nBuiltinVar[BuiltinVar.This] = \"This\";\nBuiltinVar[BuiltinVar.Super] = \"Super\";\nBuiltinVar[BuiltinVar.CatchError] = \"CatchError\";\nBuiltinVar[BuiltinVar.CatchStack] = \"CatchStack\";\n\n\nexport class ReadVarExpr extends Expression {\npublic name;\npublic builtin: BuiltinVar;\n/**\n * @param {?} name\n * @param {?=} type\n */\nconstructor(name: string | BuiltinVar, type: Type = null) {\n    super(type);\n    if (isString(name)) {\n      this.name = <string>name;\n      this.builtin = null;\n    } else {\n      this.name = null;\n      this.builtin = <BuiltinVar>name;\n    }\n  }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitReadVarExpr(this, context);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset(value: Expression): WriteVarExpr { return new WriteVarExpr(this.name, value); }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nReadVarExpr.prototype.name;\n /** @type {?} */\nReadVarExpr.prototype.builtin;\n  }\n\n}\n\n\nexport class WriteVarExpr extends Expression {\npublic value: Expression;\n/**\n * @param {?} name\n * @param {?} value\n * @param {?=} type\n */\nconstructor(public name: string, value: Expression, type: Type = null) {\n    super(isPresent(type) ? type : value.type);\n    this.value = value;\n  }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitWriteVarExpr(this, context);\n  }\n/**\n * @param {?=} type\n * @param {?=} modifiers\n * @return {?}\n */\ntoDeclStmt(type: Type = null, modifiers: StmtModifier[] = null): DeclareVarStmt {\n    return new DeclareVarStmt(this.name, this.value, type, modifiers);\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nWriteVarExpr.prototype.value;\n /** @type {?} */\nWriteVarExpr.prototype.name;\n  }\n\n}\n\n\nexport class WriteKeyExpr extends Expression {\npublic value: Expression;\n/**\n * @param {?} receiver\n * @param {?} index\n * @param {?} value\n * @param {?=} type\n */\nconstructor(public receiver: Expression,\npublic index: Expression, value: Expression,\n              type: Type = null) {\n    super(isPresent(type) ? type : value.type);\n    this.value = value;\n  }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitWriteKeyExpr(this, context);\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nWriteKeyExpr.prototype.value;\n /** @type {?} */\nWriteKeyExpr.prototype.receiver;\n /** @type {?} */\nWriteKeyExpr.prototype.index;\n  }\n\n}\n\n\nexport class WritePropExpr extends Expression {\npublic value: Expression;\n/**\n * @param {?} receiver\n * @param {?} name\n * @param {?} value\n * @param {?=} type\n */\nconstructor(public receiver: Expression,\npublic name: string, value: Expression,\n              type: Type = null) {\n    super(isPresent(type) ? type : value.type);\n    this.value = value;\n  }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitWritePropExpr(this, context);\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nWritePropExpr.prototype.value;\n /** @type {?} */\nWritePropExpr.prototype.receiver;\n /** @type {?} */\nWritePropExpr.prototype.name;\n  }\n\n}\nexport type BuiltinMethod = number;\nexport let BuiltinMethod: any = {};\nBuiltinMethod.ConcatArray = 0;\nBuiltinMethod.SubscribeObservable = 1;\nBuiltinMethod.bind = 2;\nBuiltinMethod[BuiltinMethod.ConcatArray] = \"ConcatArray\";\nBuiltinMethod[BuiltinMethod.SubscribeObservable] = \"SubscribeObservable\";\nBuiltinMethod[BuiltinMethod.bind] = \"bind\";\n\n\nexport class InvokeMethodExpr extends Expression {\npublic name: string;\npublic builtin: BuiltinMethod;\n/**\n * @param {?} receiver\n * @param {?} method\n * @param {?} args\n * @param {?=} type\n */\nconstructor(public receiver: Expression, method: string | BuiltinMethod,\npublic args: Expression[], type: Type = null) {\n    super(type);\n    if (isString(method)) {\n      this.name = <string>method;\n      this.builtin = null;\n    } else {\n      this.name = null;\n      this.builtin = <BuiltinMethod>method;\n    }\n  }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitInvokeMethodExpr(this, context);\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nInvokeMethodExpr.prototype.name;\n /** @type {?} */\nInvokeMethodExpr.prototype.builtin;\n /** @type {?} */\nInvokeMethodExpr.prototype.receiver;\n /** @type {?} */\nInvokeMethodExpr.prototype.args;\n  }\n\n}\n\n\nexport class InvokeFunctionExpr extends Expression {\n/**\n * @param {?} fn\n * @param {?} args\n * @param {?=} type\n */\nconstructor(public fn: Expression,\npublic args: Expression[], type: Type = null) { super(type); }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitInvokeFunctionExpr(this, context);\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nInvokeFunctionExpr.prototype.fn;\n /** @type {?} */\nInvokeFunctionExpr.prototype.args;\n  }\n\n}\n\n\nexport class InstantiateExpr extends Expression {\n/**\n * @param {?} classExpr\n * @param {?} args\n * @param {?=} type\n */\nconstructor(public classExpr: Expression,\npublic args: Expression[], type?: Type) { super(type); }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitInstantiateExpr(this, context);\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nInstantiateExpr.prototype.classExpr;\n /** @type {?} */\nInstantiateExpr.prototype.args;\n  }\n\n}\n\n\nexport class LiteralExpr extends Expression {\n/**\n * @param {?} value\n * @param {?=} type\n */\nconstructor(public value: any, type: Type = null) { super(type); }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitLiteralExpr(this, context);\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nLiteralExpr.prototype.value;\n  }\n\n}\n\n\nexport class ExternalExpr extends Expression {\n/**\n * @param {?} value\n * @param {?=} type\n * @param {?=} typeParams\n */\nconstructor(public value: CompileIdentifierMetadata, type: Type = null,\npublic typeParams: Type[] = null) {\n    super(type);\n  }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitExternalExpr(this, context);\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nExternalExpr.prototype.value;\n /** @type {?} */\nExternalExpr.prototype.typeParams;\n  }\n\n}\n\n\nexport class ConditionalExpr extends Expression {\npublic trueCase: Expression;\n/**\n * @param {?} condition\n * @param {?} trueCase\n * @param {?=} falseCase\n * @param {?=} type\n */\nconstructor(public condition: Expression, trueCase: Expression,\npublic falseCase: Expression = null, type: Type = null) {\n    super(isPresent(type) ? type : trueCase.type);\n    this.trueCase = trueCase;\n  }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitConditionalExpr(this, context);\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nConditionalExpr.prototype.trueCase;\n /** @type {?} */\nConditionalExpr.prototype.condition;\n /** @type {?} */\nConditionalExpr.prototype.falseCase;\n  }\n\n}\n\n\nexport class NotExpr extends Expression {\n/**\n * @param {?} condition\n */\nconstructor(public condition: Expression) { super(BOOL_TYPE); }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitNotExpr(this, context);\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nNotExpr.prototype.condition;\n  }\n\n}\n\nexport class CastExpr extends Expression {\n/**\n * @param {?} value\n * @param {?} type\n */\nconstructor(public value: Expression, type: Type) { super(type); }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitCastExpr(this, context);\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nCastExpr.prototype.value;\n  }\n\n}\n\n\nexport class FnParam {\n/**\n * @param {?} name\n * @param {?=} type\n */\nconstructor(public name: string,\npublic type: Type = null) {}\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nFnParam.prototype.name;\n /** @type {?} */\nFnParam.prototype.type;\n  }\n\n}\n\n\nexport class FunctionExpr extends Expression {\n/**\n * @param {?} params\n * @param {?} statements\n * @param {?=} type\n */\nconstructor(public params: FnParam[],\npublic statements: Statement[], type: Type = null) {\n    super(type);\n  }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitFunctionExpr(this, context);\n  }\n/**\n * @param {?} name\n * @param {?=} modifiers\n * @return {?}\n */\ntoDeclStmt(name: string, modifiers: StmtModifier[] = null): DeclareFunctionStmt {\n    return new DeclareFunctionStmt(name, this.params, this.statements, this.type, modifiers);\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nFunctionExpr.prototype.params;\n /** @type {?} */\nFunctionExpr.prototype.statements;\n  }\n\n}\n\n\nexport class BinaryOperatorExpr extends Expression {\npublic lhs: Expression;\n/**\n * @param {?} operator\n * @param {?} lhs\n * @param {?} rhs\n * @param {?=} type\n */\nconstructor(public operator: BinaryOperator, lhs: Expression,\npublic rhs: Expression,\n              type: Type = null) {\n    super(isPresent(type) ? type : lhs.type);\n    this.lhs = lhs;\n  }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitBinaryOperatorExpr(this, context);\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nBinaryOperatorExpr.prototype.lhs;\n /** @type {?} */\nBinaryOperatorExpr.prototype.operator;\n /** @type {?} */\nBinaryOperatorExpr.prototype.rhs;\n  }\n\n}\n\n\nexport class ReadPropExpr extends Expression {\n/**\n * @param {?} receiver\n * @param {?} name\n * @param {?=} type\n */\nconstructor(public receiver: Expression,\npublic name: string, type: Type = null) { super(type); }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitReadPropExpr(this, context);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset(value: Expression): WritePropExpr {\n    return new WritePropExpr(this.receiver, this.name, value);\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nReadPropExpr.prototype.receiver;\n /** @type {?} */\nReadPropExpr.prototype.name;\n  }\n\n}\n\n\nexport class ReadKeyExpr extends Expression {\n/**\n * @param {?} receiver\n * @param {?} index\n * @param {?=} type\n */\nconstructor(public receiver: Expression,\npublic index: Expression, type: Type = null) {\n    super(type);\n  }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitReadKeyExpr(this, context);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset(value: Expression): WriteKeyExpr {\n    return new WriteKeyExpr(this.receiver, this.index, value);\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nReadKeyExpr.prototype.receiver;\n /** @type {?} */\nReadKeyExpr.prototype.index;\n  }\n\n}\n\n\nexport class LiteralArrayExpr extends Expression {\npublic entries: Expression[];\n/**\n * @param {?} entries\n * @param {?=} type\n */\nconstructor(entries: Expression[], type: Type = null) {\n    super(type);\n    this.entries = entries;\n  }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitLiteralArrayExpr(this, context);\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nLiteralArrayExpr.prototype.entries;\n  }\n\n}\n\n\nexport class LiteralMapExpr extends Expression {\npublic valueType: Type = null;\n/**\n * @param {?} entries\n * @param {?=} type\n */\nconstructor(public entries: Array<Array<string | Expression>>, type: MapType = null) {\n    super(type);\n    if (isPresent(type)) {\n      this.valueType = type.valueType;\n    }\n  }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitLiteralMapExpr(this, context);\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nLiteralMapExpr.prototype.valueType;\n /** @type {?} */\nLiteralMapExpr.prototype.entries;\n  }\n\n}\n\nexport interface ExpressionVisitor {\n  visitReadVarExpr(ast: ReadVarExpr, context: any): any;\n  visitWriteVarExpr(expr: WriteVarExpr, context: any): any;\n  visitWriteKeyExpr(expr: WriteKeyExpr, context: any): any;\n  visitWritePropExpr(expr: WritePropExpr, context: any): any;\n  visitInvokeMethodExpr(ast: InvokeMethodExpr, context: any): any;\n  visitInvokeFunctionExpr(ast: InvokeFunctionExpr, context: any): any;\n  visitInstantiateExpr(ast: InstantiateExpr, context: any): any;\n  visitLiteralExpr(ast: LiteralExpr, context: any): any;\n  visitExternalExpr(ast: ExternalExpr, context: any): any;\n  visitConditionalExpr(ast: ConditionalExpr, context: any): any;\n  visitNotExpr(ast: NotExpr, context: any): any;\n  visitCastExpr(ast: CastExpr, context: any): any;\n  visitFunctionExpr(ast: FunctionExpr, context: any): any;\n  visitBinaryOperatorExpr(ast: BinaryOperatorExpr, context: any): any;\n  visitReadPropExpr(ast: ReadPropExpr, context: any): any;\n  visitReadKeyExpr(ast: ReadKeyExpr, context: any): any;\n  visitLiteralArrayExpr(ast: LiteralArrayExpr, context: any): any;\n  visitLiteralMapExpr(ast: LiteralMapExpr, context: any): any;\n}\n\nexport var /** @type {?} */ THIS_EXPR = new ReadVarExpr(BuiltinVar.This);\nexport var /** @type {?} */ SUPER_EXPR = new ReadVarExpr(BuiltinVar.Super);\nexport var /** @type {?} */ CATCH_ERROR_VAR = new ReadVarExpr(BuiltinVar.CatchError);\nexport var /** @type {?} */ CATCH_STACK_VAR = new ReadVarExpr(BuiltinVar.CatchStack);\nexport var /** @type {?} */ NULL_EXPR = new LiteralExpr(null, null);\nexport type StmtModifier = number;\nexport let StmtModifier: any = {};\nStmtModifier.Final = 0;\nStmtModifier.Private = 1;\nStmtModifier[StmtModifier.Final] = \"Final\";\nStmtModifier[StmtModifier.Private] = \"Private\";\n\n\nexport abstract class Statement {\n/**\n * @param {?=} modifiers\n */\nconstructor(public modifiers: StmtModifier[] = null) {\n    if (isBlank(modifiers)) {\n      this.modifiers = [];\n    }\n  }\n\n  abstract visitStatement(visitor: StatementVisitor, context: any): any;\n/**\n * @param {?} modifier\n * @return {?}\n */\nhasModifier(modifier: StmtModifier): boolean { return this.modifiers.indexOf(modifier) !== -1; }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nStatement.prototype.modifiers;\n  }\n\n}\n\n\nexport class DeclareVarStmt extends Statement {\npublic type: Type;\n/**\n * @param {?} name\n * @param {?} value\n * @param {?=} type\n * @param {?=} modifiers\n */\nconstructor(public name: string,\npublic value: Expression, type: Type = null,\n              modifiers: StmtModifier[] = null) {\n    super(modifiers);\n    this.type = isPresent(type) ? type : value.type;\n  }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitStatement(visitor: StatementVisitor, context: any): any {\n    return visitor.visitDeclareVarStmt(this, context);\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nDeclareVarStmt.prototype.type;\n /** @type {?} */\nDeclareVarStmt.prototype.name;\n /** @type {?} */\nDeclareVarStmt.prototype.value;\n  }\n\n}\n\nexport class DeclareFunctionStmt extends Statement {\n/**\n * @param {?} name\n * @param {?} params\n * @param {?} statements\n * @param {?=} type\n * @param {?=} modifiers\n */\nconstructor(public name: string,\npublic params: FnParam[],\npublic statements: Statement[],\npublic type: Type = null, modifiers: StmtModifier[] = null) {\n    super(modifiers);\n  }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitStatement(visitor: StatementVisitor, context: any): any {\n    return visitor.visitDeclareFunctionStmt(this, context);\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nDeclareFunctionStmt.prototype.name;\n /** @type {?} */\nDeclareFunctionStmt.prototype.params;\n /** @type {?} */\nDeclareFunctionStmt.prototype.statements;\n /** @type {?} */\nDeclareFunctionStmt.prototype.type;\n  }\n\n}\n\nexport class ExpressionStatement extends Statement {\n/**\n * @param {?} expr\n */\nconstructor(public expr: Expression) { super(); }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitStatement(visitor: StatementVisitor, context: any): any {\n    return visitor.visitExpressionStmt(this, context);\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nExpressionStatement.prototype.expr;\n  }\n\n}\n\n\nexport class ReturnStatement extends Statement {\n/**\n * @param {?} value\n */\nconstructor(public value: Expression) { super(); }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitStatement(visitor: StatementVisitor, context: any): any {\n    return visitor.visitReturnStmt(this, context);\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nReturnStatement.prototype.value;\n  }\n\n}\n\nexport class AbstractClassPart {\n/**\n * @param {?=} type\n * @param {?} modifiers\n */\nconstructor(public type: Type = null,\npublic modifiers: StmtModifier[]) {\n    if (isBlank(modifiers)) {\n      this.modifiers = [];\n    }\n  }\n/**\n * @param {?} modifier\n * @return {?}\n */\nhasModifier(modifier: StmtModifier): boolean { return this.modifiers.indexOf(modifier) !== -1; }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nAbstractClassPart.prototype.type;\n /** @type {?} */\nAbstractClassPart.prototype.modifiers;\n  }\n\n}\n\nexport class ClassField extends AbstractClassPart {\n/**\n * @param {?} name\n * @param {?=} type\n * @param {?=} modifiers\n */\nconstructor(public name: string, type: Type = null, modifiers: StmtModifier[] = null) {\n    super(type, modifiers);\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nClassField.prototype.name;\n  }\n\n}\n\n\nexport class ClassMethod extends AbstractClassPart {\n/**\n * @param {?} name\n * @param {?} params\n * @param {?} body\n * @param {?=} type\n * @param {?=} modifiers\n */\nconstructor(public name: string,\npublic params: FnParam[],\npublic body: Statement[],\n              type: Type = null, modifiers: StmtModifier[] = null) {\n    super(type, modifiers);\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nClassMethod.prototype.name;\n /** @type {?} */\nClassMethod.prototype.params;\n /** @type {?} */\nClassMethod.prototype.body;\n  }\n\n}\n\n\nexport class ClassGetter extends AbstractClassPart {\n/**\n * @param {?} name\n * @param {?} body\n * @param {?=} type\n * @param {?=} modifiers\n */\nconstructor(public name: string,\npublic body: Statement[], type: Type = null,\n              modifiers: StmtModifier[] = null) {\n    super(type, modifiers);\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nClassGetter.prototype.name;\n /** @type {?} */\nClassGetter.prototype.body;\n  }\n\n}\n\n\nexport class ClassStmt extends Statement {\n/**\n * @param {?} name\n * @param {?} parent\n * @param {?} fields\n * @param {?} getters\n * @param {?} constructorMethod\n * @param {?} methods\n * @param {?=} modifiers\n */\nconstructor(public name: string,\npublic parent: Expression,\npublic fields: ClassField[],\npublic getters: ClassGetter[],\npublic constructorMethod: ClassMethod,\npublic methods: ClassMethod[], modifiers: StmtModifier[] = null) {\n    super(modifiers);\n  }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitStatement(visitor: StatementVisitor, context: any): any {\n    return visitor.visitDeclareClassStmt(this, context);\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nClassStmt.prototype.name;\n /** @type {?} */\nClassStmt.prototype.parent;\n /** @type {?} */\nClassStmt.prototype.fields;\n /** @type {?} */\nClassStmt.prototype.getters;\n /** @type {?} */\nClassStmt.prototype.constructorMethod;\n /** @type {?} */\nClassStmt.prototype.methods;\n  }\n\n}\n\n\nexport class IfStmt extends Statement {\n/**\n * @param {?} condition\n * @param {?} trueCase\n * @param {?=} falseCase\n */\nconstructor(public condition: Expression,\npublic trueCase: Statement[],\npublic falseCase: Statement[] = /*@ts2dart_const*/[]) {\n    super();\n  }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitStatement(visitor: StatementVisitor, context: any): any {\n    return visitor.visitIfStmt(this, context);\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nIfStmt.prototype.condition;\n /** @type {?} */\nIfStmt.prototype.trueCase;\n /** @type {?} */\nIfStmt.prototype.falseCase;\n  }\n\n}\n\n\nexport class CommentStmt extends Statement {\n/**\n * @param {?} comment\n */\nconstructor(public comment: string) { super(); }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitStatement(visitor: StatementVisitor, context: any): any {\n    return visitor.visitCommentStmt(this, context);\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nCommentStmt.prototype.comment;\n  }\n\n}\n\n\nexport class TryCatchStmt extends Statement {\n/**\n * @param {?} bodyStmts\n * @param {?} catchStmts\n */\nconstructor(public bodyStmts: Statement[],\npublic catchStmts: Statement[]) { super(); }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitStatement(visitor: StatementVisitor, context: any): any {\n    return visitor.visitTryCatchStmt(this, context);\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nTryCatchStmt.prototype.bodyStmts;\n /** @type {?} */\nTryCatchStmt.prototype.catchStmts;\n  }\n\n}\n\n\nexport class ThrowStmt extends Statement {\n/**\n * @param {?} error\n */\nconstructor(public error: Expression) { super(); }\n/**\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nvisitStatement(visitor: StatementVisitor, context: any): any {\n    return visitor.visitThrowStmt(this, context);\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nThrowStmt.prototype.error;\n  }\n\n}\n\nexport interface StatementVisitor {\n  visitDeclareVarStmt(stmt: DeclareVarStmt, context: any): any;\n  visitDeclareFunctionStmt(stmt: DeclareFunctionStmt, context: any): any;\n  visitExpressionStmt(stmt: ExpressionStatement, context: any): any;\n  visitReturnStmt(stmt: ReturnStatement, context: any): any;\n  visitDeclareClassStmt(stmt: ClassStmt, context: any): any;\n  visitIfStmt(stmt: IfStmt, context: any): any;\n  visitTryCatchStmt(stmt: TryCatchStmt, context: any): any;\n  visitThrowStmt(stmt: ThrowStmt, context: any): any;\n  visitCommentStmt(stmt: CommentStmt, context: any): any;\n}\n\nexport class ExpressionTransformer implements StatementVisitor, ExpressionVisitor {\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitReadVarExpr(ast: ReadVarExpr, context: any): any { return ast; }\n/**\n * @param {?} expr\n * @param {?} context\n * @return {?}\n */\nvisitWriteVarExpr(expr: WriteVarExpr, context: any): any {\n    return new WriteVarExpr(expr.name, expr.value.visitExpression(this, context));\n  }\n/**\n * @param {?} expr\n * @param {?} context\n * @return {?}\n */\nvisitWriteKeyExpr(expr: WriteKeyExpr, context: any): any {\n    return new WriteKeyExpr(expr.receiver.visitExpression(this, context),\n                            expr.index.visitExpression(this, context),\n                            expr.value.visitExpression(this, context));\n  }\n/**\n * @param {?} expr\n * @param {?} context\n * @return {?}\n */\nvisitWritePropExpr(expr: WritePropExpr, context: any): any {\n    return new WritePropExpr(expr.receiver.visitExpression(this, context), expr.name,\n                             expr.value.visitExpression(this, context));\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitInvokeMethodExpr(ast: InvokeMethodExpr, context: any): any {\n    var /** @type {?} */ method = isPresent(ast.builtin) ? ast.builtin : ast.name;\n    return new InvokeMethodExpr(ast.receiver.visitExpression(this, context), method,\n                                this.visitAllExpressions(ast.args, context), ast.type);\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitInvokeFunctionExpr(ast: InvokeFunctionExpr, context: any): any {\n    return new InvokeFunctionExpr(ast.fn.visitExpression(this, context),\n                                  this.visitAllExpressions(ast.args, context), ast.type);\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitInstantiateExpr(ast: InstantiateExpr, context: any): any {\n    return new InstantiateExpr(ast.classExpr.visitExpression(this, context),\n                               this.visitAllExpressions(ast.args, context), ast.type);\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitLiteralExpr(ast: LiteralExpr, context: any): any { return ast; }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitExternalExpr(ast: ExternalExpr, context: any): any { return ast; }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitConditionalExpr(ast: ConditionalExpr, context: any): any {\n    return new ConditionalExpr(ast.condition.visitExpression(this, context),\n                               ast.trueCase.visitExpression(this, context),\n                               ast.falseCase.visitExpression(this, context));\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitNotExpr(ast: NotExpr, context: any): any {\n    return new NotExpr(ast.condition.visitExpression(this, context));\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitCastExpr(ast: CastExpr, context: any): any {\n    return new CastExpr(ast.value.visitExpression(this, context), context);\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitFunctionExpr(ast: FunctionExpr, context: any): any {\n    // Don't descend into nested functions\n    return ast;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitBinaryOperatorExpr(ast: BinaryOperatorExpr, context: any): any {\n    return new BinaryOperatorExpr(ast.operator, ast.lhs.visitExpression(this, context),\n                                  ast.rhs.visitExpression(this, context), ast.type);\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitReadPropExpr(ast: ReadPropExpr, context: any): any {\n    return new ReadPropExpr(ast.receiver.visitExpression(this, context), ast.name, ast.type);\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitReadKeyExpr(ast: ReadKeyExpr, context: any): any {\n    return new ReadKeyExpr(ast.receiver.visitExpression(this, context),\n                           ast.index.visitExpression(this, context), ast.type);\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitLiteralArrayExpr(ast: LiteralArrayExpr, context: any): any {\n    return new LiteralArrayExpr(this.visitAllExpressions(ast.entries, context));\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitLiteralMapExpr(ast: LiteralMapExpr, context: any): any {\n    return new LiteralMapExpr(ast.entries.map(\n        (entry) => [entry[0], ( /** @type {?} */((<Expression>entry[1]))).visitExpression(this, context)]));\n  }\n/**\n * @param {?} exprs\n * @param {?} context\n * @return {?}\n */\nvisitAllExpressions(exprs: Expression[], context: any): Expression[] {\n    return exprs.map(expr => expr.visitExpression(this, context));\n  }\n/**\n * @param {?} stmt\n * @param {?} context\n * @return {?}\n */\nvisitDeclareVarStmt(stmt: DeclareVarStmt, context: any): any {\n    return new DeclareVarStmt(stmt.name, stmt.value.visitExpression(this, context), stmt.type,\n                              stmt.modifiers);\n  }\n/**\n * @param {?} stmt\n * @param {?} context\n * @return {?}\n */\nvisitDeclareFunctionStmt(stmt: DeclareFunctionStmt, context: any): any {\n    // Don't descend into nested functions\n    return stmt;\n  }\n/**\n * @param {?} stmt\n * @param {?} context\n * @return {?}\n */\nvisitExpressionStmt(stmt: ExpressionStatement, context: any): any {\n    return new ExpressionStatement(stmt.expr.visitExpression(this, context));\n  }\n/**\n * @param {?} stmt\n * @param {?} context\n * @return {?}\n */\nvisitReturnStmt(stmt: ReturnStatement, context: any): any {\n    return new ReturnStatement(stmt.value.visitExpression(this, context));\n  }\n/**\n * @param {?} stmt\n * @param {?} context\n * @return {?}\n */\nvisitDeclareClassStmt(stmt: ClassStmt, context: any): any {\n    // Don't descend into nested functions\n    return stmt;\n  }\n/**\n * @param {?} stmt\n * @param {?} context\n * @return {?}\n */\nvisitIfStmt(stmt: IfStmt, context: any): any {\n    return new IfStmt(stmt.condition.visitExpression(this, context),\n                      this.visitAllStatements(stmt.trueCase, context),\n                      this.visitAllStatements(stmt.falseCase, context));\n  }\n/**\n * @param {?} stmt\n * @param {?} context\n * @return {?}\n */\nvisitTryCatchStmt(stmt: TryCatchStmt, context: any): any {\n    return new TryCatchStmt(this.visitAllStatements(stmt.bodyStmts, context),\n                            this.visitAllStatements(stmt.catchStmts, context));\n  }\n/**\n * @param {?} stmt\n * @param {?} context\n * @return {?}\n */\nvisitThrowStmt(stmt: ThrowStmt, context: any): any {\n    return new ThrowStmt(stmt.error.visitExpression(this, context));\n  }\n/**\n * @param {?} stmt\n * @param {?} context\n * @return {?}\n */\nvisitCommentStmt(stmt: CommentStmt, context: any): any { return stmt; }\n/**\n * @param {?} stmts\n * @param {?} context\n * @return {?}\n */\nvisitAllStatements(stmts: Statement[], context: any): Statement[] {\n    return stmts.map(stmt => stmt.visitStatement(this, context));\n  }\n}\n\n\nexport class RecursiveExpressionVisitor implements StatementVisitor, ExpressionVisitor {\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitReadVarExpr(ast: ReadVarExpr, context: any): any { return ast; }\n/**\n * @param {?} expr\n * @param {?} context\n * @return {?}\n */\nvisitWriteVarExpr(expr: WriteVarExpr, context: any): any {\n    expr.value.visitExpression(this, context);\n    return expr;\n  }\n/**\n * @param {?} expr\n * @param {?} context\n * @return {?}\n */\nvisitWriteKeyExpr(expr: WriteKeyExpr, context: any): any {\n    expr.receiver.visitExpression(this, context);\n    expr.index.visitExpression(this, context);\n    expr.value.visitExpression(this, context);\n    return expr;\n  }\n/**\n * @param {?} expr\n * @param {?} context\n * @return {?}\n */\nvisitWritePropExpr(expr: WritePropExpr, context: any): any {\n    expr.receiver.visitExpression(this, context);\n    expr.value.visitExpression(this, context);\n    return expr;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitInvokeMethodExpr(ast: InvokeMethodExpr, context: any): any {\n    ast.receiver.visitExpression(this, context);\n    this.visitAllExpressions(ast.args, context);\n    return ast;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitInvokeFunctionExpr(ast: InvokeFunctionExpr, context: any): any {\n    ast.fn.visitExpression(this, context);\n    this.visitAllExpressions(ast.args, context);\n    return ast;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitInstantiateExpr(ast: InstantiateExpr, context: any): any {\n    ast.classExpr.visitExpression(this, context);\n    this.visitAllExpressions(ast.args, context);\n    return ast;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitLiteralExpr(ast: LiteralExpr, context: any): any { return ast; }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitExternalExpr(ast: ExternalExpr, context: any): any { return ast; }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitConditionalExpr(ast: ConditionalExpr, context: any): any {\n    ast.condition.visitExpression(this, context);\n    ast.trueCase.visitExpression(this, context);\n    ast.falseCase.visitExpression(this, context);\n    return ast;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitNotExpr(ast: NotExpr, context: any): any {\n    ast.condition.visitExpression(this, context);\n    return ast;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitCastExpr(ast: CastExpr, context: any): any {\n    ast.value.visitExpression(this, context);\n    return ast;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitFunctionExpr(ast: FunctionExpr, context: any): any { return ast; }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitBinaryOperatorExpr(ast: BinaryOperatorExpr, context: any): any {\n    ast.lhs.visitExpression(this, context);\n    ast.rhs.visitExpression(this, context);\n    return ast;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitReadPropExpr(ast: ReadPropExpr, context: any): any {\n    ast.receiver.visitExpression(this, context);\n    return ast;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitReadKeyExpr(ast: ReadKeyExpr, context: any): any {\n    ast.receiver.visitExpression(this, context);\n    ast.index.visitExpression(this, context);\n    return ast;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitLiteralArrayExpr(ast: LiteralArrayExpr, context: any): any {\n    this.visitAllExpressions(ast.entries, context);\n    return ast;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitLiteralMapExpr(ast: LiteralMapExpr, context: any): any {\n    ast.entries.forEach((entry) => ( /** @type {?} */((<Expression>entry[1]))).visitExpression(this, context));\n    return ast;\n  }\n/**\n * @param {?} exprs\n * @param {?} context\n * @return {?}\n */\nvisitAllExpressions(exprs: Expression[], context: any): void {\n    exprs.forEach(expr => expr.visitExpression(this, context));\n  }\n/**\n * @param {?} stmt\n * @param {?} context\n * @return {?}\n */\nvisitDeclareVarStmt(stmt: DeclareVarStmt, context: any): any {\n    stmt.value.visitExpression(this, context);\n    return stmt;\n  }\n/**\n * @param {?} stmt\n * @param {?} context\n * @return {?}\n */\nvisitDeclareFunctionStmt(stmt: DeclareFunctionStmt, context: any): any {\n    // Don't descend into nested functions\n    return stmt;\n  }\n/**\n * @param {?} stmt\n * @param {?} context\n * @return {?}\n */\nvisitExpressionStmt(stmt: ExpressionStatement, context: any): any {\n    stmt.expr.visitExpression(this, context);\n    return stmt;\n  }\n/**\n * @param {?} stmt\n * @param {?} context\n * @return {?}\n */\nvisitReturnStmt(stmt: ReturnStatement, context: any): any {\n    stmt.value.visitExpression(this, context);\n    return stmt;\n  }\n/**\n * @param {?} stmt\n * @param {?} context\n * @return {?}\n */\nvisitDeclareClassStmt(stmt: ClassStmt, context: any): any {\n    // Don't descend into nested functions\n    return stmt;\n  }\n/**\n * @param {?} stmt\n * @param {?} context\n * @return {?}\n */\nvisitIfStmt(stmt: IfStmt, context: any): any {\n    stmt.condition.visitExpression(this, context);\n    this.visitAllStatements(stmt.trueCase, context);\n    this.visitAllStatements(stmt.falseCase, context);\n    return stmt;\n  }\n/**\n * @param {?} stmt\n * @param {?} context\n * @return {?}\n */\nvisitTryCatchStmt(stmt: TryCatchStmt, context: any): any {\n    this.visitAllStatements(stmt.bodyStmts, context);\n    this.visitAllStatements(stmt.catchStmts, context);\n    return stmt;\n  }\n/**\n * @param {?} stmt\n * @param {?} context\n * @return {?}\n */\nvisitThrowStmt(stmt: ThrowStmt, context: any): any {\n    stmt.error.visitExpression(this, context);\n    return stmt;\n  }\n/**\n * @param {?} stmt\n * @param {?} context\n * @return {?}\n */\nvisitCommentStmt(stmt: CommentStmt, context: any): any { return stmt; }\n/**\n * @param {?} stmts\n * @param {?} context\n * @return {?}\n */\nvisitAllStatements(stmts: Statement[], context: any): void {\n    stmts.forEach(stmt => stmt.visitStatement(this, context));\n  }\n}\n/**\n * @param {?} varName\n * @param {?} newValue\n * @param {?} expression\n * @return {?}\n */\nexport function replaceVarInExpression(varName: string, newValue: Expression,\n                                       expression: Expression): Expression {\n  var /** @type {?} */ transformer = new _ReplaceVariableTransformer(varName, newValue);\n  return expression.visitExpression(transformer, null);\n}\n\nclass _ReplaceVariableTransformer extends ExpressionTransformer {\n/**\n * @param {?} _varName\n * @param {?} _newValue\n */\nconstructor(private _varName: string,\nprivate _newValue: Expression) { super(); }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitReadVarExpr(ast: ReadVarExpr, context: any): any {\n    return ast.name == this._varName ? this._newValue : ast;\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\n_ReplaceVariableTransformer.prototype._varName;\n /** @type {?} */\n_ReplaceVariableTransformer.prototype._newValue;\n  }\n\n}\n/**\n * @param {?} stmts\n * @return {?}\n */\nexport function findReadVarNames(stmts: Statement[]): Set<string> {\n  var /** @type {?} */ finder = new _VariableFinder();\n  finder.visitAllStatements(stmts, null);\n  return finder.varNames;\n}\n\nclass _VariableFinder extends RecursiveExpressionVisitor {\n  varNames = new Set<string>();\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitReadVarExpr(ast: ReadVarExpr, context: any): any {\n    this.varNames.add(ast.name);\n    return null;\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\n_VariableFinder.prototype.varNames;\n  }\n\n}\n/**\n * @param {?} name\n * @param {?=} type\n * @return {?}\n */\nexport function variable(name: string, type: Type = null): ReadVarExpr {\n  return new ReadVarExpr(name, type);\n}\n/**\n * @param {?} id\n * @param {?=} typeParams\n * @return {?}\n */\nexport function importExpr(id: CompileIdentifierMetadata, typeParams: Type[] = null): ExternalExpr {\n  return new ExternalExpr(id, null, typeParams);\n}\n/**\n * @param {?} id\n * @param {?=} typeParams\n * @param {?=} typeModifiers\n * @return {?}\n */\nexport function importType(id: CompileIdentifierMetadata, typeParams: Type[] = null,\n                           typeModifiers: TypeModifier[] = null): ExternalType {\n  return isPresent(id) ? new ExternalType(id, typeParams, typeModifiers) : null;\n}\n/**\n * @param {?} value\n * @param {?=} type\n * @return {?}\n */\nexport function literal(value: any, type: Type = null): LiteralExpr {\n  return new LiteralExpr(value, type);\n}\n/**\n * @param {?} values\n * @param {?=} type\n * @return {?}\n */\nexport function literalArr(values: Expression[], type: Type = null): LiteralArrayExpr {\n  return new LiteralArrayExpr(values, type);\n}\n/**\n * @param {?} values\n * @param {?=} type\n * @return {?}\n */\nexport function literalMap(values: Array<Array<string | Expression>>,\n                           type: MapType = null): LiteralMapExpr {\n  return new LiteralMapExpr(values, type);\n}\n/**\n * @param {?} expr\n * @return {?}\n */\nexport function not(expr: Expression): NotExpr {\n  return new NotExpr(expr);\n}\n/**\n * @param {?} params\n * @param {?} body\n * @param {?=} type\n * @return {?}\n */\nexport function fn(params: FnParam[], body: Statement[], type: Type = null): FunctionExpr {\n  return new FunctionExpr(params, body, type);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}