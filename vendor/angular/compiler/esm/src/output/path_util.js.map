{"version":3,"file":"path_util.js","sourceRoot":"","sources":["../../../../../../modules/@angular/compiler/src/output/path_util.ts"],"names":[],"mappings":";AAAA,6BAA4B,6BAA6B,CAAC,CAAA;AAC1D,uBAAsD,uBAAuB,CAAC,CAAA;AAG9E,gDAAgD;AAChD,IAAI,gBAAgB,CAAC,aAAa,GAAG,iCAAiC,CAAC;AAEvE;;GAEG;AACH;IACA;;;OAGG;IACH,OAAO,aAAa,CAAC,GAAW,IAAc,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAG3E,CAAC;AARqB,uBAAe,kBAQpC,CAAA;AAED;IAgBA;;;;OAIG;IACH,YAAmB,WAAmB,EAC/B,aAAqB,EACrB,UAAkB;QAFN,gBAAW,GAAX,WAAW,CAAQ;QAC/B,kBAAa,GAAb,aAAa,CAAQ;QACrB,eAAU,GAAV,UAAU,CAAQ;IACvB,CAAC;IAvBH;;;;OAIG;IACH,OAAO,KAAK,CAAC,GAAW,EAAE,gBAAgB,GAAY,IAAI;QACtD,IAAI,gBAAgB,CAAC,KAAK,GAAG,oBAAa,CAAC,UAAU,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC;QAC1E,EAAE,CAAC,CAAC,gBAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACrB,MAAM,CAAC,IAAI,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QACpD,CAAC;QACD,EAAE,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC;YACrB,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;QACD,MAAM,IAAI,0BAAa,CAAC,OAAO,GAAG,4BAA4B,CAAC,CAAC;IAClE,CAAC;IAWD,OAAO,8BAA8B;QACtC,gBAAgB;QACjB,QAAQ,CAAC,SAAS,CAAC,WAAW,CAAC;QAC9B,gBAAgB;QACjB,QAAQ,CAAC,SAAS,CAAC,aAAa,CAAC;QAChC,gBAAgB;QACjB,QAAQ,CAAC,SAAS,CAAC,UAAU,CAAC;IAC5B,CAAC;AAEH,CAAC;AAnCY,gBAAQ,WAmCpB,CAAA","sourcesContent":["import {BaseException} from '../../src/facade/exceptions';\nimport {isPresent, isBlank, RegExpWrapper, Math} from '../../src/facade/lang';\nimport {Injectable} from '@angular/core';\n\n// asset:<package-name>/<realm>/<path-to-module>\nvar /** @type {?} */ _ASSET_URL_RE = /asset:([^\\/]+)\\/([^\\/]+)\\/(.+)/g;\n\n/**\n * Interface that defines how import statements should be generated.\n */\nexport abstract class ImportGenerator {\n/**\n * @param {?} url\n * @return {?}\n */\nstatic parseAssetUrl(url: string): AssetUrl { return AssetUrl.parse(url); }\n\n  abstract getImportPath(moduleUrlStr: string, importedUrlStr: string): string;\n}\n\nexport class AssetUrl {\n/**\n * @param {?} url\n * @param {?=} allowNonMatching\n * @return {?}\n */\nstatic parse(url: string, allowNonMatching: boolean = true): AssetUrl {\n    var /** @type {?} */ match = RegExpWrapper.firstMatch(_ASSET_URL_RE, url);\n    if (isPresent(match)) {\n      return new AssetUrl(match[1], match[2], match[3]);\n    }\n    if (allowNonMatching) {\n      return null;\n    }\n    throw new BaseException(`Url ${url} is not a valid asset: url`);\n  }\n/**\n * @param {?} packageName\n * @param {?} firstLevelDir\n * @param {?} modulePath\n */\nconstructor(public packageName: string,\npublic firstLevelDir: string,\npublic modulePath: string) {\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nAssetUrl.prototype.packageName;\n /** @type {?} */\nAssetUrl.prototype.firstLevelDir;\n /** @type {?} */\nAssetUrl.prototype.modulePath;\n  }\n\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}