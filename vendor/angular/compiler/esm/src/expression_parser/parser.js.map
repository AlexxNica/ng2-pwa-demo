{"version":3,"file":"parser.js","sourceRoot":"","sources":["../../../../../../modules/@angular/compiler/src/expression_parser/parser.ts"],"names":[],"mappings":"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","sourcesContent":["import {Injectable} from '@angular/core';\nimport {isBlank, isPresent, StringWrapper} from '../../src/facade/lang';\nimport {BaseException} from '../../src/facade/exceptions';\nimport {ListWrapper} from '../../src/facade/collection';\nimport {\n  Lexer,\n  EOF,\n  isIdentifier,\n  isQuote,\n  Token,\n  $PERIOD,\n  $COLON,\n  $SEMICOLON,\n  $LBRACKET,\n  $RBRACKET,\n  $COMMA,\n  $LBRACE,\n  $RBRACE,\n  $LPAREN,\n  $RPAREN,\n  $SLASH\n} from './lexer';\nimport {\n  AST,\n  EmptyExpr,\n  ImplicitReceiver,\n  PropertyRead,\n  PropertyWrite,\n  SafePropertyRead,\n  LiteralPrimitive,\n  Binary,\n  PrefixNot,\n  Conditional,\n  BindingPipe,\n  Chain,\n  KeyedRead,\n  KeyedWrite,\n  LiteralArray,\n  LiteralMap,\n  Interpolation,\n  MethodCall,\n  SafeMethodCall,\n  FunctionCall,\n  TemplateBinding,\n  ASTWithSource,\n  AstVisitor,\n  Quote\n} from './ast';\n\n\nvar /** @type {?} */ _implicitReceiver = new ImplicitReceiver();\n// TODO(tbosch): Cannot make this const/final right now because of the transpiler...\nvar /** @type {?} */ INTERPOLATION_REGEXP = /\\{\\{([\\s\\S]*?)\\}\\}/g;\n\nclass ParseException extends BaseException {\n/**\n * @param {?} message\n * @param {?} input\n * @param {?} errLocation\n * @param {?=} ctxLocation\n */\nconstructor(message: string, input: string, errLocation: string, ctxLocation?: any) {\n    super(`Parser Error: ${message} ${errLocation} [${input}] in ${ctxLocation}`);\n  }\n}\n\nexport class SplitInterpolation {\n/**\n * @param {?} strings\n * @param {?} expressions\n */\nconstructor(public strings: string[],\npublic expressions: string[]) {}\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nSplitInterpolation.prototype.strings;\n /** @type {?} */\nSplitInterpolation.prototype.expressions;\n  }\n\n}\n\nexport class TemplateBindingParseResult {\n/**\n * @param {?} templateBindings\n * @param {?} warnings\n */\nconstructor(public templateBindings: TemplateBinding[],\npublic warnings: string[]) {}\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nTemplateBindingParseResult.prototype.templateBindings;\n /** @type {?} */\nTemplateBindingParseResult.prototype.warnings;\n  }\n\n}\nexport class Parser {\n/**\n * @param {?} _lexer\n */\nconstructor(\npublic _lexer: Lexer) {}\n/**\n * @param {?} input\n * @param {?} location\n * @return {?}\n */\nparseAction(input: string, location: any): ASTWithSource {\n    this._checkNoInterpolation(input, location);\n    var /** @type {?} */ tokens = this._lexer.tokenize(this._stripComments(input));\n    var /** @type {?} */ ast = new _ParseAST(input, location, tokens, true).parseChain();\n    return new ASTWithSource(ast, input, location);\n  }\n/**\n * @param {?} input\n * @param {?} location\n * @return {?}\n */\nparseBinding(input: string, location: any): ASTWithSource {\n    var /** @type {?} */ ast = this._parseBindingAst(input, location);\n    return new ASTWithSource(ast, input, location);\n  }\n/**\n * @param {?} input\n * @param {?} location\n * @return {?}\n */\nparseSimpleBinding(input: string, location: string): ASTWithSource {\n    var /** @type {?} */ ast = this._parseBindingAst(input, location);\n    if (!SimpleExpressionChecker.check(ast)) {\n      throw new ParseException(\n          'Host binding expression can only contain field access and constants', input, location);\n    }\n    return new ASTWithSource(ast, input, location);\n  }\n/**\n * @param {?} input\n * @param {?} location\n * @return {?}\n */\nprivate _parseBindingAst(input: string, location: string): AST {\n    // Quotes expressions use 3rd-party expression language. We don't want to use\n    // our lexer or parser for that, so we check for that ahead of time.\n    var /** @type {?} */ quote = this._parseQuote(input, location);\n\n    if (isPresent(quote)) {\n      return quote;\n    }\n\n    this._checkNoInterpolation(input, location);\n    var /** @type {?} */ tokens = this._lexer.tokenize(this._stripComments(input));\n    return new _ParseAST(input, location, tokens, false).parseChain();\n  }\n/**\n * @param {?} input\n * @param {?} location\n * @return {?}\n */\nprivate _parseQuote(input: string, location: any): AST {\n    if (isBlank(input)) return null;\n    var /** @type {?} */ prefixSeparatorIndex = input.indexOf(':');\n    if (prefixSeparatorIndex == -1) return null;\n    var /** @type {?} */ prefix = input.substring(0, prefixSeparatorIndex).trim();\n    if (!isIdentifier(prefix)) return null;\n    var /** @type {?} */ uninterpretedExpression = input.substring(prefixSeparatorIndex + 1);\n    return new Quote(prefix, uninterpretedExpression, location);\n  }\n/**\n * @param {?} input\n * @param {?} location\n * @return {?}\n */\nparseTemplateBindings(input: string, location: any): TemplateBindingParseResult {\n    var /** @type {?} */ tokens = this._lexer.tokenize(input);\n    return new _ParseAST(input, location, tokens, false).parseTemplateBindings();\n  }\n/**\n * @param {?} input\n * @param {?} location\n * @return {?}\n */\nparseInterpolation(input: string, location: any): ASTWithSource {\n    let /** @type {?} */ split = this.splitInterpolation(input, location);\n    if (split == null) return null;\n\n    let /** @type {?} */ expressions = [];\n\n    for (let /** @type {?} */ i = 0; i < split.expressions.length; ++i) {\n      var /** @type {?} */ tokens = this._lexer.tokenize(this._stripComments(split.expressions[i]));\n      var /** @type {?} */ ast = new _ParseAST(input, location, tokens, false).parseChain();\n      expressions.push(ast);\n    }\n\n    return new ASTWithSource(new Interpolation(split.strings, expressions), input, location);\n  }\n/**\n * @param {?} input\n * @param {?} location\n * @return {?}\n */\nsplitInterpolation(input: string, location: string): SplitInterpolation {\n    var /** @type {?} */ parts = StringWrapper.split(input, INTERPOLATION_REGEXP);\n    if (parts.length <= 1) {\n      return null;\n    }\n    var /** @type {?} */ strings = [];\n    var /** @type {?} */ expressions = [];\n\n    for (var /** @type {?} */ i = 0; i < parts.length; i++) {\n      var /** @type {?} */ part: string = parts[i];\n      if (i % 2 === 0) {\n        // fixed string\n        strings.push(part);\n      } else if (part.trim().length > 0) {\n        expressions.push(part);\n      } else {\n        throw new ParseException('Blank expressions are not allowed in interpolated strings', input,\n                                 `at column ${this._findInterpolationErrorColumn(parts, i)} in`,\n                                 location);\n      }\n    }\n    return new SplitInterpolation(strings, expressions);\n  }\n/**\n * @param {?} input\n * @param {?} location\n * @return {?}\n */\nwrapLiteralPrimitive(input: string, location: any): ASTWithSource {\n    return new ASTWithSource(new LiteralPrimitive(input), input, location);\n  }\n/**\n * @param {?} input\n * @return {?}\n */\nprivate _stripComments(input: string): string {\n    let /** @type {?} */ i = this._commentStart(input);\n    return isPresent(i) ? input.substring(0, i).trim() : input;\n  }\n/**\n * @param {?} input\n * @return {?}\n */\nprivate _commentStart(input: string): number {\n    var /** @type {?} */ outerQuote = null;\n    for (var /** @type {?} */ i = 0; i < input.length - 1; i++) {\n      let /** @type {?} */ char = StringWrapper.charCodeAt(input, i);\n      let /** @type {?} */ nextChar = StringWrapper.charCodeAt(input, i + 1);\n\n      if (char === $SLASH && nextChar == $SLASH && isBlank(outerQuote)) return i;\n\n      if (outerQuote === char) {\n        outerQuote = null;\n      } else if (isBlank(outerQuote) && isQuote(char)) {\n        outerQuote = char;\n      }\n    }\n    return null;\n  }\n/**\n * @param {?} input\n * @param {?} location\n * @return {?}\n */\nprivate _checkNoInterpolation(input: string, location: any): void {\n    var /** @type {?} */ parts = StringWrapper.split(input, INTERPOLATION_REGEXP);\n    if (parts.length > 1) {\n      throw new ParseException('Got interpolation ({{}}) where expression was expected', input,\n                               `at column ${this._findInterpolationErrorColumn(parts, 1)} in`,\n                               location);\n    }\n  }\n/**\n * @param {?} parts\n * @param {?} partInErrIdx\n * @return {?}\n */\nprivate _findInterpolationErrorColumn(parts: string[], partInErrIdx: number): number {\n    var /** @type {?} */ errLocation = '';\n    for (var /** @type {?} */ j = 0; j < partInErrIdx; j++) {\n      errLocation += j % 2 === 0 ? parts[j] : `{{${parts[j]}}}`;\n    }\n\n    return errLocation.length;\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @internal\n @type {?} */\nParser.prototype._lexer;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */ static ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: Lexer, },\n];\n}\n\nexport class _ParseAST {\n  index: number = 0;\n/**\n * @param {?} input\n * @param {?} location\n * @param {?} tokens\n * @param {?} parseAction\n */\nconstructor(public input: string,\npublic location: any,\npublic tokens: any[],\npublic parseAction: boolean) {}\n/**\n * @param {?} offset\n * @return {?}\n */\npeek(offset: number): Token {\n    var /** @type {?} */ i = this.index + offset;\n    return i < this.tokens.length ? this.tokens[i] : EOF;\n  }\n\n  get next(): Token { return this.peek(0); }\n\n  get inputIndex(): number {\n    return (this.index < this.tokens.length) ? this.next.index : this.input.length;\n  }\n/**\n * @return {?}\n */\nadvance() { this.index++; }\n/**\n * @param {?} code\n * @return {?}\n */\noptionalCharacter(code: number): boolean {\n    if (this.next.isCharacter(code)) {\n      this.advance();\n      return true;\n    } else {\n      return false;\n    }\n  }\n/**\n * @return {?}\n */\npeekKeywordLet(): boolean { return this.next.isKeywordLet(); }\n/**\n * @return {?}\n */\npeekDeprecatedKeywordVar(): boolean { return this.next.isKeywordDeprecatedVar(); }\n/**\n * @return {?}\n */\npeekDeprecatedOperatorHash(): boolean { return this.next.isOperator('#'); }\n/**\n * @param {?} code\n * @return {?}\n */\nexpectCharacter(code: number) {\n    if (this.optionalCharacter(code)) return;\n    this.error(`Missing expected ${StringWrapper.fromCharCode(code)}`);\n  }\n/**\n * @param {?} op\n * @return {?}\n */\noptionalOperator(op: string): boolean {\n    if (this.next.isOperator(op)) {\n      this.advance();\n      return true;\n    } else {\n      return false;\n    }\n  }\n/**\n * @param {?} operator\n * @return {?}\n */\nexpectOperator(operator: string) {\n    if (this.optionalOperator(operator)) return;\n    this.error(`Missing expected operator ${operator}`);\n  }\n/**\n * @return {?}\n */\nexpectIdentifierOrKeyword(): string {\n    var /** @type {?} */ n = this.next;\n    if (!n.isIdentifier() && !n.isKeyword()) {\n      this.error(`Unexpected token ${n}, expected identifier or keyword`);\n    }\n    this.advance();\n    return n.toString();\n  }\n/**\n * @return {?}\n */\nexpectIdentifierOrKeywordOrString(): string {\n    var /** @type {?} */ n = this.next;\n    if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {\n      this.error(`Unexpected token ${n}, expected identifier, keyword, or string`);\n    }\n    this.advance();\n    return n.toString();\n  }\n/**\n * @return {?}\n */\nparseChain(): AST {\n    var /** @type {?} */ exprs = [];\n    while (this.index < this.tokens.length) {\n      var /** @type {?} */ expr = this.parsePipe();\n      exprs.push(expr);\n\n      if (this.optionalCharacter($SEMICOLON)) {\n        if (!this.parseAction) {\n          this.error(\"Binding expression cannot contain chained expression\");\n        }\n        while (this.optionalCharacter($SEMICOLON)) {\n        }  // read all semicolons\n      } else if (this.index < this.tokens.length) {\n        this.error(`Unexpected token '${this.next}'`);\n      }\n    }\n    if (exprs.length == 0) return new EmptyExpr();\n    if (exprs.length == 1) return exprs[0];\n    return new Chain(exprs);\n  }\n/**\n * @return {?}\n */\nparsePipe(): AST {\n    var /** @type {?} */ result = this.parseExpression();\n    if (this.optionalOperator(\"|\")) {\n      if (this.parseAction) {\n        this.error(\"Cannot have a pipe in an action expression\");\n      }\n\n      do {\n        var /** @type {?} */ name = this.expectIdentifierOrKeyword();\n        var /** @type {?} */ args = [];\n        while (this.optionalCharacter($COLON)) {\n          args.push(this.parseExpression());\n        }\n        result = new BindingPipe(result, name, args);\n      } while (this.optionalOperator(\"|\"));\n    }\n\n    return result;\n  }\n/**\n * @return {?}\n */\nparseExpression(): AST { return this.parseConditional(); }\n/**\n * @return {?}\n */\nparseConditional(): AST {\n    var /** @type {?} */ start = this.inputIndex;\n    var /** @type {?} */ result = this.parseLogicalOr();\n\n    if (this.optionalOperator('?')) {\n      var /** @type {?} */ yes = this.parsePipe();\n      if (!this.optionalCharacter($COLON)) {\n        var /** @type {?} */ end = this.inputIndex;\n        var /** @type {?} */ expression = this.input.substring(start, end);\n        this.error(`Conditional expression ${expression} requires all 3 expressions`);\n      }\n      var /** @type {?} */ no = this.parsePipe();\n      return new Conditional(result, yes, no);\n    } else {\n      return result;\n    }\n  }\n/**\n * @return {?}\n */\nparseLogicalOr(): AST {\n    // '||'\n    var /** @type {?} */ result = this.parseLogicalAnd();\n    while (this.optionalOperator('||')) {\n      result = new Binary('||', result, this.parseLogicalAnd());\n    }\n    return result;\n  }\n/**\n * @return {?}\n */\nparseLogicalAnd(): AST {\n    // '&&'\n    var /** @type {?} */ result = this.parseEquality();\n    while (this.optionalOperator('&&')) {\n      result = new Binary('&&', result, this.parseEquality());\n    }\n    return result;\n  }\n/**\n * @return {?}\n */\nparseEquality(): AST {\n    // '==','!=','===','!=='\n    var /** @type {?} */ result = this.parseRelational();\n    while (true) {\n      if (this.optionalOperator('==')) {\n        result = new Binary('==', result, this.parseRelational());\n      } else if (this.optionalOperator('===')) {\n        result = new Binary('===', result, this.parseRelational());\n      } else if (this.optionalOperator('!=')) {\n        result = new Binary('!=', result, this.parseRelational());\n      } else if (this.optionalOperator('!==')) {\n        result = new Binary('!==', result, this.parseRelational());\n      } else {\n        return result;\n      }\n    }\n  }\n/**\n * @return {?}\n */\nparseRelational(): AST {\n    // '<', '>', '<=', '>='\n    var /** @type {?} */ result = this.parseAdditive();\n    while (true) {\n      if (this.optionalOperator('<')) {\n        result = new Binary('<', result, this.parseAdditive());\n      } else if (this.optionalOperator('>')) {\n        result = new Binary('>', result, this.parseAdditive());\n      } else if (this.optionalOperator('<=')) {\n        result = new Binary('<=', result, this.parseAdditive());\n      } else if (this.optionalOperator('>=')) {\n        result = new Binary('>=', result, this.parseAdditive());\n      } else {\n        return result;\n      }\n    }\n  }\n/**\n * @return {?}\n */\nparseAdditive(): AST {\n    // '+', '-'\n    var /** @type {?} */ result = this.parseMultiplicative();\n    while (true) {\n      if (this.optionalOperator('+')) {\n        result = new Binary('+', result, this.parseMultiplicative());\n      } else if (this.optionalOperator('-')) {\n        result = new Binary('-', result, this.parseMultiplicative());\n      } else {\n        return result;\n      }\n    }\n  }\n/**\n * @return {?}\n */\nparseMultiplicative(): AST {\n    // '*', '%', '/'\n    var /** @type {?} */ result = this.parsePrefix();\n    while (true) {\n      if (this.optionalOperator('*')) {\n        result = new Binary('*', result, this.parsePrefix());\n      } else if (this.optionalOperator('%')) {\n        result = new Binary('%', result, this.parsePrefix());\n      } else if (this.optionalOperator('/')) {\n        result = new Binary('/', result, this.parsePrefix());\n      } else {\n        return result;\n      }\n    }\n  }\n/**\n * @return {?}\n */\nparsePrefix(): AST {\n    if (this.optionalOperator('+')) {\n      return this.parsePrefix();\n    } else if (this.optionalOperator('-')) {\n      return new Binary('-', new LiteralPrimitive(0), this.parsePrefix());\n    } else if (this.optionalOperator('!')) {\n      return new PrefixNot(this.parsePrefix());\n    } else {\n      return this.parseCallChain();\n    }\n  }\n/**\n * @return {?}\n */\nparseCallChain(): AST {\n    var /** @type {?} */ result = this.parsePrimary();\n    while (true) {\n      if (this.optionalCharacter($PERIOD)) {\n        result = this.parseAccessMemberOrMethodCall(result, false);\n\n      } else if (this.optionalOperator('?.')) {\n        result = this.parseAccessMemberOrMethodCall(result, true);\n\n      } else if (this.optionalCharacter($LBRACKET)) {\n        var /** @type {?} */ key = this.parsePipe();\n        this.expectCharacter($RBRACKET);\n        if (this.optionalOperator(\"=\")) {\n          var /** @type {?} */ value = this.parseConditional();\n          result = new KeyedWrite(result, key, value);\n        } else {\n          result = new KeyedRead(result, key);\n        }\n\n      } else if (this.optionalCharacter($LPAREN)) {\n        var /** @type {?} */ args = this.parseCallArguments();\n        this.expectCharacter($RPAREN);\n        result = new FunctionCall(result, args);\n\n      } else {\n        return result;\n      }\n    }\n  }\n/**\n * @return {?}\n */\nparsePrimary(): AST {\n    if (this.optionalCharacter($LPAREN)) {\n      let /** @type {?} */ result = this.parsePipe();\n      this.expectCharacter($RPAREN);\n      return result;\n    } else if (this.next.isKeywordNull() || this.next.isKeywordUndefined()) {\n      this.advance();\n      return new LiteralPrimitive(null);\n\n    } else if (this.next.isKeywordTrue()) {\n      this.advance();\n      return new LiteralPrimitive(true);\n\n    } else if (this.next.isKeywordFalse()) {\n      this.advance();\n      return new LiteralPrimitive(false);\n\n    } else if (this.optionalCharacter($LBRACKET)) {\n      var /** @type {?} */ elements = this.parseExpressionList($RBRACKET);\n      this.expectCharacter($RBRACKET);\n      return new LiteralArray(elements);\n\n    } else if (this.next.isCharacter($LBRACE)) {\n      return this.parseLiteralMap();\n\n    } else if (this.next.isIdentifier()) {\n      return this.parseAccessMemberOrMethodCall(_implicitReceiver, false);\n\n    } else if (this.next.isNumber()) {\n      var /** @type {?} */ value = this.next.toNumber();\n      this.advance();\n      return new LiteralPrimitive(value);\n\n    } else if (this.next.isString()) {\n      var /** @type {?} */ literalValue = this.next.toString();\n      this.advance();\n      return new LiteralPrimitive(literalValue);\n\n    } else if (this.index >= this.tokens.length) {\n      this.error(`Unexpected end of expression: ${this.input}`);\n\n    } else {\n      this.error(`Unexpected token ${this.next}`);\n    }\n    // error() throws, so we don't reach here.\n    throw new BaseException(\"Fell through all cases in parsePrimary\");\n  }\n/**\n * @param {?} terminator\n * @return {?}\n */\nparseExpressionList(terminator: number): any[] {\n    var /** @type {?} */ result = [];\n    if (!this.next.isCharacter(terminator)) {\n      do {\n        result.push(this.parsePipe());\n      } while (this.optionalCharacter($COMMA));\n    }\n    return result;\n  }\n/**\n * @return {?}\n */\nparseLiteralMap(): LiteralMap {\n    var /** @type {?} */ keys = [];\n    var /** @type {?} */ values = [];\n    this.expectCharacter($LBRACE);\n    if (!this.optionalCharacter($RBRACE)) {\n      do {\n        var /** @type {?} */ key = this.expectIdentifierOrKeywordOrString();\n        keys.push(key);\n        this.expectCharacter($COLON);\n        values.push(this.parsePipe());\n      } while (this.optionalCharacter($COMMA));\n      this.expectCharacter($RBRACE);\n    }\n    return new LiteralMap(keys, values);\n  }\n/**\n * @param {?} receiver\n * @param {?=} isSafe\n * @return {?}\n */\nparseAccessMemberOrMethodCall(receiver: AST, isSafe: boolean = false): AST {\n    let /** @type {?} */ id = this.expectIdentifierOrKeyword();\n\n    if (this.optionalCharacter($LPAREN)) {\n      let /** @type {?} */ args = this.parseCallArguments();\n      this.expectCharacter($RPAREN);\n      return isSafe ? new SafeMethodCall(receiver, id, args) : new MethodCall(receiver, id, args);\n\n    } else {\n      if (isSafe) {\n        if (this.optionalOperator(\"=\")) {\n          this.error(\"The '?.' operator cannot be used in the assignment\");\n        } else {\n          return new SafePropertyRead(receiver, id);\n        }\n      } else {\n        if (this.optionalOperator(\"=\")) {\n          if (!this.parseAction) {\n            this.error(\"Bindings cannot contain assignments\");\n          }\n\n          let /** @type {?} */ value = this.parseConditional();\n          return new PropertyWrite(receiver, id, value);\n        } else {\n          return new PropertyRead(receiver, id);\n        }\n      }\n    }\n\n    return null;\n  }\n/**\n * @return {?}\n */\nparseCallArguments(): BindingPipe[] {\n    if (this.next.isCharacter($RPAREN)) return [];\n    var /** @type {?} */ positionals = [];\n    do {\n      positionals.push(this.parsePipe());\n    } while (this.optionalCharacter($COMMA));\n    return positionals;\n  }\n/**\n * @return {?}\n */\nparseBlockContent(): AST {\n    if (!this.parseAction) {\n      this.error(\"Binding expression cannot contain chained expression\");\n    }\n    var /** @type {?} */ exprs = [];\n    while (this.index < this.tokens.length && !this.next.isCharacter($RBRACE)) {\n      var /** @type {?} */ expr = this.parseExpression();\n      exprs.push(expr);\n\n      if (this.optionalCharacter($SEMICOLON)) {\n        while (this.optionalCharacter($SEMICOLON)) {\n        }  // read all semicolons\n      }\n    }\n    if (exprs.length == 0) return new EmptyExpr();\n    if (exprs.length == 1) return exprs[0];\n\n    return new Chain(exprs);\n  }\n/**\n *  An identifier, a keyword, a string with an optional `-` inbetween.\n * @return {?}\n */\nexpectTemplateBindingKey(): string {\n    var /** @type {?} */ result = '';\n    var /** @type {?} */ operatorFound = false;\n    do {\n      result += this.expectIdentifierOrKeywordOrString();\n      operatorFound = this.optionalOperator('-');\n      if (operatorFound) {\n        result += '-';\n      }\n    } while (operatorFound);\n\n    return result.toString();\n  }\n/**\n * @return {?}\n */\nparseTemplateBindings(): TemplateBindingParseResult {\n    var /** @type {?} */ bindings: TemplateBinding[] = [];\n    var /** @type {?} */ prefix = null;\n    var /** @type {?} */ warnings: string[] = [];\n    while (this.index < this.tokens.length) {\n      var /** @type {?} */ keyIsVar: boolean = this.peekKeywordLet();\n      if (!keyIsVar && this.peekDeprecatedKeywordVar()) {\n        keyIsVar = true;\n        warnings.push(`\"var\" inside of expressions is deprecated. Use \"let\" instead!`);\n      }\n      if (!keyIsVar && this.peekDeprecatedOperatorHash()) {\n        keyIsVar = true;\n        warnings.push(`\"#\" inside of expressions is deprecated. Use \"let\" instead!`);\n      }\n      if (keyIsVar) {\n        this.advance();\n      }\n      var /** @type {?} */ key = this.expectTemplateBindingKey();\n      if (!keyIsVar) {\n        if (prefix == null) {\n          prefix = key;\n        } else {\n          key = prefix + key[0].toUpperCase() + key.substring(1);\n        }\n      }\n      this.optionalCharacter($COLON);\n      var /** @type {?} */ name = null;\n      var /** @type {?} */ expression = null;\n      if (keyIsVar) {\n        if (this.optionalOperator(\"=\")) {\n          name = this.expectTemplateBindingKey();\n        } else {\n          name = '\\$implicit';\n        }\n      } else if (this.next !== EOF && !this.peekKeywordLet() && !this.peekDeprecatedKeywordVar() &&\n                 !this.peekDeprecatedOperatorHash()) {\n        var /** @type {?} */ start = this.inputIndex;\n        var /** @type {?} */ ast = this.parsePipe();\n        var /** @type {?} */ source = this.input.substring(start, this.inputIndex);\n        expression = new ASTWithSource(ast, source, this.location);\n      }\n      bindings.push(new TemplateBinding(key, keyIsVar, name, expression));\n      if (!this.optionalCharacter($SEMICOLON)) {\n        this.optionalCharacter($COMMA);\n      }\n    }\n    return new TemplateBindingParseResult(bindings, warnings);\n  }\n/**\n * @param {?} message\n * @param {?=} index\n * @return {?}\n */\nerror(message: string, index: number = null) {\n    if (isBlank(index)) index = this.index;\n\n    var /** @type {?} */ location = (index < this.tokens.length) ? `at column ${this.tokens[index].index + 1} in` :\n                                                  `at the end of the expression`;\n\n    throw new ParseException(message, this.input, location, this.location);\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\n_ParseAST.prototype.index;\n /** @type {?} */\n_ParseAST.prototype.input;\n /** @type {?} */\n_ParseAST.prototype.location;\n /** @type {?} */\n_ParseAST.prototype.tokens;\n /** @type {?} */\n_ParseAST.prototype.parseAction;\n  }\n\n}\n\nclass SimpleExpressionChecker implements AstVisitor {\n/**\n * @param {?} ast\n * @return {?}\n */\nstatic check(ast: AST): boolean {\n    var /** @type {?} */ s = new SimpleExpressionChecker();\n    ast.visit(s);\n    return s.simple;\n  }\n\n  simple = true;\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitImplicitReceiver(ast: ImplicitReceiver, context: any) {}\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitInterpolation(ast: Interpolation, context: any) { this.simple = false; }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitLiteralPrimitive(ast: LiteralPrimitive, context: any) {}\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitPropertyRead(ast: PropertyRead, context: any) {}\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitPropertyWrite(ast: PropertyWrite, context: any) { this.simple = false; }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitSafePropertyRead(ast: SafePropertyRead, context: any) { this.simple = false; }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitMethodCall(ast: MethodCall, context: any) { this.simple = false; }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitSafeMethodCall(ast: SafeMethodCall, context: any) { this.simple = false; }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitFunctionCall(ast: FunctionCall, context: any) { this.simple = false; }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitLiteralArray(ast: LiteralArray, context: any) { this.visitAll(ast.expressions); }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitLiteralMap(ast: LiteralMap, context: any) { this.visitAll(ast.values); }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitBinary(ast: Binary, context: any) { this.simple = false; }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitPrefixNot(ast: PrefixNot, context: any) { this.simple = false; }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitConditional(ast: Conditional, context: any) { this.simple = false; }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitPipe(ast: BindingPipe, context: any) { this.simple = false; }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitKeyedRead(ast: KeyedRead, context: any) { this.simple = false; }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitKeyedWrite(ast: KeyedWrite, context: any) { this.simple = false; }\n/**\n * @param {?} asts\n * @return {?}\n */\nvisitAll(asts: any[]): any[] {\n    var /** @type {?} */ res = ListWrapper.createFixedSize(asts.length);\n    for (var /** @type {?} */ i = 0; i < asts.length; ++i) {\n      res[i] = asts[i].visit(this);\n    }\n    return res;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitChain(ast: Chain, context: any) { this.simple = false; }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitQuote(ast: Quote, context: any) { this.simple = false; }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nSimpleExpressionChecker.prototype.simple;\n  }\n\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}