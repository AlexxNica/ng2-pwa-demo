{"version":3,"file":"lexer.js","sourceRoot":"","sources":["../../../../../../modules/@angular/compiler/src/expression_parser/lexer.ts"],"names":[],"mappings":"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","sourcesContent":["import {Injectable} from '@angular/core';\nimport {SetWrapper} from '../../src/facade/collection';\nimport {NumberWrapper, StringJoiner, StringWrapper, isPresent} from '../../src/facade/lang';\nimport {BaseException} from '../../src/facade/exceptions';\nexport type TokenType = number;\nexport let TokenType: any = {};\nTokenType.Character = 0;\nTokenType.Identifier = 1;\nTokenType.Keyword = 2;\nTokenType.String = 3;\nTokenType.Operator = 4;\nTokenType.Number = 5;\nTokenType[TokenType.Character] = \"Character\";\nTokenType[TokenType.Identifier] = \"Identifier\";\nTokenType[TokenType.Keyword] = \"Keyword\";\nTokenType[TokenType.String] = \"String\";\nTokenType[TokenType.Operator] = \"Operator\";\nTokenType[TokenType.Number] = \"Number\";\nexport class Lexer {\n/**\n * @param {?} text\n * @return {?}\n */\ntokenize(text: string): any[] {\n    var /** @type {?} */ scanner = new _Scanner(text);\n    var /** @type {?} */ tokens = [];\n    var /** @type {?} */ token = scanner.scanToken();\n    while (token != null) {\n      tokens.push(token);\n      token = scanner.scanToken();\n    }\n    return tokens;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n}\n\nexport class Token {\n/**\n * @param {?} index\n * @param {?} type\n * @param {?} numValue\n * @param {?} strValue\n */\nconstructor(public index: number,\npublic type: TokenType,\npublic numValue: number,\npublic strValue: string) {}\n/**\n * @param {?} code\n * @return {?}\n */\nisCharacter(code: number): boolean {\n    return (this.type == TokenType.Character && this.numValue == code);\n  }\n/**\n * @return {?}\n */\nisNumber(): boolean { return (this.type == TokenType.Number); }\n/**\n * @return {?}\n */\nisString(): boolean { return (this.type == TokenType.String); }\n/**\n * @param {?} operater\n * @return {?}\n */\nisOperator(operater: string): boolean {\n    return (this.type == TokenType.Operator && this.strValue == operater);\n  }\n/**\n * @return {?}\n */\nisIdentifier(): boolean { return (this.type == TokenType.Identifier); }\n/**\n * @return {?}\n */\nisKeyword(): boolean { return (this.type == TokenType.Keyword); }\n/**\n * @return {?}\n */\nisKeywordDeprecatedVar(): boolean {\n    return (this.type == TokenType.Keyword && this.strValue == \"var\");\n  }\n/**\n * @return {?}\n */\nisKeywordLet(): boolean { return (this.type == TokenType.Keyword && this.strValue == \"let\"); }\n/**\n * @return {?}\n */\nisKeywordNull(): boolean { return (this.type == TokenType.Keyword && this.strValue == \"null\"); }\n/**\n * @return {?}\n */\nisKeywordUndefined(): boolean {\n    return (this.type == TokenType.Keyword && this.strValue == \"undefined\");\n  }\n/**\n * @return {?}\n */\nisKeywordTrue(): boolean { return (this.type == TokenType.Keyword && this.strValue == \"true\"); }\n/**\n * @return {?}\n */\nisKeywordFalse(): boolean { return (this.type == TokenType.Keyword && this.strValue == \"false\"); }\n/**\n * @return {?}\n */\ntoNumber(): number {\n    // -1 instead of NULL ok?\n    return (this.type == TokenType.Number) ? this.numValue : -1;\n  }\n/**\n * @return {?}\n */\ntoString(): string {\n    switch (this.type) {\n      case TokenType.Character:\n      case TokenType.Identifier:\n      case TokenType.Keyword:\n      case TokenType.Operator:\n      case TokenType.String:\n        return this.strValue;\n      case TokenType.Number:\n        return this.numValue.toString();\n      default:\n        return null;\n    }\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nToken.prototype.index;\n /** @type {?} */\nToken.prototype.type;\n /** @type {?} */\nToken.prototype.numValue;\n /** @type {?} */\nToken.prototype.strValue;\n  }\n\n}\n/**\n * @param {?} index\n * @param {?} code\n * @return {?}\n */\nfunction newCharacterToken(index: number, code: number): Token {\n  return new Token(index, TokenType.Character, code, StringWrapper.fromCharCode(code));\n}\n/**\n * @param {?} index\n * @param {?} text\n * @return {?}\n */\nfunction newIdentifierToken(index: number, text: string): Token {\n  return new Token(index, TokenType.Identifier, 0, text);\n}\n/**\n * @param {?} index\n * @param {?} text\n * @return {?}\n */\nfunction newKeywordToken(index: number, text: string): Token {\n  return new Token(index, TokenType.Keyword, 0, text);\n}\n/**\n * @param {?} index\n * @param {?} text\n * @return {?}\n */\nfunction newOperatorToken(index: number, text: string): Token {\n  return new Token(index, TokenType.Operator, 0, text);\n}\n/**\n * @param {?} index\n * @param {?} text\n * @return {?}\n */\nfunction newStringToken(index: number, text: string): Token {\n  return new Token(index, TokenType.String, 0, text);\n}\n/**\n * @param {?} index\n * @param {?} n\n * @return {?}\n */\nfunction newNumberToken(index: number, n: number): Token {\n  return new Token(index, TokenType.Number, n, \"\");\n}\n\n\nexport var /** @type {?} */ EOF: Token = new Token(-1, TokenType.Character, 0, \"\");\n\nexport const /** @type {?} */ $EOF = /*@ts2dart_const*/ 0;\nexport const /** @type {?} */ $TAB = /*@ts2dart_const*/ 9;\nexport const /** @type {?} */ $LF = /*@ts2dart_const*/ 10;\nexport const /** @type {?} */ $VTAB = /*@ts2dart_const*/ 11;\nexport const /** @type {?} */ $FF = /*@ts2dart_const*/ 12;\nexport const /** @type {?} */ $CR = /*@ts2dart_const*/ 13;\nexport const /** @type {?} */ $SPACE = /*@ts2dart_const*/ 32;\nexport const /** @type {?} */ $BANG = /*@ts2dart_const*/ 33;\nexport const /** @type {?} */ $DQ = /*@ts2dart_const*/ 34;\nexport const /** @type {?} */ $HASH = /*@ts2dart_const*/ 35;\nexport const /** @type {?} */ $$ = /*@ts2dart_const*/ 36;\nexport const /** @type {?} */ $PERCENT = /*@ts2dart_const*/ 37;\nexport const /** @type {?} */ $AMPERSAND = /*@ts2dart_const*/ 38;\nexport const /** @type {?} */ $SQ = /*@ts2dart_const*/ 39;\nexport const /** @type {?} */ $LPAREN = /*@ts2dart_const*/ 40;\nexport const /** @type {?} */ $RPAREN = /*@ts2dart_const*/ 41;\nexport const /** @type {?} */ $STAR = /*@ts2dart_const*/ 42;\nexport const /** @type {?} */ $PLUS = /*@ts2dart_const*/ 43;\nexport const /** @type {?} */ $COMMA = /*@ts2dart_const*/ 44;\nexport const /** @type {?} */ $MINUS = /*@ts2dart_const*/ 45;\nexport const /** @type {?} */ $PERIOD = /*@ts2dart_const*/ 46;\nexport const /** @type {?} */ $SLASH = /*@ts2dart_const*/ 47;\nexport const /** @type {?} */ $COLON = /*@ts2dart_const*/ 58;\nexport const /** @type {?} */ $SEMICOLON = /*@ts2dart_const*/ 59;\nexport const /** @type {?} */ $LT = /*@ts2dart_const*/ 60;\nexport const /** @type {?} */ $EQ = /*@ts2dart_const*/ 61;\nexport const /** @type {?} */ $GT = /*@ts2dart_const*/ 62;\nexport const /** @type {?} */ $QUESTION = /*@ts2dart_const*/ 63;\n\nconst /** @type {?} */ $0 = /*@ts2dart_const*/ 48;\nconst /** @type {?} */ $9 = /*@ts2dart_const*/ 57;\n\nconst /** @type {?} */ $A = /*@ts2dart_const*/ 65, /** @type {?} */ $E = /*@ts2dart_const*/ 69, /** @type {?} */ $Z = /*@ts2dart_const*/ 90;\n\nexport const /** @type {?} */ $LBRACKET = /*@ts2dart_const*/ 91;\nexport const /** @type {?} */ $BACKSLASH = /*@ts2dart_const*/ 92;\nexport const /** @type {?} */ $RBRACKET = /*@ts2dart_const*/ 93;\nconst /** @type {?} */ $CARET = /*@ts2dart_const*/ 94;\nconst /** @type {?} */ $_ = /*@ts2dart_const*/ 95;\nexport const /** @type {?} */ $BT = /*@ts2dart_const*/ 96;\nconst /** @type {?} */ $a = /*@ts2dart_const*/ 97, /** @type {?} */ $e = /*@ts2dart_const*/ 101, /** @type {?} */ $f = /*@ts2dart_const*/ 102;\nconst /** @type {?} */ $n = /*@ts2dart_const*/ 110, /** @type {?} */ $r = /*@ts2dart_const*/ 114, /** @type {?} */ $t = /*@ts2dart_const*/ 116, /** @type {?} */\n      $u = /*@ts2dart_const*/ 117, /** @type {?} */ $v = /*@ts2dart_const*/ 118, /** @type {?} */ $z = /*@ts2dart_const*/ 122;\n\nexport const /** @type {?} */ $LBRACE = /*@ts2dart_const*/ 123;\nexport const /** @type {?} */ $BAR = /*@ts2dart_const*/ 124;\nexport const /** @type {?} */ $RBRACE = /*@ts2dart_const*/ 125;\nconst /** @type {?} */ $NBSP = /*@ts2dart_const*/ 160;\n\nexport class ScannerError extends BaseException {\n/**\n * @param {?} message\n */\nconstructor(public message) { super(); }\n/**\n * @return {?}\n */\ntoString(): string { return this.message; }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nScannerError.prototype.message;\n  }\n\n}\n\nclass _Scanner {\n  length: number;\n  peek: number = 0;\n  index: number = -1;\n/**\n * @param {?} input\n */\nconstructor(public input: string) {\n    this.length = input.length;\n    this.advance();\n  }\n/**\n * @return {?}\n */\nadvance() {\n    this.peek =\n        ++this.index >= this.length ? $EOF : StringWrapper.charCodeAt(this.input, this.index);\n  }\n/**\n * @return {?}\n */\nscanToken(): Token {\n    var /** @type {?} */ input = this.input, /** @type {?} */ length = this.length, /** @type {?} */ peek = this.peek, /** @type {?} */ index = this.index;\n\n    // Skip whitespace.\n    while (peek <= $SPACE) {\n      if (++index >= length) {\n        peek = $EOF;\n        break;\n      } else {\n        peek = StringWrapper.charCodeAt(input, index);\n      }\n    }\n\n    this.peek = peek;\n    this.index = index;\n\n    if (index >= length) {\n      return null;\n    }\n\n    // Handle identifiers and numbers.\n    if (isIdentifierStart(peek)) return this.scanIdentifier();\n    if (isDigit(peek)) return this.scanNumber(index);\n\n    var /** @type {?} */ start: number = index;\n    switch (peek) {\n      case $PERIOD:\n        this.advance();\n        return isDigit(this.peek) ? this.scanNumber(start) : newCharacterToken(start, $PERIOD);\n      case $LPAREN:\n      case $RPAREN:\n      case $LBRACE:\n      case $RBRACE:\n      case $LBRACKET:\n      case $RBRACKET:\n      case $COMMA:\n      case $COLON:\n      case $SEMICOLON:\n        return this.scanCharacter(start, peek);\n      case $SQ:\n      case $DQ:\n        return this.scanString();\n      case $HASH:\n      case $PLUS:\n      case $MINUS:\n      case $STAR:\n      case $SLASH:\n      case $PERCENT:\n      case $CARET:\n        return this.scanOperator(start, StringWrapper.fromCharCode(peek));\n      case $QUESTION:\n        return this.scanComplexOperator(start, '?', $PERIOD, '.');\n      case $LT:\n      case $GT:\n        return this.scanComplexOperator(start, StringWrapper.fromCharCode(peek), $EQ, '=');\n      case $BANG:\n      case $EQ:\n        return this.scanComplexOperator(start, StringWrapper.fromCharCode(peek), $EQ, '=', $EQ,\n                                        '=');\n      case $AMPERSAND:\n        return this.scanComplexOperator(start, '&', $AMPERSAND, '&');\n      case $BAR:\n        return this.scanComplexOperator(start, '|', $BAR, '|');\n      case $NBSP:\n        while (isWhitespace(this.peek)) this.advance();\n        return this.scanToken();\n    }\n\n    this.error(`Unexpected character [${StringWrapper.fromCharCode(peek)}]`, 0);\n    return null;\n  }\n/**\n * @param {?} start\n * @param {?} code\n * @return {?}\n */\nscanCharacter(start: number, code: number): Token {\n    this.advance();\n    return newCharacterToken(start, code);\n  }\n/**\n * @param {?} start\n * @param {?} str\n * @return {?}\n */\nscanOperator(start: number, str: string): Token {\n    this.advance();\n    return newOperatorToken(start, str);\n  }\n/**\n *  Tokenize a 2/3 char long operator *\n * @returns {Token}\n * @param {?} start start index in the expression\n * @param {?} one first symbol (always part of the operator)\n * @param {?} twoCode code point for the second symbol\n * @param {?} two second symbol (part of the operator when the second code point matches)\n * @param {?=} threeCode code point for the third symbol\n * @param {?=} three third symbol (part of the operator when provided and matches source expression)\n * @return {?}\n */\nscanComplexOperator(start: number, one: string, twoCode: number, two: string, threeCode?: number,\n                      three?: string): Token {\n    this.advance();\n    var /** @type {?} */ str: string = one;\n    if (this.peek == twoCode) {\n      this.advance();\n      str += two;\n    }\n    if (isPresent(threeCode) && this.peek == threeCode) {\n      this.advance();\n      str += three;\n    }\n    return newOperatorToken(start, str);\n  }\n/**\n * @return {?}\n */\nscanIdentifier(): Token {\n    var /** @type {?} */ start: number = this.index;\n    this.advance();\n    while (isIdentifierPart(this.peek)) this.advance();\n    var /** @type {?} */ str: string = this.input.substring(start, this.index);\n    if (SetWrapper.has(KEYWORDS, str)) {\n      return newKeywordToken(start, str);\n    } else {\n      return newIdentifierToken(start, str);\n    }\n  }\n/**\n * @param {?} start\n * @return {?}\n */\nscanNumber(start: number): Token {\n    var /** @type {?} */ simple: boolean = (this.index === start);\n    this.advance();  // Skip initial digit.\n    while (true) {\n      if (isDigit(this.peek)) {\n        // Do nothing.\n      } else if (this.peek == $PERIOD) {\n        simple = false;\n      } else if (isExponentStart(this.peek)) {\n        this.advance();\n        if (isExponentSign(this.peek)) this.advance();\n        if (!isDigit(this.peek)) this.error('Invalid exponent', -1);\n        simple = false;\n      } else {\n        break;\n      }\n      this.advance();\n    }\n    var /** @type {?} */ str: string = this.input.substring(start, this.index);\n    // TODO\n    var /** @type {?} */ value: number =\n        simple ? NumberWrapper.parseIntAutoRadix(str) : NumberWrapper.parseFloat(str);\n    return newNumberToken(start, value);\n  }\n/**\n * @return {?}\n */\nscanString(): Token {\n    var /** @type {?} */ start: number = this.index;\n    var /** @type {?} */ quote: number = this.peek;\n    this.advance();  // Skip initial quote.\n\n    var /** @type {?} */ buffer: StringJoiner;\n    var /** @type {?} */ marker: number = this.index;\n    var /** @type {?} */ input: string = this.input;\n\n    while (this.peek != quote) {\n      if (this.peek == $BACKSLASH) {\n        if (buffer == null) buffer = new StringJoiner();\n        buffer.add(input.substring(marker, this.index));\n        this.advance();\n        var /** @type {?} */ unescapedCode: number;\n        if (this.peek == $u) {\n          // 4 character hex code for unicode character.\n          var /** @type {?} */ hex: string = input.substring(this.index + 1, this.index + 5);\n          try {\n            unescapedCode = NumberWrapper.parseInt(hex, 16);\n          } catch ( /** @type {?} */e) {\n            this.error(`Invalid unicode escape [\\\\u${hex}]`, 0);\n          }\n          for (var /** @type {?} */ i: number = 0; i < 5; i++) {\n            this.advance();\n          }\n        } else {\n          unescapedCode = unescape(this.peek);\n          this.advance();\n        }\n        buffer.add(StringWrapper.fromCharCode(unescapedCode));\n        marker = this.index;\n      } else if (this.peek == $EOF) {\n        this.error('Unterminated quote', 0);\n      } else {\n        this.advance();\n      }\n    }\n\n    var /** @type {?} */ last: string = input.substring(marker, this.index);\n    this.advance();  // Skip terminating quote.\n\n    // Compute the unescaped string value.\n    var /** @type {?} */ unescaped: string = last;\n    if (buffer != null) {\n      buffer.add(last);\n      unescaped = buffer.toString();\n    }\n    return newStringToken(start, unescaped);\n  }\n/**\n * @param {?} message\n * @param {?} offset\n * @return {?}\n */\nerror(message: string, offset: number) {\n    var /** @type {?} */ position: number = this.index + offset;\n    throw new ScannerError(\n        `Lexer Error: ${message} at column ${position} in expression [${this.input}]`);\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\n_Scanner.prototype.length;\n /** @type {?} */\n_Scanner.prototype.peek;\n /** @type {?} */\n_Scanner.prototype.index;\n /** @type {?} */\n_Scanner.prototype.input;\n  }\n\n}\n/**\n * @param {?} code\n * @return {?}\n */\nfunction isWhitespace(code: number): boolean {\n  return (code >= $TAB && code <= $SPACE) || (code == $NBSP);\n}\n/**\n * @param {?} code\n * @return {?}\n */\nfunction isIdentifierStart(code: number): boolean {\n  return ($a <= code && code <= $z) || ($A <= code && code <= $Z) || (code == $_) || (code == $$);\n}\n/**\n * @param {?} input\n * @return {?}\n */\nexport function isIdentifier(input: string): boolean {\n  if (input.length == 0) return false;\n  var /** @type {?} */ scanner = new _Scanner(input);\n  if (!isIdentifierStart(scanner.peek)) return false;\n  scanner.advance();\n  while (scanner.peek !== $EOF) {\n    if (!isIdentifierPart(scanner.peek)) return false;\n    scanner.advance();\n  }\n  return true;\n}\n/**\n * @param {?} code\n * @return {?}\n */\nfunction isIdentifierPart(code: number): boolean {\n  return ($a <= code && code <= $z) || ($A <= code && code <= $Z) || ($0 <= code && code <= $9) ||\n         (code == $_) || (code == $$);\n}\n/**\n * @param {?} code\n * @return {?}\n */\nfunction isDigit(code: number): boolean {\n  return $0 <= code && code <= $9;\n}\n/**\n * @param {?} code\n * @return {?}\n */\nfunction isExponentStart(code: number): boolean {\n  return code == $e || code == $E;\n}\n/**\n * @param {?} code\n * @return {?}\n */\nfunction isExponentSign(code: number): boolean {\n  return code == $MINUS || code == $PLUS;\n}\n/**\n * @param {?} code\n * @return {?}\n */\nexport function isQuote(code: number): boolean {\n  return code === $SQ || code === $DQ || code === $BT;\n}\n/**\n * @param {?} code\n * @return {?}\n */\nfunction unescape(code: number): number {\n  switch (code) {\n    case $n:\n      return $LF;\n    case $f:\n      return $FF;\n    case $r:\n      return $CR;\n    case $t:\n      return $TAB;\n    case $v:\n      return $VTAB;\n    default:\n      return code;\n  }\n}\n\nvar /** @type {?} */ OPERATORS = SetWrapper.createFromList([\n  '+',\n  '-',\n  '*',\n  '/',\n  '%',\n  '^',\n  '=',\n  '==',\n  '!=',\n  '===',\n  '!==',\n  '<',\n  '>',\n  '<=',\n  '>=',\n  '&&',\n  '||',\n  '&',\n  '|',\n  '!',\n  '?',\n  '#',\n  '?.'\n]);\n\n\nvar /** @type {?} */ KEYWORDS =\n    SetWrapper.createFromList(['var', 'let', 'null', 'undefined', 'true', 'false', 'if', 'else']);\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}