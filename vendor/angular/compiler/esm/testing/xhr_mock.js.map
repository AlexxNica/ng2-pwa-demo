{"version":3,"file":"xhr_mock.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/testing/xhr_mock.ts"],"names":[],"mappings":"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","sourcesContent":["import {XHR} from '../index';\nimport {ListWrapper, Map} from '../src/facade/collection';\nimport {isBlank, normalizeBlank} from '../src/facade/lang';\nimport {BaseException} from '@angular/core';\nimport {PromiseCompleter, PromiseWrapper} from '../src/facade/async';\n\n/**\n * A mock implementation of {@link XHR} that allows outgoing requests to be mocked\n * and responded to within a single test, without going to the network.\n */\nexport class MockXHR extends XHR {\nprivate _expectations: _Expectation[] = [];\nprivate _definitions = new Map<string, string>();\nprivate _requests: _PendingRequest[] = [];\n/**\n * @param {?} url\n * @return {?}\n */\nget(url: string): Promise<string> {\n    var /** @type {?} */ request = new _PendingRequest(url);\n    this._requests.push(request);\n    return request.getPromise();\n  }\n/**\n *  Add an expectation for the given URL. Incoming requests will be checked against the next expectation (in FIFO order). The `verifyNoOutstandingExpectations` method can be used to check if any expectations have not yet been met. * The response given will be returned if the expectation matches.\n * @param {?} url\n * @param {?} response\n * @return {?}\n */\nexpect(url: string, response: string) {\n    var /** @type {?} */ expectation = new _Expectation(url, response);\n    this._expectations.push(expectation);\n  }\n/**\n *  Add a definition for the given URL to return the given response. Unlike expectations, definitions have no order and will satisfy any matching request at any time. Also unlike expectations, unused definitions do not cause `verifyNoOutstandingExpectations` to return an error.\n * @param {?} url\n * @param {?} response\n * @return {?}\n */\nwhen(url: string, response: string) { this._definitions.set(url, response); }\n/**\n *  Process pending requests and verify there are no outstanding expectations. Also fails if no requests are pending.\n * @return {?}\n */\nflush() {\n    if (this._requests.length === 0) {\n      throw new BaseException('No pending requests to flush');\n    }\n\n    do {\n      this._processRequest(this._requests.shift());\n    } while (this._requests.length > 0);\n\n    this.verifyNoOutstandingExpectations();\n  }\n/**\n *  Throw an exception if any expectations have not been satisfied.\n * @return {?}\n */\nverifyNoOutstandingExpectations() {\n    if (this._expectations.length === 0) return;\n\n    var /** @type {?} */ urls = [];\n    for (var /** @type {?} */ i = 0; i < this._expectations.length; i++) {\n      var /** @type {?} */ expectation = this._expectations[i];\n      urls.push(expectation.url);\n    }\n\n    throw new BaseException(`Unsatisfied requests: ${urls.join(', ')}`);\n  }\n/**\n * @param {?} request\n * @return {?}\n */\nprivate _processRequest(request: _PendingRequest) {\n    var /** @type {?} */ url = request.url;\n\n    if (this._expectations.length > 0) {\n      var /** @type {?} */ expectation = this._expectations[0];\n      if (expectation.url == url) {\n        ListWrapper.remove(this._expectations, expectation);\n        request.complete(expectation.response);\n        return;\n      }\n    }\n\n    if (this._definitions.has(url)) {\n      var /** @type {?} */ response = this._definitions.get(url);\n      request.complete(normalizeBlank(response));\n      return;\n    }\n\n    throw new BaseException(`Unexpected request ${url}`);\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nMockXHR.prototype._expectations;\n /** @type {?} */\nMockXHR.prototype._definitions;\n /** @type {?} */\nMockXHR.prototype._requests;\n  }\n\n}\n\nclass _PendingRequest {\n  url: string;\n  completer: PromiseCompleter<string>;\n/**\n * @param {?} url\n */\nconstructor(url) {\n    this.url = url;\n    this.completer = PromiseWrapper.completer();\n  }\n/**\n * @param {?} response\n * @return {?}\n */\ncomplete(response: string) {\n    if (isBlank(response)) {\n      this.completer.reject(`Failed to load ${this.url}`, null);\n    } else {\n      this.completer.resolve(response);\n    }\n  }\n/**\n * @return {?}\n */\ngetPromise(): Promise<string> { return this.completer.promise; }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\n_PendingRequest.prototype.url;\n /** @type {?} */\n_PendingRequest.prototype.completer;\n  }\n\n}\n\nclass _Expectation {\n  url: string;\n  response: string;\n/**\n * @param {?} url\n * @param {?} response\n */\nconstructor(url: string, response: string) {\n    this.url = url;\n    this.response = response;\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\n_Expectation.prototype.url;\n /** @type {?} */\n_Expectation.prototype.response;\n  }\n\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}