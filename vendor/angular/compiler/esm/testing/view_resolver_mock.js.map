{"version":3,"file":"view_resolver_mock.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/testing/view_resolver_mock.ts"],"names":[],"mappings":"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","sourcesContent":["import {Injectable, ViewMetadata, Type, BaseException} from '@angular/core';\nimport {ViewResolver} from '../index';\nimport {Map} from '../src/facade/collection';\nimport {isPresent, stringify, isBlank, isArray} from '../src/facade/lang';\nimport {resolveForwardRef} from '@angular/core';\nexport class MockViewResolver extends ViewResolver {\n  /** @internal */\n  _views = new Map<Type, ViewMetadata>();\n  /** @internal */\n  _inlineTemplates = new Map<Type, string>();\n  /** @internal */\n  _viewCache = new Map<Type, ViewMetadata>();\n  /** @internal */\n  _directiveOverrides = new Map<Type, Map<Type, Type>>();\n/**\n */\nconstructor() { super(); }\n/**\n *  Overrides the {@link ViewMetadata} for a component.\n * @param {?} component\n * @param {?} view\n * @return {?}\n */\nsetView(component: Type, view: ViewMetadata): void {\n    this._checkOverrideable(component);\n    this._views.set(component, view);\n  }\n/**\n *  Overrides the inline template for a component - other configuration remains unchanged.\n * @param {?} component\n * @param {?} template\n * @return {?}\n */\nsetInlineTemplate(component: Type, template: string): void {\n    this._checkOverrideable(component);\n    this._inlineTemplates.set(component, template);\n  }\n/**\n *  Overrides a directive from the component {@link ViewMetadata}.\n * @param {?} component\n * @param {?} from\n * @param {?} to\n * @return {?}\n */\noverrideViewDirective(component: Type, from: Type, to: Type): void {\n    this._checkOverrideable(component);\n\n    var /** @type {?} */ overrides = this._directiveOverrides.get(component);\n\n    if (isBlank(overrides)) {\n      overrides = new Map<Type, Type>();\n      this._directiveOverrides.set(component, overrides);\n    }\n\n    overrides.set(from, to);\n  }\n/**\n *  Returns the {@link ViewMetadata} for a component: - Set the {@link ViewMetadata} to the overridden view when it exists or fallback to the default `ViewResolver`, see `setView`. - Override the directives, see `overrideViewDirective`. - Override the @View definition, see `setInlineTemplate`.\n * @param {?} component\n * @return {?}\n */\nresolve(component: Type): ViewMetadata {\n    var /** @type {?} */ view = this._viewCache.get(component);\n    if (isPresent(view)) return view;\n\n    view = this._views.get(component);\n    if (isBlank(view)) {\n      view = super.resolve(component);\n    }\n\n    var /** @type {?} */ directives = [];\n    var /** @type {?} */ overrides = this._directiveOverrides.get(component);\n\n    if (isPresent(overrides) && isPresent(view.directives)) {\n      flattenArray(view.directives, directives);\n      overrides.forEach((to, from) => {\n        var /** @type {?} */ srcIndex = directives.indexOf(from);\n        if (srcIndex == -1) {\n          throw new BaseException(\n              `Overriden directive ${stringify(from)} not found in the template of ${stringify(component)}`);\n        }\n        directives[srcIndex] = to;\n      });\n      view = new ViewMetadata(\n          {template: view.template, templateUrl: view.templateUrl, directives: directives});\n    }\n\n    var /** @type {?} */ inlineTemplate = this._inlineTemplates.get(component);\n    if (isPresent(inlineTemplate)) {\n      view = new ViewMetadata(\n          {template: inlineTemplate, templateUrl: null, directives: view.directives});\n    }\n\n    this._viewCache.set(component, view);\n    return view;\n  }\n/**\n * @internal undefined * Once a component has been compiled, the AppProtoView is stored in the compiler cache. * Then it should not be possible to override the component configuration after the component has been compiled.\n * @param {?} component\n * @return {?}\n */\n_checkOverrideable(component: Type): void {\n    var /** @type {?} */ cached = this._viewCache.get(component);\n\n    if (isPresent(cached)) {\n      throw new BaseException(\n          `The component ${stringify(component)} has already been compiled, its configuration can not be changed`);\n    }\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @internal\n @type {?} */\nMockViewResolver.prototype._views;\n /** @internal\n @type {?} */\nMockViewResolver.prototype._inlineTemplates;\n /** @internal\n @type {?} */\nMockViewResolver.prototype._viewCache;\n /** @internal\n @type {?} */\nMockViewResolver.prototype._directiveOverrides;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */ static ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n];\n}\n/**\n * @param {?} tree\n * @param {?} out\n * @return {?}\n */\nfunction flattenArray(tree: any[], out: Array<Type | any[]>): void {\n  for (var /** @type {?} */ i = 0; i < tree.length; i++) {\n    var /** @type {?} */ item = resolveForwardRef(tree[i]);\n    if (isArray(item)) {\n      flattenArray(item, out);\n    } else {\n      out.push(item);\n    }\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}