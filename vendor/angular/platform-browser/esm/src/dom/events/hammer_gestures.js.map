{"version":3,"file":"hammer_gestures.js","sourceRoot":"","sources":["../../../../../../../modules/@angular/platform-browser/src/dom/events/hammer_gestures.ts"],"names":[],"mappings":"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","sourcesContent":["import {Injectable, Inject, OpaqueToken} from '@angular/core';\nimport {isPresent} from '../../../src/facade/lang';\nimport {BaseException} from '../../../src/facade/exceptions';\nimport {HammerGesturesPluginCommon} from './hammer_common';\n\nexport const /** @type {?} */ HAMMER_GESTURE_CONFIG: OpaqueToken =\n    /*@ts2dart_const*/ new OpaqueToken(\"HammerGestureConfig\");\n\nexport interface HammerInstance {\n  on(eventName: string, callback: Function): void;\n  off(eventName: string, callback: Function): void;\n}\nexport class HammerGestureConfig {\n  events: string[] = [];\n\n  overrides: {[key: string]: Object} = {};\n/**\n * @param {?} element\n * @return {?}\n */\nbuildHammer(element: HTMLElement): HammerInstance {\n    var /** @type {?} */ mc = new Hammer(element);\n\n    mc.get('pinch').set({enable: true});\n    mc.get('rotate').set({enable: true});\n\n    for (let /** @type {?} */ eventName in this.overrides) {\n      mc.get(eventName).set(this.overrides[eventName]);\n    }\n\n    return mc;\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nHammerGestureConfig.prototype.events;\n /** @type {?} */\nHammerGestureConfig.prototype.overrides;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n}\nexport class HammerGesturesPlugin extends HammerGesturesPluginCommon {\n/**\n * @param {?} _config\n */\nconstructor(\nprivate _config: HammerGestureConfig) { super(); }\n/**\n * @param {?} eventName\n * @return {?}\n */\nsupports(eventName: string): boolean {\n    if (!super.supports(eventName) && !this.isCustomEvent(eventName)) return false;\n\n    if (!isPresent(window['Hammer'])) {\n      throw new BaseException(`Hammer.js is not loaded, can not bind ${eventName} event`);\n    }\n\n    return true;\n  }\n/**\n * @param {?} element\n * @param {?} eventName\n * @param {?} handler\n * @return {?}\n */\naddEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    var /** @type {?} */ zone = this.manager.getZone();\n    eventName = eventName.toLowerCase();\n\n    return zone.runOutsideAngular(() => {\n      // Creating the manager bind events, must be done outside of angular\n      var /** @type {?} */ mc = this._config.buildHammer(element);\n      var /** @type {?} */ callback = function(eventObj) { zone.runGuarded(function() { handler(eventObj); }); };\n      mc.on(eventName, callback);\n      return () => { mc.off(eventName, callback); };\n    });\n  }\n/**\n * @param {?} eventName\n * @return {?}\n */\nisCustomEvent(eventName: string): boolean { return this._config.events.indexOf(eventName) > -1; }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nHammerGesturesPlugin.prototype._config;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */ static ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: HammerGestureConfig, decorators: [{ type: Inject, args: [HAMMER_GESTURE_CONFIG, ] }, ]},\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}