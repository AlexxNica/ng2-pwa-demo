{"version":3,"file":"dom_events.js","sourceRoot":"","sources":["../../../../../../../modules/@angular/platform-browser/src/dom/events/dom_events.ts"],"names":[],"mappings":";AAAA,uBAAyB,eAAe,CAAC,CAAA;AAEzC,8BAAqB,gBAAgB,CAAC,CAAA;AACtC,gCAAiC,iBAAiB,CAAC,CAAA;AACnD,8BAAqC,kCAAkB;IACvD;;;OAGG;IACH,QAAQ,CAAC,SAAiB,IAAa,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;IACrD;;;;;OAKG;IACH,gBAAgB,CAAC,OAAoB,EAAE,SAAiB,EAAE,OAAiB;QACvE,IAAI,gBAAgB,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;QACnD,IAAI,gBAAgB,CAAC,cAAc,GAAG,CAAC,KAAK,KAAK,IAAI,CAAC,UAAU,CAAC,MAAM,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;QACvF,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,iBAAiB,CAC3C,MAAM,oBAAM,EAAE,CAAC,WAAW,CAAC,OAAO,EAAE,SAAS,EAAE,cAAc,CAAC,CAAC,CAAC;IACtE,CAAC;IACH;;;;;OAKG;IACH,sBAAsB,CAAC,MAAc,EAAE,SAAiB,EAAE,OAAiB;QACvE,IAAI,gBAAgB,CAAC,OAAO,GAAG,oBAAM,EAAE,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;QACrE,IAAI,gBAAgB,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;QACnD,IAAI,gBAAgB,CAAC,cAAc,GAAG,CAAC,KAAK,KAAK,IAAI,CAAC,UAAU,CAAC,MAAM,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;QACvF,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,iBAAiB,CAC3C,MAAM,oBAAM,EAAE,CAAC,WAAW,CAAC,OAAO,EAAE,SAAS,EAAE,cAAc,CAAC,CAAC,CAAC;IACtE,CAAC;AAIH,CAAC;AAHM,0BAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,iBAAU,EAAE;CACnB,CAAC;AAjCW,uBAAe,kBAkC3B,CAAA","sourcesContent":["import {Injectable} from '@angular/core';\n\nimport {getDOM} from '../dom_adapter';\nimport {EventManagerPlugin} from './event_manager';\nexport class DomEventsPlugin extends EventManagerPlugin {\n/**\n * @param {?} eventName\n * @return {?}\n */\nsupports(eventName: string): boolean { return true; }\n/**\n * @param {?} element\n * @param {?} eventName\n * @param {?} handler\n * @return {?}\n */\naddEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    var /** @type {?} */ zone = this.manager.getZone();\n    var /** @type {?} */ outsideHandler = (event) => zone.runGuarded(() => handler(event));\n    return this.manager.getZone().runOutsideAngular(\n        () => getDOM().onAndCancel(element, eventName, outsideHandler));\n  }\n/**\n * @param {?} target\n * @param {?} eventName\n * @param {?} handler\n * @return {?}\n */\naddGlobalEventListener(target: string, eventName: string, handler: Function): Function {\n    var /** @type {?} */ element = getDOM().getGlobalEventTarget(target);\n    var /** @type {?} */ zone = this.manager.getZone();\n    var /** @type {?} */ outsideHandler = (event) => zone.runGuarded(() => handler(event));\n    return this.manager.getZone().runOutsideAngular(\n        () => getDOM().onAndCancel(element, eventName, outsideHandler));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}