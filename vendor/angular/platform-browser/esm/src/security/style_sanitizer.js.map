{"version":3,"file":"style_sanitizer.js","sourceRoot":"","sources":["../../../../../../modules/@angular/platform-browser/src/security/style_sanitizer.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;AACH,MAAM,gBAAgB,CAAC,gBAAgB,GAAG,wDAAwD,CAAC;AACnG;;;;GAIG;AACH,2BAA2B,KAAa;IACtC,IAAI,gBAAgB,CAAC,aAAa,GAAG,IAAI,CAAC;IAC1C,IAAI,gBAAgB,CAAC,aAAa,GAAG,IAAI,CAAC;IAC1C,GAAG,CAAC,CAAC,IAAI,gBAAgB,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QACvD,IAAI,gBAAgB,CAAC,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QACzC,EAAE,CAAC,CAAC,CAAC,KAAK,IAAI,IAAI,aAAa,CAAC,CAAC,CAAC;YAChC,aAAa,GAAG,CAAC,aAAa,CAAC;QACjC,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,aAAa,CAAC,CAAC,CAAC;YACtC,aAAa,GAAG,CAAC,aAAa,CAAC;QACjC,CAAC;IACH,CAAC;IACD,MAAM,CAAC,aAAa,IAAI,aAAa,CAAC;AACxC,CAAC;AACD;;;;GAIG;AACH,uBAA8B,KAAa;IACzC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAE,oCAAoC;IAC5D,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,gBAAgB,CAAC,IAAI,iBAAiB,CAAC,KAAK,CAAC,CAAC;QAAC,MAAM,CAAC,KAAK,CAAC;IAC5E,MAAM,CAAC,QAAQ,CAAC;AAClB,CAAC;AAJe,qBAAa,gBAI5B,CAAA","sourcesContent":["/**\n * Regular expression for safe style values.\n *\n * Quotes (\" and ') are allowed, but a check must be done elsewhere to ensure\n * they're balanced.\n *\n * ',' allows multiple values to be assigned to the same property\n * (e.g. background-attachment or font-family) and hence could allow\n * multiple values to get injected, but that should pose no risk of XSS.\n *\n * The rgb() and rgba() expression checks only for XSS safety, not for CSS\n * validity.\n *\n * This regular expression was taken from the Closure sanitization library.\n */\nconst /** @type {?} */ SAFE_STYLE_VALUE = /^([-,.\"'%_!# a-zA-Z0-9]+|(?:rgb|hsl)a?\\([0-9.%, ]+\\))$/;\n/**\n *  Checks that quotes (\" and ') are properly balanced inside a string. Assumes that neither escape (\\) nor any other character that could result in breaking out of a string parsing context are allowed; see http://www.w3.org/TR/css3-syntax/#string-token-diagram. * This code was taken from the Closure sanitization library.\n * @param {?} value\n * @return {?}\n */\nfunction hasBalancedQuotes(value: string) {\n  let /** @type {?} */ outsideSingle = true;\n  let /** @type {?} */ outsideDouble = true;\n  for (let /** @type {?} */ i = 0; i < value.length; i++) {\n    let /** @type {?} */ c = value.charAt(i);\n    if (c === '\\'' && outsideDouble) {\n      outsideSingle = !outsideSingle;\n    } else if (c === '\"' && outsideSingle) {\n      outsideDouble = !outsideDouble;\n    }\n  }\n  return outsideSingle && outsideDouble;\n}\n/**\n *  Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single value) and returns a value that is safe to use in a browser environment.\n * @param {?} value\n * @return {?}\n */\nexport function sanitizeStyle(value: string): string {\n  value = String(value);  // Make sure it's actually a string.\n  if (value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) return value;\n  return 'unsafe';\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}