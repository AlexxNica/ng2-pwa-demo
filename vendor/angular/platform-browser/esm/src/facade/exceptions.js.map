{"version":3,"file":"exceptions.js","sourceRoot":"","sources":["../../../../../../modules/@angular/platform-browser/src/facade/exceptions.ts"],"names":[],"mappings":";AAAA,yCAAmC,0BAA0B,CAAC,CAAA;AAC9D,oCAA+B,qBAAqB,CAAC,CAAA;AAErD,kCAA+B,qBAAqB,CAAC;AAA7C,gEAA6C;AAErD,4BAAmC,KAAK;IAExC;;OAEG;IACH,YAAmB,OAAO,GAAW,IAAI;QACrC,MAAM,OAAO,CAAC,CAAC;QADA,YAAO,GAAP,OAAO,CAAe;QAErC,IAAI,CAAC,KAAK,GAAG,CAAM,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC;IAC/C,CAAC;IACH;;OAEG;IACH,QAAQ,KAAa,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;IAEzC,OAAO,8BAA8B;QACtC,gBAAgB;QACjB,aAAa,CAAC,SAAS,CAAC,KAAK,CAAC;QAC7B,gBAAgB;QACjB,aAAa,CAAC,SAAS,CAAC,OAAO,CAAC;IAC9B,CAAC;AAEH,CAAC;AArBY,qBAAa,gBAqBzB,CAAA;AAED;;GAEG;AACH,+BAAsC,6CAAoB;IAE1D;;;;;OAKG;IACH,YAAoB,eAAuB,EACnC,kBAAkB,EAClB,cAAe,EACf,QAAS;QACb,MAAM,eAAe,CAAC,CAAC;QAJP,oBAAe,GAAf,eAAe,CAAQ;QACnC,uBAAkB,GAAlB,kBAAkB,CAAA;QAClB,mBAAc,GAAd,cAAc,CAAC;QACf,aAAQ,GAAR,QAAQ,CAAC;QAEb,IAAI,CAAC,aAAa,GAAG,CAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC,KAAK,CAAC;IAC/D,CAAC;IAED,IAAI,cAAc,KAAa,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;IAE7D,IAAI,YAAY,KAAU,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;IAGtD,IAAI,iBAAiB,KAAU,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC;IAEhE,IAAI,aAAa,KAAU,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;IAGxD,IAAI,OAAO,KAAU,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;IAE5C,IAAI,OAAO,KAAa,MAAM,CAAC,oCAAgB,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC5E;;OAEG;IACH,QAAQ,KAAa,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;IAEzC,OAAO,8BAA8B;QACtC,gBAAgB;QACjB,gBAAgB,CAAC,SAAS,CAAC,aAAa,CAAC;QACxC,gBAAgB;QACjB,gBAAgB,CAAC,SAAS,CAAC,eAAe,CAAC;QAC1C,gBAAgB;QACjB,gBAAgB,CAAC,SAAS,CAAC,kBAAkB,CAAC;QAC7C,gBAAgB;QACjB,gBAAgB,CAAC,SAAS,CAAC,cAAc,CAAC;QACzC,gBAAgB;QACjB,gBAAgB,CAAC,SAAS,CAAC,QAAQ,CAAC;IAClC,CAAC;AAEH,CAAC;AA/CY,wBAAgB,mBA+C5B,CAAA;AACD;;;GAGG;AACH,uBAA8B,OAAgB;IAC5C,MAAM,CAAC,IAAI,SAAS,CAAC,OAAO,CAAC,CAAC;AAChC,CAAC;AAFe,qBAAa,gBAE5B,CAAA;AACD;;GAEG;AACH;IACE,MAAM,IAAI,aAAa,CAAC,eAAe,CAAC,CAAC;AAC3C,CAAC;AAFe,qBAAa,gBAE5B,CAAA","sourcesContent":["import {BaseWrappedException} from './base_wrapped_exception';\nimport {ExceptionHandler} from './exception_handler';\n\nexport {ExceptionHandler} from './exception_handler';\n\nexport class BaseException extends Error {\npublic stack: any;\n/**\n * @param {?=} message\n */\nconstructor(public message: string = \"--\") {\n    super(message);\n    this.stack = (<any>new Error(message)).stack;\n  }\n/**\n * @return {?}\n */\ntoString(): string { return this.message; }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nBaseException.prototype.stack;\n /** @type {?} */\nBaseException.prototype.message;\n  }\n\n}\n\n/**\n * Wraps an exception and provides additional context or information.\n */\nexport class WrappedException extends BaseWrappedException {\nprivate _wrapperStack: any;\n/**\n * @param {?} _wrapperMessage\n * @param {?} _originalException\n * @param {?=} _originalStack\n * @param {?=} _context\n */\nconstructor(private _wrapperMessage: string,\nprivate _originalException,\nprivate _originalStack?,\nprivate _context?) {\n    super(_wrapperMessage);\n    this._wrapperStack = (<any>new Error(_wrapperMessage)).stack;\n  }\n\n  get wrapperMessage(): string { return this._wrapperMessage; }\n\n  get wrapperStack(): any { return this._wrapperStack; }\n\n\n  get originalException(): any { return this._originalException; }\n\n  get originalStack(): any { return this._originalStack; }\n\n\n  get context(): any { return this._context; }\n\n  get message(): string { return ExceptionHandler.exceptionToString(this); }\n/**\n * @return {?}\n */\ntoString(): string { return this.message; }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nWrappedException.prototype._wrapperStack;\n /** @type {?} */\nWrappedException.prototype._wrapperMessage;\n /** @type {?} */\nWrappedException.prototype._originalException;\n /** @type {?} */\nWrappedException.prototype._originalStack;\n /** @type {?} */\nWrappedException.prototype._context;\n  }\n\n}\n/**\n * @param {?=} message\n * @return {?}\n */\nexport function makeTypeError(message?: string): Error {\n  return new TypeError(message);\n}\n/**\n * @return {?}\n */\nexport function unimplemented(): any {\n  throw new BaseException('unimplemented');\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}