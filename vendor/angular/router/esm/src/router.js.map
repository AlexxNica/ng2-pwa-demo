{"version":3,"file":"router.js","sourceRoot":"","sources":["../../../../../modules/@angular/router/src/router.ts"],"names":[],"mappings":"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","sourcesContent":["import {OnInit, provide, ReflectiveInjector, ComponentResolver} from '@angular/core';\nimport {RouterOutlet} from './directives/router_outlet';\nimport {Type, isBlank, isPresent} from './facade/lang';\nimport {ListWrapper} from './facade/collection';\nimport {EventEmitter, Observable, PromiseWrapper, ObservableWrapper} from './facade/async';\nimport {StringMapWrapper} from './facade/collection';\nimport {BaseException} from '@angular/core';\nimport {RouterUrlSerializer} from './router_url_serializer';\nimport {CanDeactivate} from './interfaces';\nimport {recognize} from './recognize';\nimport {Location} from '@angular/common';\nimport {link} from './link';\n\nimport {\n  routeSegmentComponentFactory,\n  RouteSegment,\n  UrlTree,\n  RouteTree,\n  rootNode,\n  TreeNode,\n  UrlSegment,\n  serializeRouteSegmentTree,\n  createEmptyRouteTree\n} from './segments';\nimport {hasLifecycleHook} from './lifecycle_reflector';\nimport {DEFAULT_OUTLET_NAME} from './constants';\n\n/**\n * @internal\n */\nexport class RouterOutletMap {\n  /** @internal */\n  _outlets: {[name: string]: RouterOutlet} = {};\n/**\n * @param {?} name\n * @param {?} outlet\n * @return {?}\n */\nregisterOutlet(name: string, outlet: RouterOutlet): void { this._outlets[name] = outlet; }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @internal\n @type {?} */\nRouterOutletMap.prototype._outlets;\n  }\n\n}\n\n/**\n * The `Router` is responsible for mapping URLs to components.\n *\n * You can see the state of the router by inspecting the read-only fields `router.urlTree`\n * and `router.routeTree`.\n */\nexport class Router {\nprivate _routeTree: RouteTree;\nprivate _urlTree: UrlTree;\nprivate _locationSubscription: any;\nprivate _changes: EventEmitter<void> = new EventEmitter<void>();\n/**\n * @internal\n * @param {?} _rootComponent\n * @param {?} _rootComponentType\n * @param {?} _componentResolver\n * @param {?} _urlSerializer\n * @param {?} _routerOutletMap\n * @param {?} _location\n */\nconstructor(private _rootComponent: Object,\nprivate _rootComponentType: Type,\nprivate _componentResolver: ComponentResolver,\nprivate _urlSerializer: RouterUrlSerializer,\nprivate _routerOutletMap: RouterOutletMap,\nprivate _location: Location) {\n    this._routeTree = createEmptyRouteTree(this._rootComponentType);\n    this._setUpLocationChangeListener();\n    this.navigateByUrl(this._location.path());\n  }\n\n  /**\n   * Returns the current url tree.\n   */\n  get urlTree(): UrlTree { return this._urlTree; }\n\n  /**\n   * Returns the current route tree.\n   */\n  get routeTree(): RouteTree { return this._routeTree; }\n\n  /**\n   * An observable or url changes from the router.\n   */\n  get changes(): Observable<void> { return this._changes; }\n/**\n *  Navigate based on the provided url. This navigation is always absolute. * ### Usage * ``` router.navigateByUrl(\"/team/33/user/11\"); ```\n * @param {?} url\n * @return {?}\n */\nnavigateByUrl(url: string): Promise<void> {\n    return this._navigate(this._urlSerializer.parse(url));\n  }\n/**\n *  Navigate based on the provided array of commands and a starting point. If no segment is provided, the navigation is absolute. * ### Usage * ``` router.navigate(['team', 33, 'team', '11], segment); ```\n * @param {?} commands\n * @param {?=} segment\n * @return {?}\n */\nnavigate(commands: any[], segment?: RouteSegment): Promise<void> {\n    return this._navigate(this.createUrlTree(commands, segment));\n  }\n/**\n * @internal\n * @return {?}\n */\ndispose(): void { ObservableWrapper.dispose(this._locationSubscription); }\n/**\n *  Applies an array of commands to the current url tree and creates a new url tree. * When given a segment, applies the given commands starting from the segment. When not given a segment, applies the given command starting from the root. * ### Usage * ``` // create /team/33/user/11 router.createUrlTree(['/team', 33, 'user', 11]); * // create /team/33;expand=true/user/11 router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]); * // you can collapse static fragments like this router.createUrlTree(['/team/33/user', userId]); * // assuming the current url is `/team/33/user/11` and the segment points to `user/11` * // navigate to /team/33/user/11/details router.createUrlTree(['details'], segment); * // navigate to /team/33/user/22 router.createUrlTree(['../22'], segment); * // navigate to /team/44/user/22 router.createUrlTree(['../../team/44/user/22'], segment); ```\n * @param {?} commands\n * @param {?=} segment\n * @return {?}\n */\ncreateUrlTree(commands: any[], segment?: RouteSegment): UrlTree {\n    let /** @type {?} */ s = isPresent(segment) ? segment : this._routeTree.root;\n    return link(s, this._routeTree, this.urlTree, commands);\n  }\n/**\n *  Serializes a {@link UrlTree} into a string.\n * @param {?} url\n * @return {?}\n */\nserializeUrl(url: UrlTree): string { return this._urlSerializer.serialize(url); }\n/**\n * @return {?}\n */\nprivate _setUpLocationChangeListener(): void {\n    this._locationSubscription = this._location.subscribe(\n        (change) => { this._navigate(this._urlSerializer.parse(change['url'])); });\n  }\n/**\n * @param {?} url\n * @return {?}\n */\nprivate _navigate(url: UrlTree): Promise<void> {\n    this._urlTree = url;\n    return recognize(this._componentResolver, this._rootComponentType, url, this._routeTree)\n        .then(currTree => {\n          return new _ActivateSegments(currTree, this._routeTree)\n              .activate(this._routerOutletMap, this._rootComponent)\n              .then(updated => {\n                if (updated) {\n                  this._routeTree = currTree;\n                  this._location.go(this._urlSerializer.serialize(this._urlTree));\n                  this._changes.emit(null);\n                }\n              });\n        });\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nRouter.prototype._routeTree;\n /** @type {?} */\nRouter.prototype._urlTree;\n /** @type {?} */\nRouter.prototype._locationSubscription;\n /** @type {?} */\nRouter.prototype._changes;\n /** @type {?} */\nRouter.prototype._rootComponent;\n /** @type {?} */\nRouter.prototype._rootComponentType;\n /** @type {?} */\nRouter.prototype._componentResolver;\n /** @type {?} */\nRouter.prototype._urlSerializer;\n /** @type {?} */\nRouter.prototype._routerOutletMap;\n /** @type {?} */\nRouter.prototype._location;\n  }\n\n}\n\n\nclass _ActivateSegments {\nprivate deactivations: Object[][] = [];\nprivate performMutation: boolean = true;\n/**\n * @param {?} currTree\n * @param {?} prevTree\n */\nconstructor(private currTree: RouteTree,\nprivate prevTree: RouteTree) {}\n/**\n * @param {?} parentOutletMap\n * @param {?} rootComponent\n * @return {?}\n */\nactivate(parentOutletMap: RouterOutletMap, rootComponent: Object): Promise<boolean> {\n    let /** @type {?} */ prevRoot = isPresent(this.prevTree) ? rootNode(this.prevTree) : null;\n    let /** @type {?} */ currRoot = rootNode(this.currTree);\n\n    return this.canDeactivate(currRoot, prevRoot, parentOutletMap, rootComponent)\n        .then(res => {\n          this.performMutation = true;\n          if (res) {\n            this.activateChildSegments(currRoot, prevRoot, parentOutletMap, [rootComponent]);\n          }\n          return res;\n        });\n  }\n/**\n * @param {?} currRoot\n * @param {?} prevRoot\n * @param {?} outletMap\n * @param {?} rootComponent\n * @return {?}\n */\nprivate canDeactivate(currRoot: TreeNode<RouteSegment>, prevRoot: TreeNode<RouteSegment>,\n                        outletMap: RouterOutletMap, rootComponent: Object): Promise<boolean> {\n    this.performMutation = false;\n    this.activateChildSegments(currRoot, prevRoot, outletMap, [rootComponent]);\n\n    let /** @type {?} */ allPaths = PromiseWrapper.all(this.deactivations.map(r => this.checkCanDeactivatePath(r)));\n    return allPaths.then((values: boolean[]) => values.filter(v => v).length === values.length);\n  }\n/**\n * @param {?} path\n * @return {?}\n */\nprivate checkCanDeactivatePath(path: Object[]): Promise<boolean> {\n    let /** @type {?} */ curr = PromiseWrapper.resolve(true);\n    for (let /** @type {?} */ p of ListWrapper.reversed(path)) {\n      curr = curr.then(_ => {\n        if (hasLifecycleHook(\"routerCanDeactivate\", p)) {\n          return ( /** @type {?} */((<CanDeactivate>p))).routerCanDeactivate(this.prevTree, this.currTree);\n        } else {\n          return _;\n        }\n      });\n    }\n    return curr;\n  }\n/**\n * @param {?} currNode\n * @param {?} prevNode\n * @param {?} outletMap\n * @param {?} components\n * @return {?}\n */\nprivate activateChildSegments(currNode: TreeNode<RouteSegment>, prevNode: TreeNode<RouteSegment>,\n                                outletMap: RouterOutletMap, components: Object[]): void {\n    let /** @type {?} */ prevChildren = isPresent(prevNode) ?\n                           prevNode.children.reduce(\n                               (m, c) => {\n                                 m[c.value.outlet] = c;\n                                 return m;\n                               },\n                               {}) :\n                           {};\n\n    currNode.children.forEach(c => {\n      this.activateSegments(c, prevChildren[c.value.outlet], outletMap, components);\n      StringMapWrapper.delete(prevChildren, c.value.outlet);\n    });\n\n    StringMapWrapper.forEach(prevChildren,\n                             (v, k) => this.deactivateOutlet(outletMap._outlets[k], components));\n  }\n/**\n * @param {?} currNode\n * @param {?} prevNode\n * @param {?} parentOutletMap\n * @param {?} components\n * @return {?}\n */\nactivateSegments(currNode: TreeNode<RouteSegment>, prevNode: TreeNode<RouteSegment>,\n                   parentOutletMap: RouterOutletMap, components: Object[]): void {\n    let /** @type {?} */ curr = currNode.value;\n    let /** @type {?} */ prev = isPresent(prevNode) ? prevNode.value : null;\n    let /** @type {?} */ outlet = this.getOutlet(parentOutletMap, currNode.value);\n\n    if (curr === prev) {\n      this.activateChildSegments(currNode, prevNode, outlet.outletMap,\n                                 components.concat([outlet.component]));\n    } else {\n      this.deactivateOutlet(outlet, components);\n      if (this.performMutation) {\n        let /** @type {?} */ outletMap = new RouterOutletMap();\n        let /** @type {?} */ component = this.activateNewSegments(outletMap, curr, prev, outlet);\n        this.activateChildSegments(currNode, prevNode, outletMap, components.concat([component]));\n      }\n    }\n  }\n/**\n * @param {?} outletMap\n * @param {?} curr\n * @param {?} prev\n * @param {?} outlet\n * @return {?}\n */\nprivate activateNewSegments(outletMap: RouterOutletMap, curr: RouteSegment, prev: RouteSegment,\n                              outlet: RouterOutlet): Object {\n    let /** @type {?} */ resolved = ReflectiveInjector.resolve(\n        [provide(RouterOutletMap, {useValue: outletMap}), provide(RouteSegment, {useValue: curr})]);\n    let /** @type {?} */ ref = outlet.activate(routeSegmentComponentFactory(curr), resolved, outletMap);\n    if (hasLifecycleHook(\"routerOnActivate\", ref.instance)) {\n      ref.instance.routerOnActivate(curr, prev, this.currTree, this.prevTree);\n    }\n    return ref.instance;\n  }\n/**\n * @param {?} outletMap\n * @param {?} segment\n * @return {?}\n */\nprivate getOutlet(outletMap: RouterOutletMap, segment: RouteSegment): RouterOutlet {\n    let /** @type {?} */ outlet = outletMap._outlets[segment.outlet];\n    if (isBlank(outlet)) {\n      if (segment.outlet == DEFAULT_OUTLET_NAME) {\n        throw new BaseException(`Cannot find default outlet`);\n      } else {\n        throw new BaseException(`Cannot find the outlet ${segment.outlet}`);\n      }\n    }\n    return outlet;\n  }\n/**\n * @param {?} outlet\n * @param {?} components\n * @return {?}\n */\nprivate deactivateOutlet(outlet: RouterOutlet, components: Object[]): void {\n    if (isPresent(outlet) && outlet.isActivated) {\n      StringMapWrapper.forEach(outlet.outletMap._outlets,\n                               (v, k) => this.deactivateOutlet(v, components));\n      if (this.performMutation) {\n        outlet.deactivate();\n      } else {\n        this.deactivations.push(components.concat([outlet.component]));\n      }\n    }\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\n_ActivateSegments.prototype.deactivations;\n /** @type {?} */\n_ActivateSegments.prototype.performMutation;\n /** @type {?} */\n_ActivateSegments.prototype.currTree;\n /** @type {?} */\n_ActivateSegments.prototype.prevTree;\n  }\n\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}