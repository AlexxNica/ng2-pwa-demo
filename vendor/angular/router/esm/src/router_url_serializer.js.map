{"version":3,"file":"router_url_serializer.js","sourceRoot":"","sources":["../../../../../modules/@angular/router/src/router_url_serializer.ts"],"names":[],"mappings":"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","sourcesContent":["import {UrlSegment, Tree, TreeNode, rootNode, UrlTree} from './segments';\nimport {BaseException} from '@angular/core';\nimport {isBlank, isPresent, RegExpWrapper} from './facade/lang';\n\n/**\n * Defines a way to serialize/deserialize a url tree.\n */\nexport abstract class RouterUrlSerializer {\n  /**\n   * Parse a url into a {@Link UrlTree}\n   */\n  abstract parse(url: string): UrlTree;\n\n  /**\n   * Converts a {@Link UrlTree} into a url\n   */\n  abstract serialize(tree: UrlTree): string;\n}\n\n/**\n * A default implementation of the serialization.\n */\nexport class DefaultRouterUrlSerializer extends RouterUrlSerializer {\n/**\n * @param {?} url\n * @return {?}\n */\nparse(url: string): UrlTree {\n    let /** @type {?} */ root = new _UrlParser().parse(url);\n    return new UrlTree(root);\n  }\n/**\n * @param {?} tree\n * @return {?}\n */\nserialize(tree: UrlTree): string { return _serializeUrlTreeNode(rootNode(tree)); }\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction _serializeUrlTreeNode(node: TreeNode<UrlSegment>): string {\n  return `${node.value}${_serializeChildren(node)}`;\n}\n/**\n * @param {?} nodes\n * @return {?}\n */\nfunction _serializeUrlTreeNodes(nodes: TreeNode<UrlSegment>[]): string {\n  let /** @type {?} */ main = nodes[0].value.toString();\n  let /** @type {?} */ auxNodes = nodes.slice(1);\n  let /** @type {?} */ aux = auxNodes.length > 0 ? `(${auxNodes.map(_serializeUrlTreeNode).join(\"//\")})` : \"\";\n  let /** @type {?} */ children = _serializeChildren(nodes[0]);\n  return `${main}${aux}${children}`;\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction _serializeChildren(node: TreeNode<UrlSegment>): string {\n  if (node.children.length > 0) {\n    return `/${_serializeUrlTreeNodes(node.children)}`;\n  } else {\n    return \"\";\n  }\n}\n\nvar /** @type {?} */ SEGMENT_RE = RegExpWrapper.create('^[^\\\\/\\\\(\\\\)\\\\?;=&#]+');\n/**\n * @param {?} str\n * @return {?}\n */\nfunction matchUrlSegment(str: string): string {\n  var /** @type {?} */ match = RegExpWrapper.firstMatch(SEGMENT_RE, str);\n  return isPresent(match) ? match[0] : '';\n}\nvar /** @type {?} */ QUERY_PARAM_VALUE_RE = RegExpWrapper.create('^[^\\\\(\\\\)\\\\?;&#]+');\n/**\n * @param {?} str\n * @return {?}\n */\nfunction matchUrlQueryParamValue(str: string): string {\n  var /** @type {?} */ match = RegExpWrapper.firstMatch(QUERY_PARAM_VALUE_RE, str);\n  return isPresent(match) ? match[0] : '';\n}\n\nclass _UrlParser {\nprivate _remaining: string;\n/**\n * @param {?} str\n * @return {?}\n */\npeekStartsWith(str: string): boolean { return this._remaining.startsWith(str); }\n/**\n * @param {?} str\n * @return {?}\n */\ncapture(str: string): void {\n    if (!this._remaining.startsWith(str)) {\n      throw new BaseException(`Expected \"${str}\".`);\n    }\n    this._remaining = this._remaining.substring(str.length);\n  }\n/**\n * @param {?} url\n * @return {?}\n */\nparse(url: string): TreeNode<UrlSegment> {\n    this._remaining = url;\n    if (url == '' || url == '/') {\n      return new TreeNode<UrlSegment>(new UrlSegment('', {}, null), []);\n    } else {\n      return this.parseRoot();\n    }\n  }\n/**\n * @return {?}\n */\nparseRoot(): TreeNode<UrlSegment> {\n    let /** @type {?} */ segments = this.parseSegments();\n    return new TreeNode<UrlSegment>(new UrlSegment('', {}, null), segments);\n  }\n/**\n * @param {?=} outletName\n * @return {?}\n */\nparseSegments(outletName: string = null): TreeNode<UrlSegment>[] {\n    if (this._remaining.length == 0) {\n      return [];\n    }\n    if (this.peekStartsWith('/')) {\n      this.capture('/');\n    }\n    var /** @type {?} */ path = matchUrlSegment(this._remaining);\n    this.capture(path);\n\n\n    if (path.indexOf(\":\") > -1) {\n      let /** @type {?} */ parts = path.split(\":\");\n      outletName = parts[0];\n      path = parts[1];\n    }\n\n    var /** @type {?} */ matrixParams: {[key: string]: any} = {};\n    if (this.peekStartsWith(';')) {\n      matrixParams = this.parseMatrixParams();\n    }\n\n    var /** @type {?} */ aux = [];\n    if (this.peekStartsWith('(')) {\n      aux = this.parseAuxiliaryRoutes();\n    }\n\n    var /** @type {?} */ children: TreeNode<UrlSegment>[] = [];\n    if (this.peekStartsWith('/') && !this.peekStartsWith('//')) {\n      this.capture('/');\n      children = this.parseSegments();\n    }\n\n    let /** @type {?} */ segment = new UrlSegment(path, matrixParams, outletName);\n    let /** @type {?} */ node = new TreeNode<UrlSegment>(segment, children);\n    return [node].concat(aux);\n  }\n/**\n * @return {?}\n */\nparseQueryParams(): {[key: string]: any} {\n    var /** @type {?} */ params: {[key: string]: any} = {};\n    this.capture('?');\n    this.parseQueryParam(params);\n    while (this._remaining.length > 0 && this.peekStartsWith('&')) {\n      this.capture('&');\n      this.parseQueryParam(params);\n    }\n    return params;\n  }\n/**\n * @return {?}\n */\nparseMatrixParams(): {[key: string]: any} {\n    var /** @type {?} */ params: {[key: string]: any} = {};\n    while (this._remaining.length > 0 && this.peekStartsWith(';')) {\n      this.capture(';');\n      this.parseParam(params);\n    }\n    return params;\n  }\n/**\n * @param {?} params\n * @return {?}\n */\nparseParam(params: {[key: string]: any}): void {\n    var /** @type {?} */ key = matchUrlSegment(this._remaining);\n    if (isBlank(key)) {\n      return;\n    }\n    this.capture(key);\n    var /** @type {?} */ value: any = \"true\";\n    if (this.peekStartsWith('=')) {\n      this.capture('=');\n      var /** @type {?} */ valueMatch = matchUrlSegment(this._remaining);\n      if (isPresent(valueMatch)) {\n        value = valueMatch;\n        this.capture(value);\n      }\n    }\n\n    params[key] = value;\n  }\n/**\n * @param {?} params\n * @return {?}\n */\nparseQueryParam(params: {[key: string]: any}): void {\n    var /** @type {?} */ key = matchUrlSegment(this._remaining);\n    if (isBlank(key)) {\n      return;\n    }\n    this.capture(key);\n    var /** @type {?} */ value: any = \"true\";\n    if (this.peekStartsWith('=')) {\n      this.capture('=');\n      var /** @type {?} */ valueMatch = matchUrlQueryParamValue(this._remaining);\n      if (isPresent(valueMatch)) {\n        value = valueMatch;\n        this.capture(value);\n      }\n    }\n\n    params[key] = value;\n  }\n/**\n * @return {?}\n */\nparseAuxiliaryRoutes(): TreeNode<UrlSegment>[] {\n    var /** @type {?} */ segments = [];\n    this.capture('(');\n\n    while (!this.peekStartsWith(')') && this._remaining.length > 0) {\n      segments = segments.concat(this.parseSegments(\"aux\"));\n      if (this.peekStartsWith('//')) {\n        this.capture('//');\n      }\n    }\n    this.capture(')');\n\n    return segments;\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\n_UrlParser.prototype._remaining;\n  }\n\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}