{"version":3,"file":"router_link.js","sourceRoot":"","sources":["../../../../../../modules/@angular/router/src/directives/router_link.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ResolvedReflectiveProvider,\n  Directive,\n  DynamicComponentLoader,\n  ViewContainerRef,\n  Attribute,\n  ComponentRef,\n  ComponentFactory,\n  ReflectiveInjector,\n  OnInit,\n  HostListener,\n  HostBinding,\n  Input,\n  OnDestroy,\n  Optional\n} from '@angular/core';\nimport {RouterOutletMap, Router} from '../router';\nimport {RouteSegment, UrlSegment, Tree} from '../segments';\nimport {isString, isArray, isPresent} from '../facade/lang';\nimport {ObservableWrapper} from '../facade/async';\nexport class RouterLink implements OnDestroy { target: string;\nprivate _commands: any[] = [];\nprivate _subscription: any; href: string; isActive: boolean = false;\n/**\n * @param {?} _routeSegment\n * @param {?} _router\n */\nconstructor(private _routeSegment: RouteSegment,\nprivate _router: Router) {\n    // because auxiliary links take existing primary and auxiliary routes into account,\n    // we need to update the link whenever params or other routes change.\n    this._subscription =\n        ObservableWrapper.subscribe(_router.changes, (_) => { this._updateTargetUrlAndHref(); });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() { ObservableWrapper.dispose(this._subscription); }\n  set routerLink(data: any[] | any) {\n    if (isArray(data)) {\n      this._commands = /** @type {?} */(( <any[]>data));\n    } else {\n      this._commands = [data];\n    }\n    this._updateTargetUrlAndHref();\n  }\n  onClick(): boolean {\n    // If no target, or if target is _self, prevent default browser behavior\n    if (!isString(this.target) || this.target == '_self') {\n      this._router.navigate(this._commands, this._routeSegment);\n      return false;\n    }\n    return true;\n  }\n/**\n * @return {?}\n */\nprivate _updateTargetUrlAndHref(): void {\n    let /** @type {?} */ tree = this._router.createUrlTree(this._commands, this._routeSegment);\n    if (isPresent(tree)) {\n      this.href = this._router.serializeUrl(tree);\n      this.isActive = this._router.urlTree.contains(tree);\n    } else {\n      this.isActive = false;\n    }\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nRouterLink.prototype.target;\n /** @type {?} */\nRouterLink.prototype._commands;\n /** @type {?} */\nRouterLink.prototype._subscription;\n /** @type {?} */\nRouterLink.prototype.href;\n /** @type {?} */\nRouterLink.prototype.isActive;\n /** @type {?} */\nRouterLink.prototype._routeSegment;\n /** @type {?} */\nRouterLink.prototype._router;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[routerLink]'}, ] },\n];\n/** @nocollapse */ static ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: RouteSegment, },\n{type: Router, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'target': [{ type: Input },],\n'href': [{ type: HostBinding },],\n'isActive': [{ type: HostBinding, args: ['class.router-link-active', ] },],\n'routerLink': [{ type: Input },],\n'onClick': [{ type: HostListener, args: [\"click\", ] },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}