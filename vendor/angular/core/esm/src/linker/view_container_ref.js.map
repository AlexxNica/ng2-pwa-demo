{"version":3,"file":"view_container_ref.js","sourceRoot":"","sources":["../../../../../../modules/@angular/core/src/linker/view_container_ref.ts"],"names":[],"mappings":"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","sourcesContent":["import {ListWrapper} from '../../src/facade/collection';\nimport {unimplemented} from '../../src/facade/exceptions';\nimport {Injector} from '../di/injector';\nimport {isPresent} from '../../src/facade/lang';\nimport {wtfCreateScope, wtfLeave, WtfScopeFn} from '../profile/profile';\n\nimport {AppElement} from './element';\n\nimport {ElementRef} from './element_ref';\nimport {TemplateRef} from './template_ref';\nimport {EmbeddedViewRef, ViewRef, ViewRef_} from './view_ref';\nimport {ComponentFactory, ComponentRef} from './component_factory';\n\n/**\n * Represents a container where one or more Views can be attached.\n *\n * The container can contain two kinds of Views. Host Views, created by instantiating a\n * {@link Component} via {@link #createComponent}, and Embedded Views, created by instantiating an\n * {@link TemplateRef Embedded Template} via {@link #createEmbeddedView}.\n *\n * The location of the View Container within the containing View is specified by the Anchor\n * `element`. Each View Container can have only one Anchor Element and each Anchor Element can only\n * have a single View Container.\n *\n * Root elements of Views attached to this container become siblings of the Anchor Element in\n * the Rendered View.\n *\n * To access a `ViewContainerRef` of an Element, you can either place a {@link Directive} injected\n * with `ViewContainerRef` on the Element, or you obtain it via a {@link ViewChild} query.\n */\nexport abstract class ViewContainerRef {\n  /**\n   * Anchor element that specifies the location of this container in the containing View.\n   * <!-- TODO: rename to anchorElement -->\n   */\n  get element(): ElementRef { return /** @type {?} */(( <ElementRef>unimplemented())); }\n\n  get injector(): Injector { return /** @type {?} */(( <Injector>unimplemented())); }\n\n  get parentInjector(): Injector { return /** @type {?} */(( <Injector>unimplemented())); }\n\n  /**\n   * Destroys all Views in this container.\n   */\n  abstract clear(): void;\n\n  /**\n   * Returns the {@link ViewRef} for the View located in this container at the specified index.\n   */\n  abstract get(index: number): ViewRef;\n\n  /**\n   * Returns the number of Views currently attached to this container.\n   */\n  get length(): number { return /** @type {?} */(( <number>unimplemented())); };\n\n  /**\n   * Instantiates an Embedded View based on the {@link TemplateRef `templateRef`} and inserts it\n   * into this container at the specified `index`.\n   *\n   * If `index` is not specified, the new View will be inserted as the last View in the container.\n   *\n   * Returns the {@link ViewRef} for the newly created View.\n   */\n  abstract createEmbeddedView<C>(templateRef: TemplateRef<C>, context?: C,\n                                 index?: number): EmbeddedViewRef<C>;\n\n  /**\n   * Instantiates a single {@link Component} and inserts its Host View into this container at the\n   * specified `index`.\n   *\n   * The component is instantiated using its {@link ComponentFactory} which can be\n   * obtained via {@link ComponentResolver#resolveComponent}.\n   *\n   * If `index` is not specified, the new View will be inserted as the last View in the container.\n   *\n   * You can optionally specify the {@link Injector} that will be used as parent for the Component.\n   *\n   * Returns the {@link ComponentRef} of the Host View created for the newly instantiated Component.\n   */\n  abstract createComponent<C>(componentFactory: ComponentFactory<C>, index?: number,\n                              injector?: Injector, projectableNodes?: any[][]): ComponentRef<C>;\n\n  /**\n   * Inserts a View identified by a {@link ViewRef} into the container at the specified `index`.\n   *\n   * If `index` is not specified, the new View will be inserted as the last View in the container.\n   *\n   * Returns the inserted {@link ViewRef}.\n   */\n  abstract insert(viewRef: ViewRef, index?: number): ViewRef;\n\n  /**\n   * Returns the index of the View, specified via {@link ViewRef}, within the current container or\n   * `-1` if this container doesn't contain the View.\n   */\n  abstract indexOf(viewRef: ViewRef): number;\n\n  /**\n   * Destroys a View attached to this container at the specified `index`.\n   *\n   * If `index` is not specified, the last View in the container will be removed.\n   */\n  abstract remove(index?: number): void;\n\n  /**\n   * Use along with {@link #insert} to move a View within the current container.\n   *\n   * If the `index` param is omitted, the last {@link ViewRef} is detached.\n   */\n  abstract detach(index?: number): ViewRef;\n}\n\nexport class ViewContainerRef_ implements ViewContainerRef {\n/**\n * @param {?} _element\n */\nconstructor(private _element: AppElement) {}\n/**\n * @param {?} index\n * @return {?}\n */\nget(index: number): ViewRef { return this._element.nestedViews[index].ref; }\n  get length(): number {\n    var /** @type {?} */ views = this._element.nestedViews;\n    return isPresent(views) ? views.length : 0;\n  }\n\n  get element(): ElementRef { return this._element.elementRef; }\n\n  get injector(): Injector { return this._element.injector; }\n\n  get parentInjector(): Injector { return this._element.parentInjector; }\n/**\n * @param {?} templateRef\n * @param {?=} context\n * @param {?=} index\n * @return {?}\n */\ncreateEmbeddedView<C>(templateRef: TemplateRef<C>, context: C = null,\n                        index: number = -1): EmbeddedViewRef<C> {\n    var /** @type {?} */ viewRef: EmbeddedViewRef<any> = templateRef.createEmbeddedView(context);\n    this.insert(viewRef, index);\n    return viewRef;\n  }\n\n  /** @internal */\n  _createComponentInContainerScope: WtfScopeFn =\n      wtfCreateScope('ViewContainerRef#createComponent()');\n/**\n * @param {?} componentFactory\n * @param {?=} index\n * @param {?=} injector\n * @param {?=} projectableNodes\n * @return {?}\n */\ncreateComponent<C>(componentFactory: ComponentFactory<C>, index: number = -1,\n                     injector: Injector = null, projectableNodes: any[][] = null): ComponentRef<C> {\n    var /** @type {?} */ s = this._createComponentInContainerScope();\n    var /** @type {?} */ contextInjector = isPresent(injector) ? injector : this._element.parentInjector;\n    var /** @type {?} */ componentRef = componentFactory.create(contextInjector, projectableNodes);\n    this.insert(componentRef.hostView, index);\n    return wtfLeave(s, componentRef);\n  }\n\n  /** @internal */\n  _insertScope = wtfCreateScope('ViewContainerRef#insert()');\n/**\n * @param {?} viewRef\n * @param {?=} index\n * @return {?}\n */\ninsert(viewRef: ViewRef, index: number = -1): ViewRef {\n    var /** @type {?} */ s = this._insertScope();\n    if (index == -1) index = this.length;\n    var /** @type {?} */ viewRef_ = /** @type {?} */(( <ViewRef_<any>>viewRef));\n    this._element.attachView(viewRef_.internalView, index);\n    return wtfLeave(s, viewRef_);\n  }\n/**\n * @param {?} viewRef\n * @return {?}\n */\nindexOf(viewRef: ViewRef): number {\n    return ListWrapper.indexOf(this._element.nestedViews, ( /** @type {?} */((<ViewRef_<any>>viewRef))).internalView);\n  }\n\n  /** @internal */\n  _removeScope = wtfCreateScope('ViewContainerRef#remove()');\n/**\n * @param {?=} index\n * @return {?}\n */\nremove(index: number = -1): void {\n    var /** @type {?} */ s = this._removeScope();\n    if (index == -1) index = this.length - 1;\n    var /** @type {?} */ view = this._element.detachView(index);\n    view.destroy();\n    // view is intentionally not returned to the client.\n    wtfLeave(s);\n  }\n\n  /** @internal */\n  _detachScope = wtfCreateScope('ViewContainerRef#detach()');\n/**\n * @param {?=} index\n * @return {?}\n */\ndetach(index: number = -1): ViewRef {\n    var /** @type {?} */ s = this._detachScope();\n    if (index == -1) index = this.length - 1;\n    var /** @type {?} */ view = this._element.detachView(index);\n    return wtfLeave(s, view.ref);\n  }\n/**\n * @return {?}\n */\nclear() {\n    for (var /** @type {?} */ i = this.length - 1; i >= 0; i--) {\n      this.remove(i);\n    }\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @internal\n @type {?} */\nViewContainerRef_.prototype._createComponentInContainerScope;\n /** @internal\n @type {?} */\nViewContainerRef_.prototype._insertScope;\n /** @internal\n @type {?} */\nViewContainerRef_.prototype._removeScope;\n /** @internal\n @type {?} */\nViewContainerRef_.prototype._detachScope;\n /** @type {?} */\nViewContainerRef_.prototype._element;\n  }\n\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}