{"version":3,"file":"dynamic_component_loader.js","sourceRoot":"","sources":["../../../../../../modules/@angular/core/src/linker/dynamic_component_loader.ts"],"names":[],"mappings":";AAAA,qCAAgC,sBAAsB,CAAC,CAAA;AACvD,uBAA8B,uBAAuB,CAAC,CAAA;AAItD,sCAAiC,2BAA2B,CAAC,CAAA;AAC7D,6BAAyB,kBAAkB,CAAC,CAAA;AAG5C;;;;GAIG;AACH;AAkGA,CAAC;AAlGqB,8BAAsB,yBAkG3C,CAAA;AACD,sCAA6C,sBAAsB;IACnE;;OAEG;IACH,YAAoB,SAA4B;QAAI,OAAO,CAAC;QAAxC,cAAS,GAAT,SAAS,CAAmB;IAAa,CAAC;IAC9D;;;;;;;OAOG;IACH,UAAU,CAAC,IAAU,EAAE,sBAAoC,EAAE,QAAkB,EAClE,SAAsB,EAAE,gBAA0B;QAC3D,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,gBAAgB;YAChE,IAAI,gBAAgB,CAAC,YAAY,GAAG,gBAAgB,CAAC,MAAM,CACvD,QAAQ,EAAE,gBAAgB,EAC1B,gBAAS,CAAC,sBAAsB,CAAC,GAAG,sBAAsB,GAAG,gBAAgB,CAAC,QAAQ,CAAC,CAAC;YAC5F,EAAE,CAAC,CAAC,gBAAS,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;gBACzB,YAAY,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;YACpC,CAAC;YACD,MAAM,CAAC,YAAY,CAAC;QACtB,CAAC,CAAC,CAAC;IACL,CAAC;IACH;;;;;;OAMG;IACH,kBAAkB,CAAC,IAAU,EAAE,QAA0B,EACpC,SAAS,GAAiC,IAAI,EAC9C,gBAAgB,GAAY,IAAI;QACjD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,gBAAgB;YAChE,IAAI,gBAAgB,CAAC,eAAe,GAAG,QAAQ,CAAC,cAAc,CAAC;YAC/D,IAAI,gBAAgB,CAAC,aAAa,GAAG,gBAAS,CAAC,SAAS,CAAC,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC;gBACzD,wCAAkB,CAAC,qBAAqB,CAAC,SAAS,EAAE,eAAe,CAAC;gBACpE,eAAe,CAAC;YACxC,MAAM,CAAC,QAAQ,CAAC,eAAe,CAAC,gBAAgB,EAAE,QAAQ,CAAC,MAAM,EAAE,aAAa,EAChD,gBAAgB,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;IACL,CAAC;IAED,OAAO,8BAA8B;QACtC,gBAAgB;QACjB,uBAAuB,CAAC,SAAS,CAAC,SAAS,CAAC;IAC1C,CAAC;AAQH,CAAC;AANM,kCAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,uBAAU,EAAE;CACnB,CAAC;AACF,kBAAkB,CAAQ,sCAAc,GAA2D;IACnG,EAAC,IAAI,EAAE,sCAAiB,GAAG;CAC1B,CAAC;AAvDW,+BAAuB,0BAwDnC,CAAA","sourcesContent":["import {ComponentResolver} from './component_resolver';\nimport {Type, isPresent} from '../../src/facade/lang';\nimport {ComponentRef} from './component_factory';\nimport {ViewContainerRef} from './view_container_ref';\nimport {ResolvedReflectiveProvider} from '../di/reflective_provider';\nimport {ReflectiveInjector} from '../di/reflective_injector';\nimport {Injectable} from '../di/decorators';\nimport {Injector} from '../di/injector';\n\n/**\n * Use ComponentResolver and ViewContainerRef directly.\n *\n * @deprecated\n */\nexport abstract class DynamicComponentLoader {\n  /**\n   * Creates an instance of a Component `type` and attaches it to the first element in the\n   * platform-specific global view that matches the component's selector.\n   *\n   * In a browser the platform-specific global view is the main DOM Document.\n   *\n   * If needed, the component's selector can be overridden via `overrideSelector`.\n   *\n   * You can optionally provide `injector` and this {@link Injector} will be used to instantiate the\n   * Component.\n   *\n   * To be notified when this Component instance is destroyed, you can also optionally provide\n   * `onDispose` callback.\n   *\n   * Returns a promise for the {@link ComponentRef} representing the newly created Component.\n   *\n   * ### Example\n   *\n   * ```\n   * @Component({\n   *   selector: 'child-component',\n   *   template: 'Child'\n   * })\n   * class ChildComponent {\n   * }\n   *\n   * @Component({\n   *   selector: 'my-app',\n   *   template: 'Parent (<child id=\"child\"></child>)'\n   * })\n   * class MyApp {\n   *   constructor(dcl: DynamicComponentLoader, injector: Injector) {\n   *     dcl.loadAsRoot(ChildComponent, '#child', injector);\n   *   }\n   * }\n   *\n   * bootstrap(MyApp);\n   * ```\n   *\n   * Resulting DOM:\n   *\n   * ```\n   * <my-app>\n   *   Parent (\n   *     <child id=\"child\">Child</child>\n   *   )\n   * </my-app>\n   * ```\n   */\n  abstract loadAsRoot(type: Type, overrideSelectorOrNode: string | any, injector: Injector,\n                      onDispose?: () => void,\n                      projectableNodes?: any[][]): Promise<ComponentRef<any>>;\n\n\n  /**\n   * Creates an instance of a Component and attaches it to the View Container found at the\n   * `location` specified as {@link ViewContainerRef}.\n   *\n   * You can optionally provide `providers` to configure the {@link Injector} provisioned for this\n   * Component Instance.\n   *\n   * Returns a promise for the {@link ComponentRef} representing the newly created Component.\n   *\n   *\n   * ### Example\n   *\n   * ```\n   * @Component({\n   *   selector: 'child-component',\n   *   template: 'Child'\n   * })\n   * class ChildComponent {\n   * }\n   *\n   * @Component({\n   *   selector: 'my-app',\n   *   template: 'Parent'\n   * })\n   * class MyApp {\n   *   constructor(dcl: DynamicComponentLoader, viewContainerRef: ViewContainerRef) {\n   *     dcl.loadNextToLocation(ChildComponent, viewContainerRef);\n   *   }\n   * }\n   *\n   * bootstrap(MyApp);\n   * ```\n   *\n   * Resulting DOM:\n   *\n   * ```\n   * <my-app>Parent</my-app>\n   * <child-component>Child</child-component>\n   * ```\n   */\n  abstract loadNextToLocation(type: Type, location: ViewContainerRef,\n                              providers?: ResolvedReflectiveProvider[],\n                              projectableNodes?: any[][]): Promise<ComponentRef<any>>;\n}\nexport class DynamicComponentLoader_ extends DynamicComponentLoader {\n/**\n * @param {?} _compiler\n */\nconstructor(private _compiler: ComponentResolver) { super(); }\n/**\n * @param {?} type\n * @param {?} overrideSelectorOrNode\n * @param {?} injector\n * @param {?=} onDispose\n * @param {?=} projectableNodes\n * @return {?}\n */\nloadAsRoot(type: Type, overrideSelectorOrNode: string | any, injector: Injector,\n             onDispose?: () => void, projectableNodes?: any[][]): Promise<ComponentRef<any>> {\n    return this._compiler.resolveComponent(type).then(componentFactory => {\n      var /** @type {?} */ componentRef = componentFactory.create(\n          injector, projectableNodes,\n          isPresent(overrideSelectorOrNode) ? overrideSelectorOrNode : componentFactory.selector);\n      if (isPresent(onDispose)) {\n        componentRef.onDestroy(onDispose);\n      }\n      return componentRef;\n    });\n  }\n/**\n * @param {?} type\n * @param {?} location\n * @param {?=} providers\n * @param {?=} projectableNodes\n * @return {?}\n */\nloadNextToLocation(type: Type, location: ViewContainerRef,\n                     providers: ResolvedReflectiveProvider[] = null,\n                     projectableNodes: any[][] = null): Promise<ComponentRef<any>> {\n    return this._compiler.resolveComponent(type).then(componentFactory => {\n      var /** @type {?} */ contextInjector = location.parentInjector;\n      var /** @type {?} */ childInjector = isPresent(providers) && providers.length > 0 ?\n                              ReflectiveInjector.fromResolvedProviders(providers, contextInjector) :\n                              contextInjector;\n      return location.createComponent(componentFactory, location.length, childInjector,\n                                      projectableNodes);\n    });\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nDynamicComponentLoader_.prototype._compiler;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */ static ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: ComponentResolver, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}