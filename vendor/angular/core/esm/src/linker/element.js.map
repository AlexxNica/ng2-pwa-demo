{"version":3,"file":"element.js","sourceRoot":"","sources":["../../../../../../modules/@angular/core/src/linker/element.ts"],"names":[],"mappings":"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","sourcesContent":["import {isPresent} from '../../src/facade/lang';\nimport {ListWrapper} from '../../src/facade/collection';\nimport {BaseException} from '../../src/facade/exceptions';\n\nimport {AppView} from './view';\nimport {ViewType} from './view_type';\nimport {ElementRef} from './element_ref';\n\nimport {ViewContainerRef_} from './view_container_ref';\n\nimport {QueryList} from './query_list';\nimport {Injector} from '../di/injector';\n\n/**\n * An AppElement is created for elements that have a ViewContainerRef,\n * a nested component or a <template> element to keep data around\n * that is needed for later instantiations.\n */\nexport class AppElement {\npublic nestedViews: AppView<any>[] = null;\npublic componentView: AppView<any> = null;\npublic component: any;\npublic componentConstructorViewQueries: QueryList<any>[];\n/**\n * @param {?} index\n * @param {?} parentIndex\n * @param {?} parentView\n * @param {?} nativeElement\n */\nconstructor(public index: number,\npublic parentIndex: number,\npublic parentView: AppView<any>,\npublic nativeElement: any) {}\n\n  get elementRef(): ElementRef { return new ElementRef(this.nativeElement); }\n\n  get vcRef(): ViewContainerRef_ { return new ViewContainerRef_(this); }\n/**\n * @param {?} component\n * @param {?} componentConstructorViewQueries\n * @param {?} view\n * @return {?}\n */\ninitComponent(component: any, componentConstructorViewQueries: QueryList<any>[],\n                view: AppView<any>) {\n    this.component = component;\n    this.componentConstructorViewQueries = componentConstructorViewQueries;\n    this.componentView = view;\n  }\n\n  get parentInjector(): Injector { return this.parentView.injector(this.parentIndex); }\n  get injector(): Injector { return this.parentView.injector(this.index); }\n/**\n * @param {?} nestedViewClass\n * @param {?} callback\n * @return {?}\n */\nmapNestedViews(nestedViewClass: any, callback: Function): any[] {\n    var /** @type {?} */ result = [];\n    if (isPresent(this.nestedViews)) {\n      this.nestedViews.forEach((nestedView) => {\n        if (nestedView.clazz === nestedViewClass) {\n          result.push(callback(nestedView));\n        }\n      });\n    }\n    return result;\n  }\n/**\n * @param {?} view\n * @param {?} viewIndex\n * @return {?}\n */\nattachView(view: AppView<any>, viewIndex: number) {\n    if (view.type === ViewType.COMPONENT) {\n      throw new BaseException(`Component views can't be moved!`);\n    }\n    var /** @type {?} */ nestedViews = this.nestedViews;\n    if (nestedViews == null) {\n      nestedViews = [];\n      this.nestedViews = nestedViews;\n    }\n    ListWrapper.insert(nestedViews, viewIndex, view);\n    var /** @type {?} */ refRenderNode;\n    if (viewIndex > 0) {\n      var /** @type {?} */ prevView = nestedViews[viewIndex - 1];\n      refRenderNode = prevView.lastRootNode;\n    } else {\n      refRenderNode = this.nativeElement;\n    }\n    if (isPresent(refRenderNode)) {\n      view.renderer.attachViewAfter(refRenderNode, view.flatRootNodes);\n    }\n    view.addToContentChildren(this);\n  }\n/**\n * @param {?} viewIndex\n * @return {?}\n */\ndetachView(viewIndex: number): AppView<any> {\n    var /** @type {?} */ view = ListWrapper.removeAt(this.nestedViews, viewIndex);\n    if (view.type === ViewType.COMPONENT) {\n      throw new BaseException(`Component views can't be moved!`);\n    }\n\n    view.renderer.detachView(view.flatRootNodes);\n\n    view.removeFromContentChildren(this);\n    return view;\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nAppElement.prototype.nestedViews;\n /** @type {?} */\nAppElement.prototype.componentView;\n /** @type {?} */\nAppElement.prototype.component;\n /** @type {?} */\nAppElement.prototype.componentConstructorViewQueries;\n /** @type {?} */\nAppElement.prototype.index;\n /** @type {?} */\nAppElement.prototype.parentIndex;\n /** @type {?} */\nAppElement.prototype.parentView;\n /** @type {?} */\nAppElement.prototype.nativeElement;\n  }\n\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}