{"version":3,"file":"query_list.js","sourceRoot":"","sources":["../../../../../../modules/@angular/core/src/linker/query_list.ts"],"names":[],"mappings":";AAAA,6BAA0B,6BAA6B,CAAC,CAAA;AACxD,uBAAgC,uBAAuB,CAAC,CAAA;AACxD,wBAAuC,wBAAwB,CAAC,CAAA;AAGhE;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH;IAAA;QACQ,WAAM,GAAG,IAAI,CAAC;QACd,aAAQ,GAAa,EAAE,CAAC;QACxB,aAAQ,GAAG,IAAI,oBAAY,EAAE,CAAC;IA4EtC,CAAC;IA1EC,IAAI,OAAO,KAAsB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;IACxD,IAAI,MAAM,KAAa,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;IACrD,IAAI,KAAK,KAAQ,MAAM,CAAC,wBAAW,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC3D,IAAI,IAAI,KAAQ,MAAM,CAAC,wBAAW,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC3D;;;;OAIG;IACH,GAAG,CAAI,EAAkB,IAAS,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACjE;;;;OAIG;IACH,MAAM,CAAC,EAAwB,IAAS,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC1E;;;;;OAKG;IACH,MAAM,CAAI,EAA0B,EAAE,IAAO,IAAO,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;IAC5F;;;;OAIG;IACH,OAAO,CAAC,EAAqB,IAAU,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACnE;;;OAGG;IACH,OAAO,KAAU,MAAM,CAAC,wBAAW,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC3D;;OAEG;IACH,CAAC,wBAAiB,EAAE,CAAC,KAAU,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,wBAAiB,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC7E;;OAEG;IACH,QAAQ,KAAa,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;IACvD;;;;OAIG;IACH,KAAK,CAAC,GAAqB;QACvB,IAAI,CAAC,QAAQ,GAAG,wBAAW,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACzC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACtB,CAAC;IACH;;;OAGG;IACH,eAAe,KAAW,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACrD;;;OAGG;IACH,QAAQ,KAAK,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC;IAEhC,eAAe;IACf,IAAI,KAAK,KAAK,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;IAEnC,OAAO,8BAA8B;QACtC,gBAAgB;QACjB,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC;QAC1B,gBAAgB;QACjB,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC;QAC5B,gBAAgB;QACjB,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC;IAC3B,CAAC;AAEH,CAAC;AA/EY,iBAAS,YA+ErB,CAAA","sourcesContent":["import {ListWrapper} from '../../src/facade/collection';\nimport {getSymbolIterator} from '../../src/facade/lang';\nimport {Observable, EventEmitter} from '../../src/facade/async';\n\n\n/**\n * An unmodifiable list of items that Angular keeps up to date when the state\n * of the application changes.\n *\n * The type of object that {@link QueryMetadata} and {@link ViewQueryMetadata} provide.\n *\n * Implements an iterable interface, therefore it can be used in both ES6\n * javascript `for (var i of items)` loops as well as in Angular templates with\n * `*ngFor=\"let i of myList\"`.\n *\n * Changes can be observed by subscribing to the changes `Observable`.\n *\n * NOTE: In the future this class will implement an `Observable` interface.\n *\n * ### Example ([live demo](http://plnkr.co/edit/RX8sJnQYl9FWuSCWme5z?p=preview))\n * ```typescript\n * @Component({...})\n * class Container {\n *   constructor(@Query(Item) items: QueryList<Item>) {\n *     items.changes.subscribe(_ => console.log(items.length));\n *   }\n * }\n * ```\n */\nexport class QueryList<T> {\nprivate _dirty = true;\nprivate _results: Array<T> = [];\nprivate _emitter = new EventEmitter();\n\n  get changes(): Observable<any> { return this._emitter; }\n  get length(): number { return this._results.length; }\n  get first(): T { return ListWrapper.first(this._results); }\n  get last(): T { return ListWrapper.last(this._results); }\n/**\n *  returns a new array with the passed in function applied to each element.\n * @param {?} fn\n * @return {?}\n */\nmap<U>(fn: (item: T) => U): U[] { return this._results.map(fn); }\n/**\n *  returns a filtered array.\n * @param {?} fn\n * @return {?}\n */\nfilter(fn: (item: T) => boolean): T[] { return this._results.filter(fn); }\n/**\n *  returns a reduced value.\n * @param {?} fn\n * @param {?} init\n * @return {?}\n */\nreduce<U>(fn: (acc: U, item: T) => U, init: U): U { return this._results.reduce(fn, init); }\n/**\n *  executes function for each element in a query.\n * @param {?} fn\n * @return {?}\n */\nforEach(fn: (item: T) => void): void { this._results.forEach(fn); }\n/**\n *  converts QueryList into an array\n * @return {?}\n */\ntoArray(): T[] { return ListWrapper.clone(this._results); }\n/**\n * @return {?}\n */\n[getSymbolIterator()](): any { return this._results[getSymbolIterator()](); }\n/**\n * @return {?}\n */\ntoString(): string { return this._results.toString(); }\n/**\n * @internal\n * @param {?} res\n * @return {?}\n */\nreset(res: Array<T | any[]>): void {\n    this._results = ListWrapper.flatten(res);\n    this._dirty = false;\n  }\n/**\n * @internal\n * @return {?}\n */\nnotifyOnChanges(): void { this._emitter.emit(this); }\n/**\n *  internal\n * @return {?}\n */\nsetDirty() { this._dirty = true; }\n\n  /** internal */\n  get dirty() { return this._dirty; }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nQueryList.prototype._dirty;\n /** @type {?} */\nQueryList.prototype._results;\n /** @type {?} */\nQueryList.prototype._emitter;\n  }\n\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}