{"version":3,"file":"debug_context.js","sourceRoot":"","sources":["../../../../../../modules/@angular/core/src/linker/debug_context.ts"],"names":[],"mappings":"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","sourcesContent":["import {isPresent, isBlank} from '../../src/facade/lang';\nimport {ListWrapper, StringMapWrapper} from '../../src/facade/collection';\nimport {Injector} from '../di';\nimport {ViewType} from './view_type';\nimport {RenderDebugInfo} from '../render/api';\nimport {DebugAppView} from './view';\n\n/* @ts2dart_const */\nexport class StaticNodeDebugInfo {\n/**\n * @param {?} providerTokens\n * @param {?} componentToken\n * @param {?} refTokens\n */\nconstructor(public providerTokens: any[],\npublic componentToken: any,\npublic refTokens: {[key: string]: any}) {}\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nStaticNodeDebugInfo.prototype.providerTokens;\n /** @type {?} */\nStaticNodeDebugInfo.prototype.componentToken;\n /** @type {?} */\nStaticNodeDebugInfo.prototype.refTokens;\n  }\n\n}\n\nexport class DebugContext implements RenderDebugInfo {\n/**\n * @param {?} _view\n * @param {?} _nodeIndex\n * @param {?} _tplRow\n * @param {?} _tplCol\n */\nconstructor(private _view: DebugAppView<any>,\nprivate _nodeIndex: number,\nprivate _tplRow: number,\nprivate _tplCol: number) {}\nprivate get _staticNodeInfo(): StaticNodeDebugInfo {\n    return isPresent(this._nodeIndex) ? this._view.staticNodeDebugInfos[this._nodeIndex] : null;\n  }\n\n  get context() { return this._view.context; }\n  get component() {\n    var /** @type {?} */ staticNodeInfo = this._staticNodeInfo;\n    if (isPresent(staticNodeInfo) && isPresent(staticNodeInfo.componentToken)) {\n      return this.injector.get(staticNodeInfo.componentToken);\n    }\n    return null;\n  }\n  get componentRenderElement() {\n    var /** @type {?} */ componentView = this._view;\n    while (isPresent(componentView.declarationAppElement) &&\n           componentView.type !== ViewType.COMPONENT) {\n      componentView = /** @type {?} */(( <DebugAppView<any>>componentView.declarationAppElement.parentView));\n    }\n    return isPresent(componentView.declarationAppElement) ?\n               componentView.declarationAppElement.nativeElement :\n               null;\n  }\n  get injector(): Injector { return this._view.injector(this._nodeIndex); }\n  get renderNode(): any {\n    if (isPresent(this._nodeIndex) && isPresent(this._view.allNodes)) {\n      return this._view.allNodes[this._nodeIndex];\n    } else {\n      return null;\n    }\n  }\n  get providerTokens(): any[] {\n    var /** @type {?} */ staticNodeInfo = this._staticNodeInfo;\n    return isPresent(staticNodeInfo) ? staticNodeInfo.providerTokens : null;\n  }\n  get source(): string {\n    return `${this._view.componentType.templateUrl}:${this._tplRow}:${this._tplCol}`;\n  }\n  get references(): {[key: string]: any} {\n    var /** @type {?} */ varValues: {[key: string]: string} = {};\n    var /** @type {?} */ staticNodeInfo = this._staticNodeInfo;\n    if (isPresent(staticNodeInfo)) {\n      var /** @type {?} */ refs = staticNodeInfo.refTokens;\n      StringMapWrapper.forEach(refs, (refToken, refName) => {\n        var /** @type {?} */ varValue;\n        if (isBlank(refToken)) {\n          varValue = isPresent(this._view.allNodes) ? this._view.allNodes[this._nodeIndex] : null;\n        } else {\n          varValue = this._view.injectorGet(refToken, this._nodeIndex, null);\n        }\n        varValues[refName] = varValue;\n      });\n    }\n    return varValues;\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nDebugContext.prototype._view;\n /** @type {?} */\nDebugContext.prototype._nodeIndex;\n /** @type {?} */\nDebugContext.prototype._tplRow;\n /** @type {?} */\nDebugContext.prototype._tplCol;\n  }\n\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}