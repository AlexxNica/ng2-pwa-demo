{"version":3,"file":"view_ref.js","sourceRoot":"","sources":["../../../../../../modules/@angular/core/src/linker/view_ref.ts"],"names":[],"mappings":";AAAA,6BAA4B,6BAA6B,CAAC,CAAA;AAG1D,4BAAsC,+BAA+B,CAAC,CAAA;AAEtE;IACE,IAAI,SAAS,KAAc,MAAM,CAAiB,CAAY,0BAAa,EAAG,CAAC,CAAC,CAAC,CAAC;AAGpF,CAAC;AAJqB,eAAO,UAI5B,CAAA;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAoDG;AACH,8BAAiD,OAAO;IACtD,IAAI,OAAO,KAAQ,MAAM,CAAC,0BAAa,EAAE,CAAC,CAAC,CAAC;IAE5C,IAAI,SAAS,KAAY,MAAM,CAAiB,CAAU,0BAAa,EAAG,CAAC,CAAC,CAAC,CAAC;;AAMhF,CAAC;AATqB,uBAAe,kBASpC,CAAA;AAED;IACA;;OAEG;IACH,YAAoB,KAAiB;QAAjB,UAAK,GAAL,KAAK,CAAY;QAAI,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IAAC,CAAC;IAE5D,IAAI,YAAY,KAAiB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IAErD,IAAI,SAAS,KAAY,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC;IAE3D,IAAI,OAAO,KAAK,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;IAE5C,IAAI,SAAS,KAAc,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;IAC3D;;OAEG;IACH,YAAY,KAAW,IAAI,CAAC,KAAK,CAAC,yBAAyB,EAAE,CAAC,CAAC,CAAC;IAChE;;OAEG;IACH,MAAM,KAAW,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,mCAAuB,CAAC,QAAQ,CAAC,CAAC,CAAC;IACxE;;OAEG;IACH,aAAa,KAAW,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC1D;;OAEG;IACH,cAAc,KAAW,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC1D;;OAEG;IACH,QAAQ;QACJ,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,mCAAuB,CAAC,WAAW,CAAC;QACxD,IAAI,CAAC,YAAY,EAAE,CAAC;IACtB,CAAC;IACH;;;OAGG;IACH,SAAS,CAAC,QAAkB,IAAI,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IACxE;;OAEG;IACH,OAAO,KAAK,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;IAEjC,OAAO,8BAA8B;QACtC,gBAAgB;QACjB,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC;IACvB,CAAC;AAEH,CAAC;AAnDY,gBAAQ,WAmDpB,CAAA","sourcesContent":["import {unimplemented} from '../../src/facade/exceptions';\nimport {ChangeDetectorRef} from '../change_detection/change_detector_ref';\nimport {AppView} from './view';\nimport {ChangeDetectionStrategy} from '../change_detection/constants';\n\nexport abstract class ViewRef {\n  get destroyed(): boolean { return /** @type {?} */(( <boolean>unimplemented())); }\n\n  abstract onDestroy(callback: Function);\n}\n\n/**\n * Represents an Angular View.\n *\n * <!-- TODO: move the next two paragraphs to the dev guide -->\n * A View is a fundamental building block of the application UI. It is the smallest grouping of\n * Elements which are created and destroyed together.\n *\n * Properties of elements in a View can change, but the structure (number and order) of elements in\n * a View cannot. Changing the structure of Elements can only be done by inserting, moving or\n * removing nested Views via a {@link ViewContainerRef}. Each View can contain many View Containers.\n * <!-- /TODO -->\n *\n * ### Example\n *\n * Given this template...\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <li *ngFor=\"let  item of items\">{{item}}</li>\n * </ul>\n * ```\n *\n * ... we have two {@link TemplateRef}s:\n *\n * Outer {@link TemplateRef}:\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <template ngFor let-item [ngForOf]=\"items\"></template>\n * </ul>\n * ```\n *\n * Inner {@link TemplateRef}:\n * ```\n *   <li>{{item}}</li>\n * ```\n *\n * Notice that the original template is broken down into two separate {@link TemplateRef}s.\n *\n * The outer/inner {@link TemplateRef}s are then assembled into views like so:\n *\n * ```\n * <!-- ViewRef: outer-0 -->\n * Count: 2\n * <ul>\n *   <template view-container-ref></template>\n *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\n *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\n * </ul>\n * <!-- /ViewRef: outer-0 -->\n * ```\n */\nexport abstract class EmbeddedViewRef<C> extends ViewRef {\n  get context(): C { return unimplemented(); }\n\n  get rootNodes(): any[] { return /** @type {?} */(( <any[]>unimplemented())); };\n\n  /**\n   * Destroys the view and all of the data structures associated with it.\n   */\n  abstract destroy();\n}\n\nexport class ViewRef_<C> implements EmbeddedViewRef<C>, ChangeDetectorRef {\n/**\n * @param {?} _view\n */\nconstructor(private _view: AppView<C>) { this._view = _view; }\n\n  get internalView(): AppView<C> { return this._view; }\n\n  get rootNodes(): any[] { return this._view.flatRootNodes; }\n\n  get context() { return this._view.context; }\n\n  get destroyed(): boolean { return this._view.destroyed; }\n/**\n * @return {?}\n */\nmarkForCheck(): void { this._view.markPathToRootAsCheckOnce(); }\n/**\n * @return {?}\n */\ndetach(): void { this._view.cdMode = ChangeDetectionStrategy.Detached; }\n/**\n * @return {?}\n */\ndetectChanges(): void { this._view.detectChanges(false); }\n/**\n * @return {?}\n */\ncheckNoChanges(): void { this._view.detectChanges(true); }\n/**\n * @return {?}\n */\nreattach(): void {\n    this._view.cdMode = ChangeDetectionStrategy.CheckAlways;\n    this.markForCheck();\n  }\n/**\n * @param {?} callback\n * @return {?}\n */\nonDestroy(callback: Function) { this._view.disposables.push(callback); }\n/**\n * @return {?}\n */\ndestroy() { this._view.destroy(); }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nViewRef_.prototype._view;\n  }\n\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}