{"version":3,"file":"exceptions.js","sourceRoot":"","sources":["../../../../../../modules/@angular/core/src/linker/exceptions.ts"],"names":[],"mappings":";AAAA,6BAA8C,6BAA6B,CAAC,CAAA;AAE5E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAgCG;AACH,8DAAqE,0BAAa;IAClF;;;;OAIG;IACH,YAAY,QAAa,EAAE,SAAc,EAAE,OAAY;QACnD,MAAM,+CAA+C;YAC/C,oBAAoB,QAAQ,sBAAsB,SAAS,GAAG,CAAC,CAAC;IACxE,CAAC;AACH,CAAC;AAVY,uDAA+C,kDAU3D,CAAA;AAED;;;;;GAKG;AACH,mCAA0C,6BAAgB;IAC1D;;;;OAIG;IACH,YAAY,iBAAsB,EAAE,aAAkB,EAAE,OAAY;QAChE,MAAM,YAAY,OAAO,CAAC,MAAM,EAAE,EAAE,iBAAiB,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC;IACjF,CAAC;AACH,CAAC;AATY,4BAAoB,uBAShC,CAAA;AAED;;;;;;GAMG;AACH,qCAA4C,0BAAa;IACzD;;OAEG;IACH,YAAY,OAAe;QAAI,MAAM,oCAAoC,OAAO,EAAE,CAAC,CAAC;IAAC,CAAC;AACtF,CAAC;AALY,8BAAsB,yBAKlC,CAAA","sourcesContent":["import {BaseException, WrappedException} from '../../src/facade/exceptions';\n\n/**\n * An error thrown if application changes model breaking the top-down data flow.\n *\n * This exception is only thrown in dev mode.\n *\n * <!-- TODO: Add a link once the dev mode option is configurable -->\n *\n * ### Example\n *\n * ```typescript\n * @Component({\n *   selector: 'parent',\n *   template: `\n *     <child [prop]=\"parentProp\"></child>\n *   `,\n *   directives: [forwardRef(() => Child)]\n * })\n * class Parent {\n *   parentProp = \"init\";\n * }\n *\n * @Directive({selector: 'child', inputs: ['prop']})\n * class Child {\n *   constructor(public parent: Parent) {}\n *\n *   set prop(v) {\n *     // this updates the parent property, which is disallowed during change detection\n *     // this will result in ExpressionChangedAfterItHasBeenCheckedException\n *     this.parent.parentProp = \"updated\";\n *   }\n * }\n * ```\n */\nexport class ExpressionChangedAfterItHasBeenCheckedException extends BaseException {\n/**\n * @param {?} oldValue\n * @param {?} currValue\n * @param {?} context\n */\nconstructor(oldValue: any, currValue: any, context: any) {\n    super(`Expression has changed after it was checked. ` +\n          `Previous value: '${oldValue}'. Current value: '${currValue}'`);\n  }\n}\n\n/**\n * Thrown when an exception was raised during view creation, change detection or destruction.\n *\n * This error wraps the original exception to attach additional contextual information that can\n * be useful for debugging.\n */\nexport class ViewWrappedException extends WrappedException {\n/**\n * @param {?} originalException\n * @param {?} originalStack\n * @param {?} context\n */\nconstructor(originalException: any, originalStack: any, context: any) {\n    super(`Error in ${context.source}`, originalException, originalStack, context);\n  }\n}\n\n/**\n * Thrown when a destroyed view is used.\n *\n * This error indicates a bug in the framework.\n *\n * This is an internal Angular error.\n */\nexport class ViewDestroyedException extends BaseException {\n/**\n * @param {?} details\n */\nconstructor(details: string) { super(`Attempt to use a destroyed view: ${details}`); }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}