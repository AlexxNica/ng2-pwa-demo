{"version":3,"file":"api.js","sourceRoot":"","sources":["../../../../../../modules/@angular/core/src/render/api.ts"],"names":[],"mappings":";AAAA,6BAA4B,6BAA6B,CAAC,CAAA;AAI1D;IACA;;;;;;OAMG;IACH,YAAmB,EAAU,EACtB,WAAmB,EACnB,SAAiB,EACjB,aAAgC,EAChC,MAA6B;QAJjB,OAAE,GAAF,EAAE,CAAQ;QACtB,gBAAW,GAAX,WAAW,CAAQ;QACnB,cAAS,GAAT,SAAS,CAAQ;QACjB,kBAAa,GAAb,aAAa,CAAmB;QAChC,WAAM,GAAN,MAAM,CAAuB;IAAG,CAAC;IAEtC,OAAO,8BAA8B;QACtC,gBAAgB;QACjB,mBAAmB,CAAC,SAAS,CAAC,EAAE,CAAC;QAChC,gBAAgB;QACjB,mBAAmB,CAAC,SAAS,CAAC,WAAW,CAAC;QACzC,gBAAgB;QACjB,mBAAmB,CAAC,SAAS,CAAC,SAAS,CAAC;QACvC,gBAAgB;QACjB,mBAAmB,CAAC,SAAS,CAAC,aAAa,CAAC;QAC3C,gBAAgB;QACjB,mBAAmB,CAAC,SAAS,CAAC,MAAM,CAAC;IACnC,CAAC;AAEH,CAAC;AA3BY,2BAAmB,sBA2B/B,CAAA;AAED;IACE,IAAI,QAAQ,KAAe,MAAM,CAAC,0BAAa,EAAE,CAAC,CAAC,CAAC;IACpD,IAAI,SAAS,KAAU,MAAM,CAAC,0BAAa,EAAE,CAAC,CAAC,CAAC;IAChD,IAAI,cAAc,KAAY,MAAM,CAAC,0BAAa,EAAE,CAAC,CAAC,CAAC;IACvD,IAAI,UAAU,KAA2B,MAAM,CAAC,0BAAa,EAAE,CAAC,CAAC,CAAC;IAClE,IAAI,OAAO,KAAU,MAAM,CAAC,0BAAa,EAAE,CAAC,CAAC,CAAC;IAC9C,IAAI,MAAM,KAAa,MAAM,CAAC,0BAAa,EAAE,CAAC,CAAC,CAAC;AAClD,CAAC;AAPqB,uBAAe,kBAOpC,CAAA;AAED;AAyCA,CAAC;AAzCqB,gBAAQ,WAyC7B,CAAA;AAED;;;;;;;;;;;GAWG;AAEH;AAEA,CAAC;AAFqB,oBAAY,eAEjC,CAAA","sourcesContent":["import {unimplemented} from '../../src/facade/exceptions';\nimport {ViewEncapsulation} from '../metadata/view';\nimport {Injector} from '../di/injector';\n\nexport class RenderComponentType {\n/**\n * @param {?} id\n * @param {?} templateUrl\n * @param {?} slotCount\n * @param {?} encapsulation\n * @param {?} styles\n */\nconstructor(public id: string,\npublic templateUrl: string,\npublic slotCount: number,\npublic encapsulation: ViewEncapsulation,\npublic styles: Array<string | any[]>) {}\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nRenderComponentType.prototype.id;\n /** @type {?} */\nRenderComponentType.prototype.templateUrl;\n /** @type {?} */\nRenderComponentType.prototype.slotCount;\n /** @type {?} */\nRenderComponentType.prototype.encapsulation;\n /** @type {?} */\nRenderComponentType.prototype.styles;\n  }\n\n}\n\nexport abstract class RenderDebugInfo {\n  get injector(): Injector { return unimplemented(); }\n  get component(): any { return unimplemented(); }\n  get providerTokens(): any[] { return unimplemented(); }\n  get references(): {[key: string]: any} { return unimplemented(); }\n  get context(): any { return unimplemented(); }\n  get source(): string { return unimplemented(); }\n}\n\nexport abstract class Renderer {\n  abstract selectRootElement(selectorOrNode: string | any, debugInfo: RenderDebugInfo): any;\n\n  abstract createElement(parentElement: any, name: string, debugInfo: RenderDebugInfo): any;\n\n  abstract createViewRoot(hostElement: any): any;\n\n  abstract createTemplateAnchor(parentElement: any, debugInfo: RenderDebugInfo): any;\n\n  abstract createText(parentElement: any, value: string, debugInfo: RenderDebugInfo): any;\n\n  abstract projectNodes(parentElement: any, nodes: any[]): void;\n\n  abstract attachViewAfter(node: any, viewRootNodes: any[]): void;\n\n  abstract detachView(viewRootNodes: any[]): void;\n\n  abstract destroyView(hostElement: any, viewAllNodes: any[]): void;\n\n  abstract listen(renderElement: any, name: string, callback: Function): Function;\n\n  abstract listenGlobal(target: string, name: string, callback: Function): Function;\n\n  abstract setElementProperty(renderElement: any, propertyName: string, propertyValue: any): void;\n\n  abstract setElementAttribute(renderElement: any, attributeName: string,\n                               attributeValue: string): void;\n\n  /**\n   * Used only in debug mode to serialize property changes to dom nodes as attributes.\n   */\n  abstract setBindingDebugInfo(renderElement: any, propertyName: string,\n                               propertyValue: string): void;\n\n  abstract setElementClass(renderElement: any, className: string, isAdd: boolean);\n\n  abstract setElementStyle(renderElement: any, styleName: string, styleValue: string);\n\n  abstract invokeElementMethod(renderElement: any, methodName: string, args: any[]);\n\n  abstract setText(renderNode: any, text: string);\n}\n\n/**\n * Injectable service that provides a low-level interface for modifying the UI.\n *\n * Use this service to bypass Angular's templating and make custom UI changes that can't be\n * expressed declaratively. For example if you need to set a property or an attribute whose name is\n * not statically known, use {@link #setElementProperty} or {@link #setElementAttribute}\n * respectively.\n *\n * If you are implementing a custom renderer, you must implement this interface.\n *\n * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.\n */\n\nexport abstract class RootRenderer {\n  abstract renderComponent(componentType: RenderComponentType): Renderer;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}