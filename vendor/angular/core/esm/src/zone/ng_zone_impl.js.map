{"version":3,"file":"ng_zone_impl.js","sourceRoot":"","sources":["../../../../../../modules/@angular/core/src/zone/ng_zone_impl.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Stores error information; delivered via [NgZone.onError] stream.\n */\nexport class NgZoneError {\n/**\n * @param {?} error\n * @param {?} stackTrace\n */\nconstructor(public error: any,\npublic stackTrace: any) {}\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nNgZoneError.prototype.error;\n /** @type {?} */\nNgZoneError.prototype.stackTrace;\n  }\n\n}\n\n\nexport class NgZoneImpl {\n/**\n * @return {?}\n */\nstatic isInAngularZone(): boolean { return Zone.current.get('isAngularZone') === true; }\nprivate outer: Zone;\nprivate inner: Zone;\nprivate onEnter: () => void;\nprivate onLeave: () => void;\nprivate setMicrotask: (hasMicrotasks: boolean) => void;\nprivate setMacrotask: (hasMacrotasks: boolean) => void;\nprivate onError: (error: NgZoneError) => void;\n/**\n * @param {?} __0\n */\nconstructor({trace, onEnter, onLeave, setMicrotask, setMacrotask, onError}: {\n    trace: boolean,\n    onEnter: () => void,\n    onLeave: () => void,\n    setMicrotask: (hasMicrotasks: boolean) => void,\n    setMacrotask: (hasMacrotasks: boolean) => void,\n    onError: (error: NgZoneError) => void\n  }) {\n    this.onEnter = onEnter;\n    this.onLeave = onLeave;\n    this.setMicrotask = setMicrotask;\n    this.setMacrotask = setMacrotask;\n    this.onError = onError;\n\n    if (Zone) {\n      this.outer = this.inner = Zone.current;\n      if (Zone['wtfZoneSpec']) {\n        this.inner = this.inner.fork(Zone['wtfZoneSpec']);\n      }\n      if (trace && Zone['longStackTraceZoneSpec']) {\n        this.inner = this.inner.fork(Zone['longStackTraceZoneSpec']);\n      }\n      this.inner = this.inner.fork({\n        name: 'angular',\n        properties:<any>{'isAngularZone': true},\n        onInvokeTask: (delegate: ZoneDelegate, current: Zone, target: Zone, task: Task,\n                       applyThis: any, applyArgs: any): any => {\n          try {\n            this.onEnter();\n            return delegate.invokeTask(target, task, applyThis, applyArgs);\n          } finally {\n            this.onLeave();\n          }\n        },\n\n\n        onInvoke: (delegate: ZoneDelegate, current: Zone, target: Zone, callback: Function,\n                   applyThis: any, applyArgs: any[], source: string): any => {\n          try {\n            this.onEnter();\n            return delegate.invoke(target, callback, applyThis, applyArgs, source);\n          } finally {\n            this.onLeave();\n          }\n        },\n\n        onHasTask:\n            (delegate: ZoneDelegate, current: Zone, target: Zone, hasTaskState: HasTaskState) => {\n              delegate.hasTask(target, hasTaskState);\n              if (current == target) {\n                // We are only interested in hasTask events which originate from our zone\n                // (A child hasTask event is not interesting to us)\n                if (hasTaskState.change == 'microTask') {\n                  this.setMicrotask(hasTaskState.microTask);\n                } else if (hasTaskState.change == 'macroTask') {\n                  this.setMacrotask(hasTaskState.macroTask);\n                }\n              }\n            },\n\n        onHandleError: (delegate: ZoneDelegate, current: Zone, target: Zone, error: any):\n                           boolean => {\n                             delegate.handleError(target, error);\n                             this.onError(new NgZoneError(error, error.stack));\n                             return false;\n                           }\n      });\n    } else {\n      throw new Error('Angular requires Zone.js polyfill.');\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nrunInner(fn: () => any): any { return this.inner.run(fn); };\n/**\n * @param {?} fn\n * @return {?}\n */\nrunInnerGuarded(fn: () => any): any { return this.inner.runGuarded(fn); };\n/**\n * @param {?} fn\n * @return {?}\n */\nrunOuter(fn: () => any): any { return this.outer.run(fn); };\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @internal\n @type {?} */\nNgZoneImpl.prototype.outer;\n /** @internal\n @type {?} */\nNgZoneImpl.prototype.inner;\n /** @type {?} */\nNgZoneImpl.prototype.onEnter;\n /** @type {?} */\nNgZoneImpl.prototype.onLeave;\n /** @type {?} */\nNgZoneImpl.prototype.setMicrotask;\n /** @type {?} */\nNgZoneImpl.prototype.setMacrotask;\n /** @type {?} */\nNgZoneImpl.prototype.onError;\n  }\n\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}