{"version":3,"file":"forward_ref.js","sourceRoot":"","sources":["../../../../../../modules/@angular/core/src/di/forward_ref.ts"],"names":[],"mappings":";AAAA,uBAA0C,uBAAuB,CAAC,CAAA;AAUlE;;;;GAIG;AACH,oBAA2B,YAA0B;IACnD,CAAkB,CAAO,YAAa,CAAC,CAAC,CAAC,eAAe,GAAG,UAAU,CAAC;IACtE,CAAkB,CAAO,YAAa,CAAC,CAAC,CAAC,QAAQ,GAAG,cAAa,MAAM,CAAC,gBAAS,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7F,MAAM,CAAC,CAAkB,CAAyB,CAAO,YAAa,CAAE,CAAC,CAAC,CAAC;AAC7E,CAAC;AAJe,kBAAU,aAIzB,CAAA;AACD;;;;GAIG;AACH,2BAAkC,IAAS;IACzC,EAAE,CAAC,CAAC,iBAAU,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC;QAC1D,IAAI,CAAC,eAAe,KAAK,UAAU,CAAC,CAAC,CAAC;QACxC,MAAM,CAAC,CAAkB,CAAgB,IAAK,CAAC,CAAC,EAAE,CAAC;IACrD,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;AACH,CAAC;AAPe,yBAAiB,oBAOhC,CAAA","sourcesContent":["import {Type, stringify, isFunction} from '../../src/facade/lang';\n\n/**\n * An interface that a function passed into {@link forwardRef} has to implement.\n *\n * ### Example\n *\n * {@example core/di/ts/forward_ref/forward_ref.ts region='forward_ref_fn'}\n */\nexport interface ForwardRefFn { (): any; }\n/**\n *  Allows to refer to references which are not yet defined. * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of DI is declared, but not yet defined. It is also used when the `token` which we use when creating a query is not yet defined. * ### Example {@example core/di/ts/forward_ref/forward_ref.ts region='forward_ref'}\n * @param {?} forwardRefFn\n * @return {?}\n */\nexport function forwardRef(forwardRefFn: ForwardRefFn): Type {\n  ( /** @type {?} */((<any>forwardRefFn))).__forward_ref__ = forwardRef;\n  ( /** @type {?} */((<any>forwardRefFn))).toString = function() { return stringify(this()); };\n  return ( /** @type {?} */((<Type> /** @type {?} */((<any>forwardRefFn)))));\n}\n/**\n *  Lazily retrieves the reference value from a forwardRef. * Acts as the identity function when given a non-forward-ref value. * ### Example ([live demo](http://plnkr.co/edit/GU72mJrk1fiodChcmiDR?p=preview)) * ```typescript var ref = forwardRef(() => \"refValue\"); expect(resolveForwardRef(ref)).toEqual(\"refValue\"); expect(resolveForwardRef(\"regularValue\")).toEqual(\"regularValue\"); ``` * See: {@link forwardRef}\n * @param {?} type\n * @return {?}\n */\nexport function resolveForwardRef(type: any): any {\n  if (isFunction(type) && type.hasOwnProperty('__forward_ref__') &&\n      type.__forward_ref__ === forwardRef) {\n    return ( /** @type {?} */((<ForwardRefFn>type)))();\n  } else {\n    return type;\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}