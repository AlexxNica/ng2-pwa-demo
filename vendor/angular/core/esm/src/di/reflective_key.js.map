{"version":3,"file":"reflective_key.js","sourceRoot":"","sources":["../../../../../../modules/@angular/core/src/di/reflective_key.ts"],"names":[],"mappings":";AAAA,uBAAiC,uBAAuB,CAAC,CAAA;AACzD,6BAA4B,6BAA6B,CAAC,CAAA;AAC1D,8BAAgC,eAAe,CAAC,CAAA;AAEhD;;;;;;;;;;;;;;GAcG;AACH;IACA;;;;OAIG;IACH,YAAmB,KAAa,EACzB,EAAU;QADE,UAAK,GAAL,KAAK,CAAQ;QACzB,OAAE,GAAF,EAAE,CAAQ;QACb,EAAE,CAAC,CAAC,cAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACnB,MAAM,IAAI,0BAAa,CAAC,wBAAwB,CAAC,CAAC;QACpD,CAAC;IACH,CAAC;IAED;;OAEG;IACH,IAAI,WAAW,KAAa,MAAM,CAAC,gBAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC7D;;;;OAIG;IACH,OAAO,GAAG,CAAC,KAAa;QACpB,MAAM,CAAC,kBAAkB,CAAC,GAAG,CAAC,+BAAiB,CAAC,KAAK,CAAC,CAAC,CAAC;IAC1D,CAAC;IAED;;OAEG;IACH,WAAW,YAAY,KAAa,MAAM,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC,CAAC;IAE7E,OAAO,8BAA8B;QACtC,gBAAgB;QACjB,aAAa,CAAC,SAAS,CAAC,KAAK,CAAC;QAC7B,gBAAgB;QACjB,aAAa,CAAC,SAAS,CAAC,EAAE,CAAC;IACzB,CAAC;AAEH,CAAC;AAtCY,qBAAa,gBAsCzB,CAAA;AAED;;GAEG;AACH;IAAA;QACQ,aAAQ,GAAG,IAAI,GAAG,EAAyB,CAAC;IAwBpD,CAAC;IAvBD;;;OAGG;IACH,GAAG,CAAC,KAAa;QACb,EAAE,CAAC,CAAC,KAAK,YAAY,aAAa,CAAC;YAAC,MAAM,CAAC,KAAK,CAAC;QAEjD,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAC7B,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAClC,CAAC;QAED,IAAI,gBAAgB,CAAC,MAAM,GAAG,IAAI,aAAa,CAAC,KAAK,EAAE,aAAa,CAAC,YAAY,CAAC,CAAC;QACnF,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QACjC,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IAED,IAAI,YAAY,KAAa,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;IAEzD,OAAO,8BAA8B;QACtC,gBAAgB;QACjB,WAAW,CAAC,SAAS,CAAC,QAAQ,CAAC;IAC7B,CAAC;AAEH,CAAC;AAzBY,mBAAW,cAyBvB,CAAA;AAED,IAAI,gBAAgB,CAAC,kBAAkB,GAAG,IAAI,WAAW,EAAE,CAAC","sourcesContent":["import {stringify, isBlank} from '../../src/facade/lang';\nimport {BaseException} from '../../src/facade/exceptions';\nimport {resolveForwardRef} from './forward_ref';\n\n/**\n * A unique object used for retrieving items from the {@link ReflectiveInjector}.\n *\n * Keys have:\n * - a system-wide unique `id`.\n * - a `token`.\n *\n * `Key` is used internally by {@link ReflectiveInjector} because its system-wide unique `id` allows\n * the\n * injector to store created objects in a more efficient way.\n *\n * `Key` should not be created directly. {@link ReflectiveInjector} creates keys automatically when\n * resolving\n * providers.\n */\nexport class ReflectiveKey {\n/**\n *  Private\n * @param {?} token\n * @param {?} id\n */\nconstructor(public token: Object,\npublic id: number) {\n    if (isBlank(token)) {\n      throw new BaseException('Token must be defined!');\n    }\n  }\n\n  /**\n   * Returns a stringified token.\n   */\n  get displayName(): string { return stringify(this.token); }\n/**\n *  Retrieves a `Key` for a token.\n * @param {?} token\n * @return {?}\n */\nstatic get(token: Object): ReflectiveKey {\n    return _globalKeyRegistry.get(resolveForwardRef(token));\n  }\n\n  /**\n   * @returns the number of keys registered in the system.\n   */\n  static get numberOfKeys(): number { return _globalKeyRegistry.numberOfKeys; }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nReflectiveKey.prototype.token;\n /** @type {?} */\nReflectiveKey.prototype.id;\n  }\n\n}\n\n/**\n * @internal\n */\nexport class KeyRegistry {\nprivate _allKeys = new Map<Object, ReflectiveKey>();\n/**\n * @param {?} token\n * @return {?}\n */\nget(token: Object): ReflectiveKey {\n    if (token instanceof ReflectiveKey) return token;\n\n    if (this._allKeys.has(token)) {\n      return this._allKeys.get(token);\n    }\n\n    var /** @type {?} */ newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);\n    this._allKeys.set(token, newKey);\n    return newKey;\n  }\n\n  get numberOfKeys(): number { return this._allKeys.size; }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nKeyRegistry.prototype._allKeys;\n  }\n\n}\n\nvar /** @type {?} */ _globalKeyRegistry = new KeyRegistry();\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}