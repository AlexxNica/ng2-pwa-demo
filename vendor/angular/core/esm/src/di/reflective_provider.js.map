{"version":3,"file":"reflective_provider.js","sourceRoot":"","sources":["../../../../../../modules/@angular/core/src/di/reflective_provider.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Type,\n  isBlank,\n  isPresent,\n  isArray,\n} from '../../src/facade/lang';\nimport {MapWrapper, ListWrapper} from '../../src/facade/collection';\nimport {reflector} from '../reflection/reflection';\nimport {ReflectiveKey} from './reflective_key';\nimport {\n  InjectMetadata,\n  OptionalMetadata,\n  SelfMetadata,\n  HostMetadata,\n  SkipSelfMetadata,\n  DependencyMetadata\n} from './metadata';\nimport {\n  NoAnnotationError,\n  MixingMultiProvidersWithRegularProvidersError,\n  InvalidProviderError\n} from './reflective_exceptions';\nimport {resolveForwardRef} from './forward_ref';\nimport {Provider, ProviderBuilder, provide} from './provider';\nimport {isProviderLiteral, createProvider} from './provider_util';\n\n/**\n * `Dependency` is used by the framework to extend DI.\n * This is internal to Angular and should not be used directly.\n */\nexport class ReflectiveDependency {\n/**\n * @param {?} key\n * @param {?} optional\n * @param {?} lowerBoundVisibility\n * @param {?} upperBoundVisibility\n * @param {?} properties\n */\nconstructor(public key: ReflectiveKey,\npublic optional: boolean,\npublic lowerBoundVisibility: any,\npublic upperBoundVisibility: any,\npublic properties: any[]) {}\n/**\n * @param {?} key\n * @return {?}\n */\nstatic fromKey(key: ReflectiveKey): ReflectiveDependency {\n    return new ReflectiveDependency(key, false, null, null, []);\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nReflectiveDependency.prototype.key;\n /** @type {?} */\nReflectiveDependency.prototype.optional;\n /** @type {?} */\nReflectiveDependency.prototype.lowerBoundVisibility;\n /** @type {?} */\nReflectiveDependency.prototype.upperBoundVisibility;\n /** @type {?} */\nReflectiveDependency.prototype.properties;\n  }\n\n}\n\nconst /** @type {?} */ _EMPTY_LIST = /*@ts2dart_const*/[];\n\n/**\n * An internal resolved representation of a {@link Provider} used by the {@link Injector}.\n *\n * It is usually created automatically by `Injector.resolveAndCreate`.\n *\n * It can be created manually, as follows:\n *\n * ### Example ([live demo](http://plnkr.co/edit/RfEnhh8kUEI0G3qsnIeT?p%3Dpreview&p=preview))\n *\n * ```typescript\n * var resolvedProviders = Injector.resolve([new Provider('message', {useValue: 'Hello'})]);\n * var injector = Injector.fromResolvedProviders(resolvedProviders);\n *\n * expect(injector.get('message')).toEqual('Hello');\n * ```\n */\nexport interface ResolvedReflectiveProvider {\n  /**\n   * A key, usually a `Type`.\n   */\n  key: ReflectiveKey;\n\n  /**\n   * Factory function which can return an instance of an object represented by a key.\n   */\n  resolvedFactories: ResolvedReflectiveFactory[];\n\n  /**\n   * Indicates if the provider is a multi-provider or a regular provider.\n   */\n  multiProvider: boolean;\n}\n\n/**\n * See {@link ResolvedProvider} instead.\n *\n * @deprecated\n */\nexport interface ResolvedReflectiveBinding extends ResolvedReflectiveProvider {}\n\nexport class ResolvedReflectiveProvider_ implements ResolvedReflectiveBinding {\n/**\n * @param {?} key\n * @param {?} resolvedFactories\n * @param {?} multiProvider\n */\nconstructor(public key: ReflectiveKey,\npublic resolvedFactories: ResolvedReflectiveFactory[],\npublic multiProvider: boolean) {}\n\n  get resolvedFactory(): ResolvedReflectiveFactory { return this.resolvedFactories[0]; }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nResolvedReflectiveProvider_.prototype.key;\n /** @type {?} */\nResolvedReflectiveProvider_.prototype.resolvedFactories;\n /** @type {?} */\nResolvedReflectiveProvider_.prototype.multiProvider;\n  }\n\n}\n\n/**\n * An internal resolved representation of a factory function created by resolving {@link Provider}.\n */\nexport class ResolvedReflectiveFactory {\n/**\n * @param {?} factory\n * @param {?} dependencies\n */\nconstructor(\npublic factory: Function,\npublic dependencies: ReflectiveDependency[]) {}\n\n  static _tsickle_typeAnnotationsHelper() {\n /** Factory function which can return an instance of an object represented by a key.\n @type {?} */\nResolvedReflectiveFactory.prototype.factory;\n /** Arguments (dependencies) to the `factory` function.\n @type {?} */\nResolvedReflectiveFactory.prototype.dependencies;\n  }\n\n}\n/**\n *  Resolve a single provider.\n * @param {?} provider\n * @return {?}\n */\nexport function resolveReflectiveFactory(provider: Provider): ResolvedReflectiveFactory {\n  var /** @type {?} */ factoryFn: Function;\n  var /** @type {?} */ resolvedDeps;\n  if (isPresent(provider.useClass)) {\n    var /** @type {?} */ useClass = resolveForwardRef(provider.useClass);\n    factoryFn = reflector.factory(useClass);\n    resolvedDeps = _dependenciesFor(useClass);\n  } else if (isPresent(provider.useExisting)) {\n    factoryFn = (aliasInstance) => aliasInstance;\n    resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];\n  } else if (isPresent(provider.useFactory)) {\n    factoryFn = provider.useFactory;\n    resolvedDeps = constructDependencies(provider.useFactory, provider.dependencies);\n  } else {\n    factoryFn = () => provider.useValue;\n    resolvedDeps = _EMPTY_LIST;\n  }\n  return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);\n}\n/**\n *  Converts the {@link Provider} into {@link ResolvedProvider}. * {@link Injector} internally only uses {@link ResolvedProvider}, {@link Provider} contains convenience provider syntax.\n * @param {?} provider\n * @return {?}\n */\nexport function resolveReflectiveProvider(provider: Provider): ResolvedReflectiveProvider {\n  return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.token),\n                                         [resolveReflectiveFactory(provider)], provider.multi);\n}\n/**\n *  Resolve a list of Providers.\n * @param {?} providers\n * @return {?}\n */\nexport function resolveReflectiveProviders(\n    providers: Array<Type | Provider | {[k: string]: any} | any[]>): ResolvedReflectiveProvider[] {\n  var /** @type {?} */ normalized = _normalizeProviders(providers, []);\n  var /** @type {?} */ resolved = normalized.map(resolveReflectiveProvider);\n  return MapWrapper.values(\n      mergeResolvedReflectiveProviders(resolved, new Map<number, ResolvedReflectiveProvider>()));\n}\n/**\n *  Merges a list of ResolvedProviders into a list where each key is contained exactly once and multi providers have been merged.\n * @param {?} providers\n * @param {?} normalizedProvidersMap\n * @return {?}\n */\nexport function mergeResolvedReflectiveProviders(\n    providers: ResolvedReflectiveProvider[],\n    normalizedProvidersMap: Map<number, ResolvedReflectiveProvider>):\n    Map<number, ResolvedReflectiveProvider> {\n  for (var /** @type {?} */ i = 0; i < providers.length; i++) {\n    var /** @type {?} */ provider = providers[i];\n    var /** @type {?} */ existing = normalizedProvidersMap.get(provider.key.id);\n    if (isPresent(existing)) {\n      if (provider.multiProvider !== existing.multiProvider) {\n        throw new MixingMultiProvidersWithRegularProvidersError(existing, provider);\n      }\n      if (provider.multiProvider) {\n        for (var /** @type {?} */ j = 0; j < provider.resolvedFactories.length; j++) {\n          existing.resolvedFactories.push(provider.resolvedFactories[j]);\n        }\n      } else {\n        normalizedProvidersMap.set(provider.key.id, provider);\n      }\n    } else {\n      var /** @type {?} */ resolvedProvider;\n      if (provider.multiProvider) {\n        resolvedProvider = new ResolvedReflectiveProvider_(\n            provider.key, ListWrapper.clone(provider.resolvedFactories), provider.multiProvider);\n      } else {\n        resolvedProvider = provider;\n      }\n      normalizedProvidersMap.set(provider.key.id, resolvedProvider);\n    }\n  }\n  return normalizedProvidersMap;\n}\n/**\n * @param {?} providers\n * @param {?} res\n * @return {?}\n */\nfunction _normalizeProviders(\n    providers: Array<Type | Provider | {[k: string]: any} | ProviderBuilder | any[]>,\n    res: Provider[]): Provider[] {\n  providers.forEach(b => {\n    if (b instanceof Type) {\n      res.push(provide(b, {useClass: b}));\n\n    } else if (b instanceof Provider) {\n      res.push(b);\n\n    } else if (isProviderLiteral(b)) {\n      res.push(createProvider(b));\n\n    } else if (b instanceof Array) {\n      _normalizeProviders(b, res);\n\n    } else if (b instanceof ProviderBuilder) {\n      throw new InvalidProviderError(b.token);\n\n    } else {\n      throw new InvalidProviderError(b);\n    }\n  });\n\n  return res;\n}\n/**\n * @param {?} typeOrFunc\n * @param {?} dependencies\n * @return {?}\n */\nexport function constructDependencies(typeOrFunc: any,\n                                      dependencies: any[]): ReflectiveDependency[] {\n  if (isBlank(dependencies)) {\n    return _dependenciesFor(typeOrFunc);\n  } else {\n    var /** @type {?} */ params: any[][] = dependencies.map(t => [t]);\n    return dependencies.map(t => _extractToken(typeOrFunc, t, params));\n  }\n}\n/**\n * @param {?} typeOrFunc\n * @return {?}\n */\nfunction _dependenciesFor(typeOrFunc: any): ReflectiveDependency[] {\n  var /** @type {?} */ params = reflector.parameters(typeOrFunc);\n  if (isBlank(params)) return [];\n  if (params.some(isBlank)) {\n    throw new NoAnnotationError(typeOrFunc, params);\n  }\n  return params.map((p: any[]) => _extractToken(typeOrFunc, p, params));\n}\n/**\n * @param {?} typeOrFunc\n * @param {?} metadata\n * @param {?} params\n * @return {?}\n */\nfunction _extractToken(typeOrFunc, metadata /*any[] | any*/,\n                       params: any[][]): ReflectiveDependency {\n  var /** @type {?} */ depProps = [];\n  var /** @type {?} */ token = null;\n  var /** @type {?} */ optional = false;\n\n  if (!isArray(metadata)) {\n    if (metadata instanceof InjectMetadata) {\n      return _createDependency(metadata.token, optional, null, null, depProps);\n    } else {\n      return _createDependency(metadata, optional, null, null, depProps);\n    }\n  }\n\n  var /** @type {?} */ lowerBoundVisibility = null;\n  var /** @type {?} */ upperBoundVisibility = null;\n\n  for (var /** @type {?} */ i = 0; i < metadata.length; ++i) {\n    var /** @type {?} */ paramMetadata = metadata[i];\n\n    if (paramMetadata instanceof Type) {\n      token = paramMetadata;\n\n    } else if (paramMetadata instanceof InjectMetadata) {\n      token = paramMetadata.token;\n\n    } else if (paramMetadata instanceof OptionalMetadata) {\n      optional = true;\n\n    } else if (paramMetadata instanceof SelfMetadata) {\n      upperBoundVisibility = paramMetadata;\n\n    } else if (paramMetadata instanceof HostMetadata) {\n      upperBoundVisibility = paramMetadata;\n\n    } else if (paramMetadata instanceof SkipSelfMetadata) {\n      lowerBoundVisibility = paramMetadata;\n\n    } else if (paramMetadata instanceof DependencyMetadata) {\n      if (isPresent(paramMetadata.token)) {\n        token = paramMetadata.token;\n      }\n      depProps.push(paramMetadata);\n    }\n  }\n\n  token = resolveForwardRef(token);\n\n  if (isPresent(token)) {\n    return _createDependency(token, optional, lowerBoundVisibility, upperBoundVisibility, depProps);\n  } else {\n    throw new NoAnnotationError(typeOrFunc, params);\n  }\n}\n/**\n * @param {?} token\n * @param {?} optional\n * @param {?} lowerBoundVisibility\n * @param {?} upperBoundVisibility\n * @param {?} depProps\n * @return {?}\n */\nfunction _createDependency(token, optional, lowerBoundVisibility, upperBoundVisibility,\n                           depProps): ReflectiveDependency {\n  return new ReflectiveDependency(ReflectiveKey.get(token), optional, lowerBoundVisibility,\n                                  upperBoundVisibility, depProps);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}