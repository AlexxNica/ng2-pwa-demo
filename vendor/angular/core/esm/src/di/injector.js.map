{"version":3,"file":"injector.js","sourceRoot":"","sources":["../../../../../../modules/@angular/core/src/di/injector.ts"],"names":[],"mappings":";AAAA,6BAA4B,6BAA6B,CAAC,CAAA;AAE1D,MAAM,gBAAgB,CAAC,mBAAmB,GAAsB,IAAI,MAAM,EAAE,CAAC;AAC/C,0BAAkB,GAAsB,mBAAmB,CAAC;AAE1F;IAEA;;;;;OAKG;IACH,GAAG,CAAC,KAAU,EAAE,aAAmB,IAAS,MAAM,CAAC,0BAAa,EAAE,CAAC,CAAC,CAAC;IAEnE,OAAO,8BAA8B;QACtC,gBAAgB;QACjB,QAAQ,CAAC,kBAAkB,CAAC;IAC1B,CAAC;AAEH,CAAC;AAdQ,2BAAkB,GAAG,mBAAmB,CAAC;AAD5B,gBAAQ,WAe7B,CAAA","sourcesContent":["import {unimplemented} from '../../src/facade/exceptions';\n\nconst /** @type {?} */ _THROW_IF_NOT_FOUND = /*@ts2dart_const*/ new Object();\nexport const /** @type {?} */ THROW_IF_NOT_FOUND = /*@ts2dart_const*/ _THROW_IF_NOT_FOUND;\n\nexport abstract class Injector {\n  static THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n/**\n *  Retrieves an instance from the injector based on the provided token. If not found: - Throws {@link NoProviderError} if no `notFoundValue` that is not equal to Injector.THROW_IF_NOT_FOUND is given - Returns the `notFoundValue` otherwise * ### Example ([live demo](http://plnkr.co/edit/HeXSHg?p=preview)) * ```typescript var injector = ReflectiveInjector.resolveAndCreate([ provide(\"validToken\", {useValue: \"Value\"}) ]); expect(injector.get(\"validToken\")).toEqual(\"Value\"); expect(() => injector.get(\"invalidToken\")).toThrowError(); ``` * `Injector` returns itself when given `Injector` as a token. * ```typescript var injector = ReflectiveInjector.resolveAndCreate([]); expect(injector.get(Injector)).toBe(injector); ```\n * @param {?} token\n * @param {?=} notFoundValue\n * @return {?}\n */\nget(token: any, notFoundValue?: any): any { return unimplemented(); }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nInjector.THROW_IF_NOT_FOUND;\n  }\n\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}