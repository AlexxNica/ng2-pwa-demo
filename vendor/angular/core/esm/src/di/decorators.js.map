{"version":3,"file":"decorators.js","sourceRoot":"","sources":["../../../../../../modules/@angular/core/src/di/decorators.ts"],"names":[],"mappings":";AAAA,2BAOO,YAAY,CAAC,CAAA;AACpB,6BAAgD,oBAAoB,CAAC,CAAA;AAkDrE;;GAEG;AACyB,cAAM,GAA0B,+BAAkB,CAAC,yBAAc,CAAC,CAAC;AAE/F;;GAEG;AACyB,gBAAQ,GAA4B,+BAAkB,CAAC,2BAAgB,CAAC,CAAC;AAErG;;GAEG;AACyB,kBAAU,GAA8C,CACrD,0BAAa,CAAC,6BAAkB,CAAE,CAAC,CAAC;AAEnE;;GAEG;AACyB,YAAI,GAAwB,+BAAkB,CAAC,uBAAY,CAAC,CAAC;AAEzF;;GAEG;AACyB,YAAI,GAAwB,+BAAkB,CAAC,uBAAY,CAAC,CAAC;AAEzF;;GAEG;AACyB,gBAAQ,GAA4B,+BAAkB,CAAC,2BAAgB,CAAC,CAAC","sourcesContent":["import {\n  InjectMetadata,\n  OptionalMetadata,\n  InjectableMetadata,\n  SelfMetadata,\n  HostMetadata,\n  SkipSelfMetadata\n} from './metadata';\nimport {makeDecorator, makeParamDecorator} from '../util/decorators';\n\n/**\n * Factory for creating {@link InjectMetadata}.\n */\nexport interface InjectMetadataFactory {\n  (token: any): any;\n  new (token: any): InjectMetadata;\n}\n\n/**\n * Factory for creating {@link OptionalMetadata}.\n */\nexport interface OptionalMetadataFactory {\n  (): any;\n  new (): OptionalMetadata;\n}\n\n/**\n * Factory for creating {@link InjectableMetadata}.\n */\nexport interface InjectableMetadataFactory {\n  (): any;\n  new (): InjectableMetadata;\n}\n\n/**\n * Factory for creating {@link SelfMetadata}.\n */\nexport interface SelfMetadataFactory {\n  (): any;\n  new (): SelfMetadata;\n}\n\n/**\n * Factory for creating {@link HostMetadata}.\n */\nexport interface HostMetadataFactory {\n  (): any;\n  new (): HostMetadata;\n}\n\n/**\n * Factory for creating {@link SkipSelfMetadata}.\n */\nexport interface SkipSelfMetadataFactory {\n  (): any;\n  new (): SkipSelfMetadata;\n}\n\n/**\n * Factory for creating {@link InjectMetadata}.\n */\nexport var /** @type {?} */ Inject: InjectMetadataFactory = makeParamDecorator(InjectMetadata);\n\n/**\n * Factory for creating {@link OptionalMetadata}.\n */\nexport var /** @type {?} */ Optional: OptionalMetadataFactory = makeParamDecorator(OptionalMetadata);\n\n/**\n * Factory for creating {@link InjectableMetadata}.\n */\nexport var /** @type {?} */ Injectable: InjectableMetadataFactory = /** @type {?} */((\n    <InjectableMetadataFactory>makeDecorator(InjectableMetadata)));\n\n/**\n * Factory for creating {@link SelfMetadata}.\n */\nexport var /** @type {?} */ Self: SelfMetadataFactory = makeParamDecorator(SelfMetadata);\n\n/**\n * Factory for creating {@link HostMetadata}.\n */\nexport var /** @type {?} */ Host: HostMetadataFactory = makeParamDecorator(HostMetadata);\n\n/**\n * Factory for creating {@link SkipSelfMetadata}.\n */\nexport var /** @type {?} */ SkipSelf: SkipSelfMetadataFactory = makeParamDecorator(SkipSelfMetadata);\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}