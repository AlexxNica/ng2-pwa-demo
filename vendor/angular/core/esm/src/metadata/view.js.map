{"version":3,"file":"view.js","sourceRoot":"","sources":["../../../../../../modules/@angular/core/src/metadata/view.ts"],"names":[],"mappings":";AAEW,yBAAiB,GAAQ,EAAE,CAAC;AACvC,yBAAiB,CAAC,QAAQ,GAAG,CAAC,CAAC;AAC/B,yBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC;AAC7B,yBAAiB,CAAC,IAAI,GAAG,CAAC,CAAC;AAC3B,yBAAiB,CAAC,yBAAiB,CAAC,QAAQ,CAAC,GAAG,UAAU,CAAC;AAC3D,yBAAiB,CAAC,yBAAiB,CAAC,MAAM,CAAC,GAAG,QAAQ,CAAC;AACvD,yBAAiB,CAAC,yBAAiB,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;AAGvB,iCAAyB,GACjD,CAAC,yBAAiB,CAAC,QAAQ,EAAE,yBAAiB,CAAC,MAAM,EAAE,yBAAiB,CAAC,IAAI,CAAC,CAAC;AAGnF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6BG;AACH;IA4DA;;OAEG;IACH,YAAY,EAAC,WAAW,EAAE,QAAQ,EAAE,UAAU,EAAE,KAAK,EAAE,aAAa,EAAE,MAAM,EAAE,SAAS,EAAC,GAQlF,EAAE;QACJ,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;IACrC,CAAC;IAED,OAAO,8BAA8B;QACtC;oBACY;QACb,YAAY,CAAC,SAAS,CAAC,WAAW,CAAC;QAClC;oBACY;QACb,YAAY,CAAC,SAAS,CAAC,QAAQ,CAAC;QAC/B;oBACY;QACb,YAAY,CAAC,SAAS,CAAC,SAAS,CAAC;QAChC;oBACY;QACb,YAAY,CAAC,SAAS,CAAC,MAAM,CAAC;QAC7B;;oBAEY;QACb,YAAY,CAAC,SAAS,CAAC,UAAU,CAAC;QACjC,gBAAgB;QACjB,YAAY,CAAC,SAAS,CAAC,KAAK,CAAC;QAC5B;oBACY;QACb,YAAY,CAAC,SAAS,CAAC,aAAa,CAAC;IACnC,CAAC;AAEH,CAAC;AAzGY,oBAAY,eAyGxB,CAAA","sourcesContent":["import {Type} from '../../src/facade/lang';\nexport type ViewEncapsulation = number;\nexport let ViewEncapsulation: any = {};\nViewEncapsulation.Emulated = 0;\nViewEncapsulation.Native = 1;\nViewEncapsulation.None = 2;\nViewEncapsulation[ViewEncapsulation.Emulated] = \"Emulated\";\nViewEncapsulation[ViewEncapsulation.Native] = \"Native\";\nViewEncapsulation[ViewEncapsulation.None] = \"None\";\n\n\nexport var /** @type {?} */ VIEW_ENCAPSULATION_VALUES =\n    [ViewEncapsulation.Emulated, ViewEncapsulation.Native, ViewEncapsulation.None];\n\n\n/**\n * Metadata properties available for configuring Views.\n *\n * Each Angular component requires a single `@Component` and at least one `@View` annotation. The\n * `@View` annotation specifies the HTML template to use, and lists the directives that are active\n * within the template.\n *\n * When a component is instantiated, the template is loaded into the component's shadow root, and\n * the expressions and statements in the template are evaluated against the component.\n *\n * For details on the `@Component` annotation, see {@link ComponentMetadata}.\n *\n * ### Example\n *\n * ```\n * @Component({\n *   selector: 'greet',\n *   template: 'Hello {{name}}!',\n *   directives: [GreetUser, Bold]\n * })\n * class Greet {\n *   name: string;\n *\n *   constructor() {\n *     this.name = 'World';\n *   }\n * }\n * ```\n * @ts2dart_const\n */\nexport class ViewMetadata {\n  /**\n   * Specifies a template URL for an Angular component.\n   *\n   * NOTE: Only one of `templateUrl` or `template` can be defined per View.\n   *\n   * <!-- TODO: what's the url relative to? -->\n   */\n  templateUrl: string;\n\n  /**\n   * Specifies an inline template for an Angular component.\n   *\n   * NOTE: Only one of `templateUrl` or `template` can be defined per View.\n   */\n  template: string;\n\n  /**\n   * Specifies stylesheet URLs for an Angular component.\n   *\n   * <!-- TODO: what's the url relative to? -->\n   */\n  styleUrls: string[];\n\n  /**\n   * Specifies an inline stylesheet for an Angular component.\n   */\n  styles: string[];\n\n  /**\n   * Specifies a list of directives that can be used within a template.\n   *\n   * Directives must be listed explicitly to provide proper component encapsulation.\n   *\n   * ### Example\n   *\n   * ```javascript\n   * @Component({\n   *   selector: 'my-component',\n   *   directives: [NgFor]\n   *   template: '\n   *   <ul>\n   *     <li *ngFor=\"let item of items\">{{item}}</li>\n   *   </ul>'\n   * })\n   * class MyComponent {\n   * }\n   * ```\n   */\n  directives: Array<Type | any[]>;\n\n  pipes: Array<Type | any[]>;\n\n  /**\n   * Specify how the template and the styles should be encapsulated.\n   * The default is {@link ViewEncapsulation#Emulated `ViewEncapsulation.Emulated`} if the view\n   * has styles,\n   * otherwise {@link ViewEncapsulation#None `ViewEncapsulation.None`}.\n   */\n  encapsulation: ViewEncapsulation;\n/**\n * @param {?=} __0\n */\nconstructor({templateUrl, template, directives, pipes, encapsulation, styles, styleUrls}: {\n    templateUrl?: string,\n    template?: string,\n    directives?: Array<Type | any[]>,\n    pipes?: Array<Type | any[]>,\n    encapsulation?: ViewEncapsulation,\n    styles?: string[],\n    styleUrls?: string[],\n  } = {}) {\n    this.templateUrl = templateUrl;\n    this.template = template;\n    this.styleUrls = styleUrls;\n    this.styles = styles;\n    this.directives = directives;\n    this.pipes = pipes;\n    this.encapsulation = encapsulation;\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** Specifies a template URL for an Angular component. * NOTE: Only one of `templateUrl` or `template` can be defined per View. * <!-- TODO: what's the url relative to? -->\n @type {?} */\nViewMetadata.prototype.templateUrl;\n /** Specifies an inline template for an Angular component. * NOTE: Only one of `templateUrl` or `template` can be defined per View.\n @type {?} */\nViewMetadata.prototype.template;\n /** Specifies stylesheet URLs for an Angular component. * <!-- TODO: what's the url relative to? -->\n @type {?} */\nViewMetadata.prototype.styleUrls;\n /** Specifies an inline stylesheet for an Angular component.\n @type {?} */\nViewMetadata.prototype.styles;\n /** Specifies a list of directives that can be used within a template. * Directives must be listed explicitly to provide proper component encapsulation. * ### Example * ```javascript\n@Component({\n @type {?} */\nViewMetadata.prototype.directives;\n /** @type {?} */\nViewMetadata.prototype.pipes;\n /** Specify how the template and the styles should be encapsulated. The default is {@link ViewEncapsulation#Emulated `ViewEncapsulation.Emulated`} if the view has styles, otherwise {@link ViewEncapsulation#None `ViewEncapsulation.None`}.\n @type {?} */\nViewMetadata.prototype.encapsulation;\n  }\n\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}