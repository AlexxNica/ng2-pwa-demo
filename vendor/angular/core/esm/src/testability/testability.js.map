{"version":3,"file":"testability.js","sourceRoot":"","sources":["../../../../../../modules/@angular/core/src/testability/testability.ts"],"names":[],"mappings":"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","sourcesContent":["import {Map, MapWrapper} from '../../src/facade/collection';\nimport {scheduleMicroTask} from '../../src/facade/lang';\nimport {BaseException} from '../../src/facade/exceptions';\nimport {NgZone} from '../zone/ng_zone';\nimport {ObservableWrapper} from '../../src/facade/async';\nimport {Injectable} from '../di/decorators';\nexport class Testability {\n  /** @internal */\n  _pendingCount: number = 0;\n  /** @internal */\n  _isZoneStable: boolean = true;\n  /**\n   * Whether any work was done since the last 'whenStable' callback. This is\n   * useful to detect if this could have potentially destabilized another\n   * component while it is stabilizing.\n   * @internal\n   */\n  _didWork: boolean = false;\n  /** @internal */\n  _callbacks: Function[] = [];\n/**\n * @param {?} _ngZone\n */\nconstructor(private _ngZone: NgZone) { this._watchAngularEvents(); }\n/**\n * @internal\n * @return {?}\n */\n_watchAngularEvents(): void {\n    ObservableWrapper.subscribe(this._ngZone.onUnstable, (_) => {\n      this._didWork = true;\n      this._isZoneStable = false;\n    });\n\n    this._ngZone.runOutsideAngular(() => {\n      ObservableWrapper.subscribe(this._ngZone.onStable, (_) => {\n        NgZone.assertNotInAngularZone();\n        scheduleMicroTask(() => {\n          this._isZoneStable = true;\n          this._runCallbacksIfReady();\n        });\n      });\n    });\n  }\n/**\n * @return {?}\n */\nincreasePendingRequestCount(): number {\n    this._pendingCount += 1;\n    this._didWork = true;\n    return this._pendingCount;\n  }\n/**\n * @return {?}\n */\ndecreasePendingRequestCount(): number {\n    this._pendingCount -= 1;\n    if (this._pendingCount < 0) {\n      throw new BaseException('pending async requests below zero');\n    }\n    this._runCallbacksIfReady();\n    return this._pendingCount;\n  }\n/**\n * @return {?}\n */\nisStable(): boolean {\n    return this._isZoneStable && this._pendingCount == 0 && !this._ngZone.hasPendingMacrotasks;\n  }\n/**\n * @internal\n * @return {?}\n */\n_runCallbacksIfReady(): void {\n    if (this.isStable()) {\n      // Schedules the call backs in a new frame so that it is always async.\n      scheduleMicroTask(() => {\n        while (this._callbacks.length !== 0) {\n          (this._callbacks.pop())(this._didWork);\n        }\n        this._didWork = false;\n      });\n    } else {\n      // Not Ready\n      this._didWork = true;\n    }\n  }\n/**\n * @param {?} callback\n * @return {?}\n */\nwhenStable(callback: Function): void {\n    this._callbacks.push(callback);\n    this._runCallbacksIfReady();\n  }\n/**\n * @return {?}\n */\ngetPendingRequestCount(): number { return this._pendingCount; }\n/**\n * @param {?} using\n * @param {?} provider\n * @param {?} exactMatch\n * @return {?}\n */\nfindBindings(using: any, provider: string, exactMatch: boolean): any[] {\n    // TODO(juliemr): implement.\n    return [];\n  }\n/**\n * @param {?} using\n * @param {?} provider\n * @param {?} exactMatch\n * @return {?}\n */\nfindProviders(using: any, provider: string, exactMatch: boolean): any[] {\n    // TODO(juliemr): implement.\n    return [];\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @internal\n @type {?} */\nTestability.prototype._pendingCount;\n /** @internal\n @type {?} */\nTestability.prototype._isZoneStable;\n /** Whether any work was done since the last 'whenStable' callback. This is useful to detect if this could have potentially destabilized another component while it is stabilizing.\n@internal\n @type {?} */\nTestability.prototype._didWork;\n /** @internal\n @type {?} */\nTestability.prototype._callbacks;\n /** @type {?} */\nTestability.prototype._ngZone;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */ static ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: NgZone, },\n];\n}\nexport class TestabilityRegistry {\n  /** @internal */\n  _applications = new Map<any, Testability>();\n/**\n */\nconstructor() { _testabilityGetter.addToWindow(this); }\n/**\n * @param {?} token\n * @param {?} testability\n * @return {?}\n */\nregisterApplication(token: any, testability: Testability) {\n    this._applications.set(token, testability);\n  }\n/**\n * @param {?} elem\n * @return {?}\n */\ngetTestability(elem: any): Testability { return this._applications.get(elem); }\n/**\n * @return {?}\n */\ngetAllTestabilities(): Testability[] { return MapWrapper.values(this._applications); }\n/**\n * @return {?}\n */\ngetAllRootElements(): any[] { return MapWrapper.keys(this._applications); }\n/**\n * @param {?} elem\n * @param {?=} findInAncestors\n * @return {?}\n */\nfindTestabilityInTree(elem: Node, findInAncestors: boolean = true): Testability {\n    return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @internal\n @type {?} */\nTestabilityRegistry.prototype._applications;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */ static ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n];\n}\n\n/**\n * Adapter interface for retrieving the `Testability` service associated for a\n * particular context.\n */\nexport interface GetTestability {\n  addToWindow(registry: TestabilityRegistry): void;\n  findTestabilityInTree(registry: TestabilityRegistry, elem: any,\n                        findInAncestors: boolean): Testability;\n}\n\n/* @ts2dart_const */\nclass _NoopGetTestability implements GetTestability {\n/**\n * @param {?} registry\n * @return {?}\n */\naddToWindow(registry: TestabilityRegistry): void {}\n/**\n * @param {?} registry\n * @param {?} elem\n * @param {?} findInAncestors\n * @return {?}\n */\nfindTestabilityInTree(registry: TestabilityRegistry, elem: any,\n                        findInAncestors: boolean): Testability {\n    return null;\n  }\n}\n/**\n *  Set the {@link GetTestability} implementation used by the Angular testing framework.\n * @param {?} getter\n * @return {?}\n */\nexport function setTestabilityGetter(getter: GetTestability): void {\n  _testabilityGetter = getter;\n}\n\nvar /** @type {?} */ _testabilityGetter: GetTestability = /*@ts2dart_const*/ new _NoopGetTestability();\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}