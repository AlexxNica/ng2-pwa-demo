{"version":3,"file":"default_iterable_differ.js","sourceRoot":"","sources":["../../../../../../../modules/@angular/core/src/change_detection/differs/default_iterable_differ.ts"],"names":[],"mappings":";AAAA,6BAA4B,gCAAgC,CAAC,CAAA;AAC7D,6BAAkD,gCAAgC,CAAC,CAAA;AAEnF,uBAOO,0BAA0B,CAAC,CAAA;AAKlC,oBAAoB;AACpB;IACA;OACG;IACH;IAAe,CAAC;IAChB;;;OAGG;IACH,QAAQ,CAAC,GAAW,IAAa,MAAM,CAAC,+BAAkB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAClE;;;;OAIG;IACH,MAAM,CAAC,KAAwB,EAAE,SAAqB;QAClD,MAAM,CAAC,IAAI,qBAAqB,CAAC,SAAS,CAAC,CAAC;IAC9C,CAAC;AACH,CAAC;AAjBY,oCAA4B,+BAiBxC,CAAA;AAED,IAAI,gBAAgB,CAAC,eAAe,GAAG,CAAC,KAAa,EAAE,IAAS,KAAK,IAAI,CAAC;AAE1E;IAgBA;;OAEG;IACH,YAAoB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;QAlBlC,YAAO,GAAW,IAAI,CAAC;QACvB,gBAAW,GAAG,IAAI,CAAC;QACnB,mBAAc,GAAkB,IAAI,CAAC;QACrC,qBAAgB,GAAkB,IAAI,CAAC;QACvC,oBAAe,GAA2B,IAAI,CAAC;QAC/C,YAAO,GAA2B,IAAI,CAAC;QACvC,YAAO,GAA2B,IAAI,CAAC;QACvC,mBAAc,GAA2B,IAAI,CAAC;QAC9C,mBAAc,GAA2B,IAAI,CAAC;QAC9C,eAAU,GAA2B,IAAI,CAAC;QAC1C,eAAU,GAA2B,IAAI,CAAC;QAC1C,kBAAa,GAA2B,IAAI,CAAC;QAC7C,kBAAa,GAA2B,IAAI,CAAC;QAC7C,yBAAoB,GAA2B,IAAI,CAAC;QACpD,yBAAoB,GAA2B,IAAI,CAAC;QAKxD,IAAI,CAAC,UAAU,GAAG,gBAAS,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,UAAU,GAAG,eAAe,CAAC;IACnF,CAAC;IAED,IAAI,UAAU,KAAK,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;IAE7C,IAAI,MAAM,KAAa,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;IAC/C;;;OAGG;IACH,WAAW,CAAC,EAAY;QACpB,IAAI,gBAAgB,CAAC,MAA8B,CAAC;QACpD,GAAG,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,EAAE,MAAM,KAAK,IAAI,EAAE,MAAM,GAAG,MAAM,CAAC,KAAK,EAAE,CAAC;YACnE,EAAE,CAAC,MAAM,CAAC,CAAC;QACb,CAAC;IACH,CAAC;IACH;;;OAGG;IACH,mBAAmB,CAAC,EAAY;QAC5B,IAAI,gBAAgB,CAAC,MAA8B,CAAC;QACpD,GAAG,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC,eAAe,EAAE,MAAM,KAAK,IAAI,EAAE,MAAM,GAAG,MAAM,CAAC,aAAa,EAAE,CAAC;YACnF,EAAE,CAAC,MAAM,CAAC,CAAC;QACb,CAAC;IACH,CAAC;IACH;;;OAGG;IACH,gBAAgB,CAAC,EAAY;QACzB,IAAI,gBAAgB,CAAC,MAA8B,CAAC;QACpD,GAAG,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC,cAAc,EAAE,MAAM,KAAK,IAAI,EAAE,MAAM,GAAG,MAAM,CAAC,UAAU,EAAE,CAAC;YAC/E,EAAE,CAAC,MAAM,CAAC,CAAC;QACb,CAAC;IACH,CAAC;IACH;;;OAGG;IACH,gBAAgB,CAAC,EAAY;QACzB,IAAI,gBAAgB,CAAC,MAA8B,CAAC;QACpD,GAAG,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC,UAAU,EAAE,MAAM,KAAK,IAAI,EAAE,MAAM,GAAG,MAAM,CAAC,UAAU,EAAE,CAAC;YAC3E,EAAE,CAAC,MAAM,CAAC,CAAC;QACb,CAAC;IACH,CAAC;IACH;;;OAGG;IACH,kBAAkB,CAAC,EAAY;QAC3B,IAAI,gBAAgB,CAAC,MAA8B,CAAC;QACpD,GAAG,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC,aAAa,EAAE,MAAM,KAAK,IAAI,EAAE,MAAM,GAAG,MAAM,CAAC,YAAY,EAAE,CAAC;YAChF,EAAE,CAAC,MAAM,CAAC,CAAC;QACb,CAAC;IACH,CAAC;IACH;;;OAGG;IACH,qBAAqB,CAAC,EAAY;QAC9B,IAAI,gBAAgB,CAAC,MAA8B,CAAC;QACpD,GAAG,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC,oBAAoB,EAAE,MAAM,KAAK,IAAI,EAAE,MAAM,GAAG,MAAM,CAAC,mBAAmB,EAAE,CAAC;YAC9F,EAAE,CAAC,MAAM,CAAC,CAAC;QACb,CAAC;IACH,CAAC;IACH;;;OAGG;IACH,IAAI,CAAC,UAAe;QAChB,EAAE,CAAC,CAAC,cAAO,CAAC,UAAU,CAAC,CAAC;YAAC,UAAU,GAAG,EAAE,CAAC;QACzC,EAAE,CAAC,CAAC,CAAC,+BAAkB,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YACpC,MAAM,IAAI,0BAAa,CAAC,yBAAyB,UAAU,GAAG,CAAC,CAAC;QAClE,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YAC3B,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IACH;;OAEG;IACH,SAAS,KAAI,CAAC;IACd;;;OAGG;IACH,KAAK,CAAC,UAAe;QACjB,IAAI,CAAC,MAAM,EAAE,CAAC;QAEd,IAAI,gBAAgB,CAAC,MAAM,GAA2B,IAAI,CAAC,OAAO,CAAC;QACnE,IAAI,gBAAgB,CAAC,UAAU,GAAY,KAAK,CAAC;QACjD,IAAI,gBAAgB,CAAC,KAAa,CAAC;QACnC,IAAI,gBAAgB,CAAC,IAAI,CAAC;QAC1B,IAAI,gBAAgB,CAAC,WAAW,CAAC;QACjC,EAAE,CAAC,CAAC,cAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YACxB,IAAI,gBAAgB,CAAC,IAAI,GAAG,UAAU,CAAC;YACvC,IAAI,CAAC,OAAO,GAAG,UAAU,CAAC,MAAM,CAAC;YAEjC,GAAG,CAAC,CAAC,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,IAAI,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE,CAAC;gBAC9C,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC;gBACnB,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;gBAC3C,EAAE,CAAC,CAAC,MAAM,KAAK,IAAI,IAAI,CAAC,qBAAc,CAAC,MAAM,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC;oBACtE,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC;oBAC1D,UAAU,GAAG,IAAI,CAAC;gBACpB,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;wBACf,qDAAqD;wBACrD,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,IAAI,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC;oBACrE,CAAC;oBACD,EAAE,CAAC,CAAC,CAAC,qBAAc,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;wBAAC,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;gBAChF,CAAC;gBAED,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC;YACxB,CAAC;QACH,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,KAAK,GAAG,CAAC,CAAC;YACV,4BAAe,CAAC,UAAU,EAAE,CAAC,IAAI;gBAC/B,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;gBAC3C,EAAE,CAAC,CAAC,MAAM,KAAK,IAAI,IAAI,CAAC,qBAAc,CAAC,MAAM,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC;oBACtE,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC;oBAC1D,UAAU,GAAG,IAAI,CAAC;gBACpB,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;wBACf,qDAAqD;wBACrD,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,IAAI,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC;oBACrE,CAAC;oBACD,EAAE,CAAC,CAAC,CAAC,qBAAc,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;wBAAC,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;gBAChF,CAAC;gBACD,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC;gBACtB,KAAK,EAAE,CAAC;YACV,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACvB,CAAC;QAED,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QACvB,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED;;OAEG;IACH,IAAI,OAAO;QACT,MAAM,CAAC,IAAI,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,UAAU,KAAK,IAAI;YACxD,IAAI,CAAC,aAAa,KAAK,IAAI,IAAI,IAAI,CAAC,oBAAoB,KAAK,IAAI,CAAC;IAC3E,CAAC;IACH;;;;OAIG;IACH,MAAM;QACF,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YACjB,IAAI,gBAAgB,CAAC,MAA8B,CAAC;YACpD,IAAI,gBAAgB,CAAC,UAAkC,CAAC;YAExD,GAAG,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,OAAO,EAAE,MAAM,KAAK,IAAI,EAAE,MAAM,GAAG,MAAM,CAAC,KAAK,EAAE,CAAC;gBAC1F,MAAM,CAAC,aAAa,GAAG,MAAM,CAAC,KAAK,CAAC;YACtC,CAAC;YAED,GAAG,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC,cAAc,EAAE,MAAM,KAAK,IAAI,EAAE,MAAM,GAAG,MAAM,CAAC,UAAU,EAAE,CAAC;gBAC/E,MAAM,CAAC,aAAa,GAAG,MAAM,CAAC,YAAY,CAAC;YAC7C,CAAC;YACD,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;YAEjD,GAAG,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC,UAAU,EAAE,MAAM,KAAK,IAAI,EAAE,MAAM,GAAG,UAAU,EAAE,CAAC;gBACpE,MAAM,CAAC,aAAa,GAAG,MAAM,CAAC,YAAY,CAAC;gBAC3C,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;YACjC,CAAC;YACD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;YACzC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;YAC/C,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;QAI/D,CAAC;IACH,CAAC;IACH;;;;;;;;OAQG;IACH,SAAS,CAAC,MAA8B,EAAE,IAAS,EAAE,WAAgB,EACzD,KAAa;QACrB,kEAAkE;QAClE,IAAI,gBAAgB,CAAC,cAAsC,CAAC;QAE5D,EAAE,CAAC,CAAC,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC;YACpB,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC;QAChC,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,cAAc,GAAG,MAAM,CAAC,KAAK,CAAC;YAC9B,kFAAkF;YAClF,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACvB,CAAC;QAED,kDAAkD;QAClD,MAAM,GAAG,IAAI,CAAC,cAAc,KAAK,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;QAC3F,EAAE,CAAC,CAAC,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC;YACpB,0EAA0E;YAC1E,wFAAwF;YACxF,EAAE,CAAC,CAAC,CAAC,qBAAc,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBAAC,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;YAE9E,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,cAAc,EAAE,KAAK,CAAC,CAAC;QACjD,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,qCAAqC;YACrC,MAAM,GAAG,IAAI,CAAC,gBAAgB,KAAK,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;YACxF,EAAE,CAAC,CAAC,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC;gBACpB,+EAA+E;gBAC/E,wFAAwF;gBACxF,EAAE,CAAC,CAAC,CAAC,qBAAc,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;oBAAC,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;gBAE9E,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,cAAc,EAAE,KAAK,CAAC,CAAC;YACrD,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,4BAA4B;gBAC5B,MAAM;oBACF,IAAI,CAAC,SAAS,CAAC,IAAI,sBAAsB,CAAC,IAAI,EAAE,WAAW,CAAC,EAAE,cAAc,EAAE,KAAK,CAAC,CAAC;YAC3F,CAAC;QACH,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IACH;;;;;;;;OAQG;IACH,kBAAkB,CAAC,MAA8B,EAAE,IAAS,EAAE,WAAgB,EACzD,KAAa;QAC9B,IAAI,gBAAgB,CAAC,cAAc,GAC/B,IAAI,CAAC,gBAAgB,KAAK,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QACnF,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;YAC5B,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,cAAc,EAAE,MAAM,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QACpE,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,YAAY,IAAI,KAAK,CAAC,CAAC,CAAC;YACxC,MAAM,CAAC,YAAY,GAAG,KAAK,CAAC;YAC5B,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAClC,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IACH;;;;;OAKG;IACH,SAAS,CAAC,MAA8B;QACpC,2CAA2C;QAC3C,OAAO,MAAM,KAAK,IAAI,EAAE,CAAC;YACvB,IAAI,gBAAgB,CAAC,UAAU,GAA2B,MAAM,CAAC,KAAK,CAAC;YACvE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;YAC1C,MAAM,GAAG,UAAU,CAAC;QACtB,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,KAAK,IAAI,CAAC,CAAC,CAAC;YACnC,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC;QAChC,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;YACjC,IAAI,CAAC,cAAc,CAAC,UAAU,GAAG,IAAI,CAAC;QACxC,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,KAAK,IAAI,CAAC,CAAC,CAAC;YAC7B,IAAI,CAAC,UAAU,CAAC,UAAU,GAAG,IAAI,CAAC;QACpC,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC,CAAC;YAC1B,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC;QAC5B,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,KAAK,IAAI,CAAC,CAAC,CAAC;YAChC,IAAI,CAAC,aAAa,CAAC,YAAY,GAAG,IAAI,CAAC;QACzC,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,CAAC,oBAAoB,KAAK,IAAI,CAAC,CAAC,CAAC;YACvC,IAAI,CAAC,oBAAoB,CAAC,mBAAmB,GAAG,IAAI,CAAC;QACvD,CAAC;IACH,CAAC;IACH;;;;;;OAMG;IACH,cAAc,CAAC,MAA8B,EAAE,UAAkC,EAChE,KAAa;QAC1B,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,KAAK,IAAI,CAAC,CAAC,CAAC;YACnC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACvC,CAAC;QACD,IAAI,gBAAgB,CAAC,IAAI,GAAG,MAAM,CAAC,YAAY,CAAC;QAChD,IAAI,gBAAgB,CAAC,IAAI,GAAG,MAAM,CAAC,YAAY,CAAC;QAEhD,EAAE,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC;YAClB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;QAC5B,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QAC3B,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC;YAClB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;QAC5B,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QAC3B,CAAC;QAED,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;QAC7C,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAChC,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IACH;;;;;;OAMG;IACH,UAAU,CAAC,MAA8B,EAAE,UAAkC,EAChE,KAAa;QACtB,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACrB,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;QAC7C,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAChC,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IACH;;;;;;OAMG;IACH,SAAS,CAAC,MAA8B,EAAE,UAAkC,EAChE,KAAa;QACrB,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;QAE7C,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;YACjC,aAAa;YACb,wCAAwC;YACxC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC;QACrD,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,aAAa;YACb,8CAA8C;YAC9C,sCAAsC;YACtC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,UAAU,GAAG,MAAM,CAAC;QAChE,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IACH;;;;;;OAMG;IACH,YAAY,CAAC,MAA8B,EAAE,UAAkC,EAChE,KAAa;QACxB,aAAa;QACb,gCAAgC;QAChC,iCAAiC;QACjC,iCAAiC;QAEjC,IAAI,gBAAgB,CAAC,IAAI,GAA2B,UAAU,KAAK,IAAI,GAAG,IAAI,CAAC,OAAO,GAAG,UAAU,CAAC,KAAK,CAAC;QAC1G,aAAa;QACb,0BAA0B;QAC1B,gCAAgC;QAChC,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC;QACpB,MAAM,CAAC,KAAK,GAAG,UAAU,CAAC;QAC1B,EAAE,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC;YAClB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACxB,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC;QACtB,CAAC;QACD,EAAE,CAAC,CAAC,UAAU,KAAK,IAAI,CAAC,CAAC,CAAC;YACxB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACxB,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,UAAU,CAAC,KAAK,GAAG,MAAM,CAAC;QAC5B,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;YACjC,IAAI,CAAC,cAAc,GAAG,IAAI,aAAa,EAAE,CAAC;QAC5C,CAAC;QACD,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAEhC,MAAM,CAAC,YAAY,GAAG,KAAK,CAAC;QAC5B,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IACH;;;;OAIG;IACH,OAAO,CAAC,MAA8B;QAClC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;IACnD,CAAC;IACH;;;;OAIG;IACH,OAAO,CAAC,MAA8B;QAClC,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;YACjC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACrC,CAAC;QAED,IAAI,gBAAgB,CAAC,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC;QACzC,IAAI,gBAAgB,CAAC,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC;QAEzC,aAAa;QACb,0CAA0C;QAC1C,0CAA0C;QAE1C,EAAE,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC;YAClB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACtB,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QACpB,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC;YAClB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACtB,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QACpB,CAAC;QAED,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IACH;;;;;OAKG;IACH,WAAW,CAAC,MAA8B,EAAE,OAAe;QACvD,aAAa;QACb,sCAAsC;QAEtC,EAAE,CAAC,CAAC,MAAM,CAAC,aAAa,KAAK,OAAO,CAAC,CAAC,CAAC;YACrC,MAAM,CAAC,MAAM,CAAC;QAChB,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,KAAK,IAAI,CAAC,CAAC,CAAC;YAC7B,aAAa;YACb,+BAA+B;YAC/B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC;QAC7C,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,aAAa;YACb,0CAA0C;YAC1C,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,UAAU,GAAG,MAAM,CAAC;QACxD,CAAC;QAED,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IACH;;;;OAIG;IACH,cAAc,CAAC,MAA8B;QACzC,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,KAAK,IAAI,CAAC,CAAC,CAAC;YACnC,IAAI,CAAC,gBAAgB,GAAG,IAAI,aAAa,EAAE,CAAC;QAC9C,CAAC;QACD,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAClC,MAAM,CAAC,YAAY,GAAG,IAAI,CAAC;QAC3B,MAAM,CAAC,YAAY,GAAG,IAAI,CAAC;QAE3B,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,KAAK,IAAI,CAAC,CAAC,CAAC;YAChC,aAAa;YACb,kCAAkC;YAClC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC;YACjD,MAAM,CAAC,YAAY,GAAG,IAAI,CAAC;QAC7B,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,aAAa;YACb,+CAA+C;YAC/C,wCAAwC;YACxC,MAAM,CAAC,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC;YACzC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,YAAY,GAAG,MAAM,CAAC;QAChE,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IACH;;;;;OAKG;IACH,kBAAkB,CAAC,MAA8B,EAAE,IAAS;QACxD,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;QACnB,EAAE,CAAC,CAAC,IAAI,CAAC,oBAAoB,KAAK,IAAI,CAAC,CAAC,CAAC;YACvC,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,oBAAoB,GAAG,MAAM,CAAC;QACjE,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,oBAAoB,CAAC,mBAAmB,GAAG,MAAM,CAAC;QACrF,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IACH;;OAEG;IACH,QAAQ;QACJ,IAAI,gBAAgB,CAAC,IAAI,GAAG,EAAE,CAAC;QAC/B,IAAI,CAAC,WAAW,CAAC,CAAC,MAAM,KAAK,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QAEhD,IAAI,gBAAgB,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnC,IAAI,CAAC,mBAAmB,CAAC,CAAC,MAAM,KAAK,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QAE5D,IAAI,gBAAgB,CAAC,SAAS,GAAG,EAAE,CAAC;QACpC,IAAI,CAAC,gBAAgB,CAAC,CAAC,MAAM,KAAK,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QAE1D,IAAI,gBAAgB,CAAC,KAAK,GAAG,EAAE,CAAC;QAChC,IAAI,CAAC,gBAAgB,CAAC,CAAC,MAAM,KAAK,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QAEtD,IAAI,gBAAgB,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnC,IAAI,CAAC,kBAAkB,CAAC,CAAC,MAAM,KAAK,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QAE3D,IAAI,gBAAgB,CAAC,eAAe,GAAG,EAAE,CAAC;QAC1C,IAAI,CAAC,qBAAqB,CAAC,CAAC,MAAM,KAAK,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QAErE,MAAM,CAAC,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,GAAG,YAAY,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI;YACnF,aAAa,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,GAAG,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI;YACjF,YAAY,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,GAAG,mBAAmB;YAC/D,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;IAC3C,CAAC;IAED,OAAO,8BAA8B;QACtC,gBAAgB;QACjB,qBAAqB,CAAC,SAAS,CAAC,OAAO,CAAC;QACvC,gBAAgB;QACjB,qBAAqB,CAAC,SAAS,CAAC,WAAW,CAAC;QAC3C,gBAAgB;QACjB,qBAAqB,CAAC,SAAS,CAAC,cAAc,CAAC;QAC9C,gBAAgB;QACjB,qBAAqB,CAAC,SAAS,CAAC,gBAAgB,CAAC;QAChD,gBAAgB;QACjB,qBAAqB,CAAC,SAAS,CAAC,eAAe,CAAC;QAC/C,gBAAgB;QACjB,qBAAqB,CAAC,SAAS,CAAC,OAAO,CAAC;QACvC,gBAAgB;QACjB,qBAAqB,CAAC,SAAS,CAAC,OAAO,CAAC;QACvC,gBAAgB;QACjB,qBAAqB,CAAC,SAAS,CAAC,cAAc,CAAC;QAC9C,gBAAgB;QACjB,qBAAqB,CAAC,SAAS,CAAC,cAAc,CAAC;QAC9C,gBAAgB;QACjB,qBAAqB,CAAC,SAAS,CAAC,UAAU,CAAC;QAC1C,gBAAgB;QACjB,qBAAqB,CAAC,SAAS,CAAC,UAAU,CAAC;QAC1C,gBAAgB;QACjB,qBAAqB,CAAC,SAAS,CAAC,aAAa,CAAC;QAC7C,gBAAgB;QACjB,qBAAqB,CAAC,SAAS,CAAC,aAAa,CAAC;QAC7C,gBAAgB;QACjB,qBAAqB,CAAC,SAAS,CAAC,oBAAoB,CAAC;QACpD,gBAAgB;QACjB,qBAAqB,CAAC,SAAS,CAAC,oBAAoB,CAAC;QACpD,gBAAgB;QACjB,qBAAqB,CAAC,SAAS,CAAC,UAAU,CAAC;IACzC,CAAC;AAEH,CAAC;AAjkBY,6BAAqB,wBAikBjC,CAAA;AAED;IAwBA;;;OAGG;IACH,YAAmB,IAAS,EACrB,SAAc;QADF,SAAI,GAAJ,IAAI,CAAK;QACrB,cAAS,GAAT,SAAS,CAAK;QA5BnB,iBAAY,GAAW,IAAI,CAAC;QAC5B,kBAAa,GAAW,IAAI,CAAC;QAE7B,gBAAgB;QAChB,kBAAa,GAA2B,IAAI,CAAC;QAC7C,gBAAgB;QAChB,UAAK,GAA2B,IAAI,CAAC;QACrC,gBAAgB;QAChB,UAAK,GAA2B,IAAI,CAAC;QACrC,gBAAgB;QAChB,aAAQ,GAA2B,IAAI,CAAC;QACxC,gBAAgB;QAChB,aAAQ,GAA2B,IAAI,CAAC;QACxC,gBAAgB;QAChB,iBAAY,GAA2B,IAAI,CAAC;QAC5C,gBAAgB;QAChB,iBAAY,GAA2B,IAAI,CAAC;QAC5C,gBAAgB;QAChB,eAAU,GAA2B,IAAI,CAAC;QAC1C,gBAAgB;QAChB,eAAU,GAA2B,IAAI,CAAC;QAC1C,gBAAgB;QAChB,wBAAmB,GAA2B,IAAI,CAAC;IAM7B,CAAC;IACzB;;OAEG;IACH,QAAQ;QACJ,MAAM,CAAC,IAAI,CAAC,aAAa,KAAK,IAAI,CAAC,YAAY;YACpC,gBAAS,CAAC,IAAI,CAAC,IAAI,CAAC;YACpB,gBAAS,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,gBAAS,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,IAAI;gBAC7D,gBAAS,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,GAAG,CAAC;IACpD,CAAC;IAED,OAAO,8BAA8B;QACtC,gBAAgB;QACjB,sBAAsB,CAAC,SAAS,CAAC,YAAY,CAAC;QAC7C,gBAAgB;QACjB,sBAAsB,CAAC,SAAS,CAAC,aAAa,CAAC;QAC9C;oBACY;QACb,sBAAsB,CAAC,SAAS,CAAC,aAAa,CAAC;QAC9C;oBACY;QACb,sBAAsB,CAAC,SAAS,CAAC,KAAK,CAAC;QACtC;oBACY;QACb,sBAAsB,CAAC,SAAS,CAAC,KAAK,CAAC;QACtC;oBACY;QACb,sBAAsB,CAAC,SAAS,CAAC,QAAQ,CAAC;QACzC;oBACY;QACb,sBAAsB,CAAC,SAAS,CAAC,QAAQ,CAAC;QACzC;oBACY;QACb,sBAAsB,CAAC,SAAS,CAAC,YAAY,CAAC;QAC7C;oBACY;QACb,sBAAsB,CAAC,SAAS,CAAC,YAAY,CAAC;QAC7C;oBACY;QACb,sBAAsB,CAAC,SAAS,CAAC,UAAU,CAAC;QAC3C;oBACY;QACb,sBAAsB,CAAC,SAAS,CAAC,UAAU,CAAC;QAC3C;oBACY;QACb,sBAAsB,CAAC,SAAS,CAAC,mBAAmB,CAAC;QACpD,gBAAgB;QACjB,sBAAsB,CAAC,SAAS,CAAC,IAAI,CAAC;QACrC,gBAAgB;QACjB,sBAAsB,CAAC,SAAS,CAAC,SAAS,CAAC;IACzC,CAAC;AAEH,CAAC;AAjFY,8BAAsB,yBAiFlC,CAAA;AAED,qFAAqF;AACrF;IAAA;QACE,gBAAgB;QAChB,UAAK,GAA2B,IAAI,CAAC;QACrC,gBAAgB;QAChB,UAAK,GAA2B,IAAI,CAAC;IA2EvC,CAAC;IA1ED;;;;OAIG;IACH,GAAG,CAAC,MAA8B;QAC9B,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC;YACxB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC;YACjC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC;YACvB,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC;QACzB,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,aAAa;YACb,uCAAuC;YACvC,2FAA2F;YAC3F,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,MAAM,CAAC;YAC7B,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC;YAC7B,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC;YACvB,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC;QACtB,CAAC;IACH,CAAC;IACH;;;;OAIG;IACH,GAAG,CAAC,SAAc,EAAE,UAAkB;QAClC,IAAI,gBAAgB,CAAC,MAA8B,CAAC;QACpD,GAAG,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,EAAE,MAAM,KAAK,IAAI,EAAE,MAAM,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;YACpE,EAAE,CAAC,CAAC,CAAC,UAAU,KAAK,IAAI,IAAI,UAAU,GAAG,MAAM,CAAC,YAAY,CAAC;gBACzD,qBAAc,CAAC,MAAM,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;gBAChD,MAAM,CAAC,MAAM,CAAC;YAChB,CAAC;QACH,CAAC;QACD,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IACH;;;;OAIG;IACH,MAAM,CAAC,MAA8B;QACjC,aAAa;QACb,cAAc;QACd,2DAA2D;QAC3D,2FAA2F;QAC3F,iDAAiD;QACjD,KAAK;QACL,iBAAiB;QACjB,KAAK;QAEL,IAAI,gBAAgB,CAAC,IAAI,GAA2B,MAAM,CAAC,QAAQ,CAAC;QACpE,IAAI,gBAAgB,CAAC,IAAI,GAA2B,MAAM,CAAC,QAAQ,CAAC;QACpE,EAAE,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC;YAClB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QACpB,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACvB,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC;YAClB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QACpB,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACvB,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC;IAC7B,CAAC;IAED,OAAO,8BAA8B;QACtC;oBACY;QACb,wBAAwB,CAAC,SAAS,CAAC,KAAK,CAAC;QACxC;oBACY;QACb,wBAAwB,CAAC,SAAS,CAAC,KAAK,CAAC;IACvC,CAAC;AAEH,CAAC;AAED;IAAA;QACE,QAAG,GAAG,IAAI,GAAG,EAAiC,CAAC;IA4DjD,CAAC;IA3DD;;;OAGG;IACH,GAAG,CAAC,MAA8B;QAC9B,iCAAiC;QACjC,IAAI,gBAAgB,CAAC,GAAG,GAAG,gBAAS,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QAEvD,IAAI,gBAAgB,CAAC,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACpD,EAAE,CAAC,CAAC,CAAC,gBAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YAC3B,UAAU,GAAG,IAAI,wBAAwB,EAAE,CAAC;YAC5C,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;QAChC,CAAC;QACD,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACzB,CAAC;IACH;;;;;OAKG;IACH,GAAG,CAAC,SAAc,EAAE,UAAU,GAAW,IAAI;QACzC,IAAI,gBAAgB,CAAC,GAAG,GAAG,gBAAS,CAAC,SAAS,CAAC,CAAC;QAEhD,IAAI,gBAAgB,CAAC,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACpD,MAAM,CAAC,cAAO,CAAC,UAAU,CAAC,GAAG,IAAI,GAAG,UAAU,CAAC,GAAG,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;IAC5E,CAAC;IACH;;;;OAIG;IACH,MAAM,CAAC,MAA8B;QACjC,IAAI,gBAAgB,CAAC,GAAG,GAAG,gBAAS,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QACvD,aAAa;QACb,qCAAqC;QACrC,IAAI,gBAAgB,CAAC,UAAU,GAA6B,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC9E,mDAAmD;QACnD,EAAE,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC9B,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QACvB,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IAED,IAAI,OAAO,KAAc,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;IACxD;;OAEG;IACH,KAAK,KAAK,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IAC7B;;OAEG;IACH,QAAQ,KAAa,MAAM,CAAC,gBAAgB,GAAG,gBAAS,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;IAEzE,OAAO,8BAA8B;QACtC,gBAAgB;QACjB,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC;IAC1B,CAAC;AAEH,CAAC;AAAA","sourcesContent":["import {BaseException} from '../../../src/facade/exceptions';\nimport {isListLikeIterable, iterateListLike} from '../../../src/facade/collection';\n\nimport {\n  isBlank,\n  isPresent,\n  stringify,\n  getMapKey,\n  looseIdentical,\n  isArray\n} from '../../../src/facade/lang';\n\nimport {ChangeDetectorRef} from '../change_detector_ref';\nimport {IterableDiffer, IterableDifferFactory, TrackByFn} from './iterable_differs';\n\n/* @ts2dart_const */\nexport class DefaultIterableDifferFactory implements IterableDifferFactory {\n/**\n */\nconstructor() {}\n/**\n * @param {?} obj\n * @return {?}\n */\nsupports(obj: Object): boolean { return isListLikeIterable(obj); }\n/**\n * @param {?} cdRef\n * @param {?=} trackByFn\n * @return {?}\n */\ncreate(cdRef: ChangeDetectorRef, trackByFn?: TrackByFn): DefaultIterableDiffer {\n    return new DefaultIterableDiffer(trackByFn);\n  }\n}\n\nvar /** @type {?} */ trackByIdentity = (index: number, item: any) => item;\n\nexport class DefaultIterableDiffer implements IterableDiffer {\nprivate _length: number = null;\nprivate _collection = null;\nprivate _linkedRecords: _DuplicateMap = null;\nprivate _unlinkedRecords: _DuplicateMap = null;\nprivate _previousItHead: CollectionChangeRecord = null;\nprivate _itHead: CollectionChangeRecord = null;\nprivate _itTail: CollectionChangeRecord = null;\nprivate _additionsHead: CollectionChangeRecord = null;\nprivate _additionsTail: CollectionChangeRecord = null;\nprivate _movesHead: CollectionChangeRecord = null;\nprivate _movesTail: CollectionChangeRecord = null;\nprivate _removalsHead: CollectionChangeRecord = null;\nprivate _removalsTail: CollectionChangeRecord = null;\nprivate _identityChangesHead: CollectionChangeRecord = null;\nprivate _identityChangesTail: CollectionChangeRecord = null;\n/**\n * @param {?=} _trackByFn\n */\nconstructor(private _trackByFn?: TrackByFn) {\n    this._trackByFn = isPresent(this._trackByFn) ? this._trackByFn : trackByIdentity;\n  }\n\n  get collection() { return this._collection; }\n\n  get length(): number { return this._length; }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEachItem(fn: Function) {\n    var /** @type {?} */ record: CollectionChangeRecord;\n    for (record = this._itHead; record !== null; record = record._next) {\n      fn(record);\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEachPreviousItem(fn: Function) {\n    var /** @type {?} */ record: CollectionChangeRecord;\n    for (record = this._previousItHead; record !== null; record = record._nextPrevious) {\n      fn(record);\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEachAddedItem(fn: Function) {\n    var /** @type {?} */ record: CollectionChangeRecord;\n    for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n      fn(record);\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEachMovedItem(fn: Function) {\n    var /** @type {?} */ record: CollectionChangeRecord;\n    for (record = this._movesHead; record !== null; record = record._nextMoved) {\n      fn(record);\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEachRemovedItem(fn: Function) {\n    var /** @type {?} */ record: CollectionChangeRecord;\n    for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n      fn(record);\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEachIdentityChange(fn: Function) {\n    var /** @type {?} */ record: CollectionChangeRecord;\n    for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {\n      fn(record);\n    }\n  }\n/**\n * @param {?} collection\n * @return {?}\n */\ndiff(collection: any): DefaultIterableDiffer {\n    if (isBlank(collection)) collection = [];\n    if (!isListLikeIterable(collection)) {\n      throw new BaseException(`Error trying to diff '${collection}'`);\n    }\n\n    if (this.check(collection)) {\n      return this;\n    } else {\n      return null;\n    }\n  }\n/**\n * @return {?}\n */\nonDestroy() {}\n/**\n * @param {?} collection\n * @return {?}\n */\ncheck(collection: any): boolean {\n    this._reset();\n\n    var /** @type {?} */ record: CollectionChangeRecord = this._itHead;\n    var /** @type {?} */ mayBeDirty: boolean = false;\n    var /** @type {?} */ index: number;\n    var /** @type {?} */ item;\n    var /** @type {?} */ itemTrackBy;\n    if (isArray(collection)) {\n      var /** @type {?} */ list = collection;\n      this._length = collection.length;\n\n      for (index = 0; index < this._length; index++) {\n        item = list[index];\n        itemTrackBy = this._trackByFn(index, item);\n        if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n          record = this._mismatch(record, item, itemTrackBy, index);\n          mayBeDirty = true;\n        } else {\n          if (mayBeDirty) {\n            // TODO(misko): can we limit this to duplicates only?\n            record = this._verifyReinsertion(record, item, itemTrackBy, index);\n          }\n          if (!looseIdentical(record.item, item)) this._addIdentityChange(record, item);\n        }\n\n        record = record._next;\n      }\n    } else {\n      index = 0;\n      iterateListLike(collection, (item) => {\n        itemTrackBy = this._trackByFn(index, item);\n        if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n          record = this._mismatch(record, item, itemTrackBy, index);\n          mayBeDirty = true;\n        } else {\n          if (mayBeDirty) {\n            // TODO(misko): can we limit this to duplicates only?\n            record = this._verifyReinsertion(record, item, itemTrackBy, index);\n          }\n          if (!looseIdentical(record.item, item)) this._addIdentityChange(record, item);\n        }\n        record = record._next;\n        index++;\n      });\n      this._length = index;\n    }\n\n    this._truncate(record);\n    this._collection = collection;\n    return this.isDirty;\n  }\n\n  /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity\n   * changes.\n   */\n  get isDirty(): boolean {\n    return this._additionsHead !== null || this._movesHead !== null ||\n           this._removalsHead !== null || this._identityChangesHead !== null;\n  }\n/**\n *  Reset the state of the change objects to show no changes. This means set previousKey to currentKey, and clear all of the queues (additions, moves, removals). Set the previousIndexes of moved and added items to their currentIndexes Reset the list of additions, moves and removals *\n * @internal\n * @return {?}\n */\n_reset() {\n    if (this.isDirty) {\n      var /** @type {?} */ record: CollectionChangeRecord;\n      var /** @type {?} */ nextRecord: CollectionChangeRecord;\n\n      for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {\n        record._nextPrevious = record._next;\n      }\n\n      for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n        record.previousIndex = record.currentIndex;\n      }\n      this._additionsHead = this._additionsTail = null;\n\n      for (record = this._movesHead; record !== null; record = nextRecord) {\n        record.previousIndex = record.currentIndex;\n        nextRecord = record._nextMoved;\n      }\n      this._movesHead = this._movesTail = null;\n      this._removalsHead = this._removalsTail = null;\n      this._identityChangesHead = this._identityChangesTail = null;\n\n      // todo(vicb) when assert gets supported\n      // assert(!this.isDirty);\n    }\n  }\n/**\n *  This is the core function which handles differences between collections. * - `record` is the record which we saw at this position last time. If null then it is a new item. - `item` is the current item in the collection - `index` is the position of the item in the collection *\n * @internal\n * @param {?} record\n * @param {?} item\n * @param {?} itemTrackBy\n * @param {?} index\n * @return {?}\n */\n_mismatch(record: CollectionChangeRecord, item: any, itemTrackBy: any,\n            index: number): CollectionChangeRecord {\n    // The previous record after which we will append the current one.\n    var /** @type {?} */ previousRecord: CollectionChangeRecord;\n\n    if (record === null) {\n      previousRecord = this._itTail;\n    } else {\n      previousRecord = record._prev;\n      // Remove the record from the collection since we know it does not match the item.\n      this._remove(record);\n    }\n\n    // Attempt to see if we have seen the item before.\n    record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);\n    if (record !== null) {\n      // We have seen this before, we need to move it forward in the collection.\n      // But first we need to check if identity changed, so we can update in view if necessary\n      if (!looseIdentical(record.item, item)) this._addIdentityChange(record, item);\n\n      this._moveAfter(record, previousRecord, index);\n    } else {\n      // Never seen it, check evicted list.\n      record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);\n      if (record !== null) {\n        // It is an item which we have evicted earlier: reinsert it back into the list.\n        // But first we need to check if identity changed, so we can update in view if necessary\n        if (!looseIdentical(record.item, item)) this._addIdentityChange(record, item);\n\n        this._reinsertAfter(record, previousRecord, index);\n      } else {\n        // It is a new item: add it.\n        record =\n            this._addAfter(new CollectionChangeRecord(item, itemTrackBy), previousRecord, index);\n      }\n    }\n    return record;\n  }\n/**\n *  This check is only needed if an array contains duplicates. (Short circuit of nothing dirty) * Use case: `[a, a]` => `[b, a, a]` * If we did not have this check then the insertion of `b` would: 1) evict first `a` 2) insert `b` at `0` index. 3) leave `a` at index `1` as is. <-- this is wrong! 3) reinsert `a` at index 2. <-- this is wrong! * The correct behavior is: 1) evict first `a` 2) insert `b` at `0` index. 3) reinsert `a` at index 1. 3) move `a` at from `1` to `2`. * * Double check that we have not evicted a duplicate item. We need to check if the item type may have already been removed: The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted at the end. Which will show up as the two 'a's switching position. This is incorrect, since a better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a' at the end. *\n * @internal\n * @param {?} record\n * @param {?} item\n * @param {?} itemTrackBy\n * @param {?} index\n * @return {?}\n */\n_verifyReinsertion(record: CollectionChangeRecord, item: any, itemTrackBy: any,\n                     index: number): CollectionChangeRecord {\n    var /** @type {?} */ reinsertRecord: CollectionChangeRecord =\n        this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);\n    if (reinsertRecord !== null) {\n      record = this._reinsertAfter(reinsertRecord, record._prev, index);\n    } else if (record.currentIndex != index) {\n      record.currentIndex = index;\n      this._addToMoves(record, index);\n    }\n    return record;\n  }\n/**\n *  Get rid of any excess {@link CollectionChangeRecord}s from the previous collection * - `record` The first excess {@link CollectionChangeRecord}. *\n * @internal\n * @param {?} record\n * @return {?}\n */\n_truncate(record: CollectionChangeRecord) {\n    // Anything after that needs to be removed;\n    while (record !== null) {\n      var /** @type {?} */ nextRecord: CollectionChangeRecord = record._next;\n      this._addToRemovals(this._unlink(record));\n      record = nextRecord;\n    }\n    if (this._unlinkedRecords !== null) {\n      this._unlinkedRecords.clear();\n    }\n\n    if (this._additionsTail !== null) {\n      this._additionsTail._nextAdded = null;\n    }\n    if (this._movesTail !== null) {\n      this._movesTail._nextMoved = null;\n    }\n    if (this._itTail !== null) {\n      this._itTail._next = null;\n    }\n    if (this._removalsTail !== null) {\n      this._removalsTail._nextRemoved = null;\n    }\n    if (this._identityChangesTail !== null) {\n      this._identityChangesTail._nextIdentityChange = null;\n    }\n  }\n/**\n * @internal\n * @param {?} record\n * @param {?} prevRecord\n * @param {?} index\n * @return {?}\n */\n_reinsertAfter(record: CollectionChangeRecord, prevRecord: CollectionChangeRecord,\n                 index: number): CollectionChangeRecord {\n    if (this._unlinkedRecords !== null) {\n      this._unlinkedRecords.remove(record);\n    }\n    var /** @type {?} */ prev = record._prevRemoved;\n    var /** @type {?} */ next = record._nextRemoved;\n\n    if (prev === null) {\n      this._removalsHead = next;\n    } else {\n      prev._nextRemoved = next;\n    }\n    if (next === null) {\n      this._removalsTail = prev;\n    } else {\n      next._prevRemoved = prev;\n    }\n\n    this._insertAfter(record, prevRecord, index);\n    this._addToMoves(record, index);\n    return record;\n  }\n/**\n * @internal\n * @param {?} record\n * @param {?} prevRecord\n * @param {?} index\n * @return {?}\n */\n_moveAfter(record: CollectionChangeRecord, prevRecord: CollectionChangeRecord,\n             index: number): CollectionChangeRecord {\n    this._unlink(record);\n    this._insertAfter(record, prevRecord, index);\n    this._addToMoves(record, index);\n    return record;\n  }\n/**\n * @internal\n * @param {?} record\n * @param {?} prevRecord\n * @param {?} index\n * @return {?}\n */\n_addAfter(record: CollectionChangeRecord, prevRecord: CollectionChangeRecord,\n            index: number): CollectionChangeRecord {\n    this._insertAfter(record, prevRecord, index);\n\n    if (this._additionsTail === null) {\n      // todo(vicb)\n      // assert(this._additionsHead === null);\n      this._additionsTail = this._additionsHead = record;\n    } else {\n      // todo(vicb)\n      // assert(_additionsTail._nextAdded === null);\n      // assert(record._nextAdded === null);\n      this._additionsTail = this._additionsTail._nextAdded = record;\n    }\n    return record;\n  }\n/**\n * @internal\n * @param {?} record\n * @param {?} prevRecord\n * @param {?} index\n * @return {?}\n */\n_insertAfter(record: CollectionChangeRecord, prevRecord: CollectionChangeRecord,\n               index: number): CollectionChangeRecord {\n    // todo(vicb)\n    // assert(record != prevRecord);\n    // assert(record._next === null);\n    // assert(record._prev === null);\n\n    var /** @type {?} */ next: CollectionChangeRecord = prevRecord === null ? this._itHead : prevRecord._next;\n    // todo(vicb)\n    // assert(next != record);\n    // assert(prevRecord != record);\n    record._next = next;\n    record._prev = prevRecord;\n    if (next === null) {\n      this._itTail = record;\n    } else {\n      next._prev = record;\n    }\n    if (prevRecord === null) {\n      this._itHead = record;\n    } else {\n      prevRecord._next = record;\n    }\n\n    if (this._linkedRecords === null) {\n      this._linkedRecords = new _DuplicateMap();\n    }\n    this._linkedRecords.put(record);\n\n    record.currentIndex = index;\n    return record;\n  }\n/**\n * @internal\n * @param {?} record\n * @return {?}\n */\n_remove(record: CollectionChangeRecord): CollectionChangeRecord {\n    return this._addToRemovals(this._unlink(record));\n  }\n/**\n * @internal\n * @param {?} record\n * @return {?}\n */\n_unlink(record: CollectionChangeRecord): CollectionChangeRecord {\n    if (this._linkedRecords !== null) {\n      this._linkedRecords.remove(record);\n    }\n\n    var /** @type {?} */ prev = record._prev;\n    var /** @type {?} */ next = record._next;\n\n    // todo(vicb)\n    // assert((record._prev = null) === null);\n    // assert((record._next = null) === null);\n\n    if (prev === null) {\n      this._itHead = next;\n    } else {\n      prev._next = next;\n    }\n    if (next === null) {\n      this._itTail = prev;\n    } else {\n      next._prev = prev;\n    }\n\n    return record;\n  }\n/**\n * @internal\n * @param {?} record\n * @param {?} toIndex\n * @return {?}\n */\n_addToMoves(record: CollectionChangeRecord, toIndex: number): CollectionChangeRecord {\n    // todo(vicb)\n    // assert(record._nextMoved === null);\n\n    if (record.previousIndex === toIndex) {\n      return record;\n    }\n\n    if (this._movesTail === null) {\n      // todo(vicb)\n      // assert(_movesHead === null);\n      this._movesTail = this._movesHead = record;\n    } else {\n      // todo(vicb)\n      // assert(_movesTail._nextMoved === null);\n      this._movesTail = this._movesTail._nextMoved = record;\n    }\n\n    return record;\n  }\n/**\n * @internal\n * @param {?} record\n * @return {?}\n */\n_addToRemovals(record: CollectionChangeRecord): CollectionChangeRecord {\n    if (this._unlinkedRecords === null) {\n      this._unlinkedRecords = new _DuplicateMap();\n    }\n    this._unlinkedRecords.put(record);\n    record.currentIndex = null;\n    record._nextRemoved = null;\n\n    if (this._removalsTail === null) {\n      // todo(vicb)\n      // assert(_removalsHead === null);\n      this._removalsTail = this._removalsHead = record;\n      record._prevRemoved = null;\n    } else {\n      // todo(vicb)\n      // assert(_removalsTail._nextRemoved === null);\n      // assert(record._nextRemoved === null);\n      record._prevRemoved = this._removalsTail;\n      this._removalsTail = this._removalsTail._nextRemoved = record;\n    }\n    return record;\n  }\n/**\n * @internal\n * @param {?} record\n * @param {?} item\n * @return {?}\n */\n_addIdentityChange(record: CollectionChangeRecord, item: any) {\n    record.item = item;\n    if (this._identityChangesTail === null) {\n      this._identityChangesTail = this._identityChangesHead = record;\n    } else {\n      this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;\n    }\n    return record;\n  }\n/**\n * @return {?}\n */\ntoString(): string {\n    var /** @type {?} */ list = [];\n    this.forEachItem((record) => list.push(record));\n\n    var /** @type {?} */ previous = [];\n    this.forEachPreviousItem((record) => previous.push(record));\n\n    var /** @type {?} */ additions = [];\n    this.forEachAddedItem((record) => additions.push(record));\n\n    var /** @type {?} */ moves = [];\n    this.forEachMovedItem((record) => moves.push(record));\n\n    var /** @type {?} */ removals = [];\n    this.forEachRemovedItem((record) => removals.push(record));\n\n    var /** @type {?} */ identityChanges = [];\n    this.forEachIdentityChange((record) => identityChanges.push(record));\n\n    return \"collection: \" + list.join(', ') + \"\\n\" + \"previous: \" + previous.join(', ') + \"\\n\" +\n           \"additions: \" + additions.join(', ') + \"\\n\" + \"moves: \" + moves.join(', ') + \"\\n\" +\n           \"removals: \" + removals.join(', ') + \"\\n\" + \"identityChanges: \" +\n           identityChanges.join(', ') + \"\\n\";\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nDefaultIterableDiffer.prototype._length;\n /** @type {?} */\nDefaultIterableDiffer.prototype._collection;\n /** @type {?} */\nDefaultIterableDiffer.prototype._linkedRecords;\n /** @type {?} */\nDefaultIterableDiffer.prototype._unlinkedRecords;\n /** @type {?} */\nDefaultIterableDiffer.prototype._previousItHead;\n /** @type {?} */\nDefaultIterableDiffer.prototype._itHead;\n /** @type {?} */\nDefaultIterableDiffer.prototype._itTail;\n /** @type {?} */\nDefaultIterableDiffer.prototype._additionsHead;\n /** @type {?} */\nDefaultIterableDiffer.prototype._additionsTail;\n /** @type {?} */\nDefaultIterableDiffer.prototype._movesHead;\n /** @type {?} */\nDefaultIterableDiffer.prototype._movesTail;\n /** @type {?} */\nDefaultIterableDiffer.prototype._removalsHead;\n /** @type {?} */\nDefaultIterableDiffer.prototype._removalsTail;\n /** @type {?} */\nDefaultIterableDiffer.prototype._identityChangesHead;\n /** @type {?} */\nDefaultIterableDiffer.prototype._identityChangesTail;\n /** @type {?} */\nDefaultIterableDiffer.prototype._trackByFn;\n  }\n\n}\n\nexport class CollectionChangeRecord {\n  currentIndex: number = null;\n  previousIndex: number = null;\n\n  /** @internal */\n  _nextPrevious: CollectionChangeRecord = null;\n  /** @internal */\n  _prev: CollectionChangeRecord = null;\n  /** @internal */\n  _next: CollectionChangeRecord = null;\n  /** @internal */\n  _prevDup: CollectionChangeRecord = null;\n  /** @internal */\n  _nextDup: CollectionChangeRecord = null;\n  /** @internal */\n  _prevRemoved: CollectionChangeRecord = null;\n  /** @internal */\n  _nextRemoved: CollectionChangeRecord = null;\n  /** @internal */\n  _nextAdded: CollectionChangeRecord = null;\n  /** @internal */\n  _nextMoved: CollectionChangeRecord = null;\n  /** @internal */\n  _nextIdentityChange: CollectionChangeRecord = null;\n/**\n * @param {?} item\n * @param {?} trackById\n */\nconstructor(public item: any,\npublic trackById: any) {}\n/**\n * @return {?}\n */\ntoString(): string {\n    return this.previousIndex === this.currentIndex ?\n               stringify(this.item) :\n               stringify(this.item) + '[' + stringify(this.previousIndex) + '->' +\n                   stringify(this.currentIndex) + ']';\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nCollectionChangeRecord.prototype.currentIndex;\n /** @type {?} */\nCollectionChangeRecord.prototype.previousIndex;\n /** @internal\n @type {?} */\nCollectionChangeRecord.prototype._nextPrevious;\n /** @internal\n @type {?} */\nCollectionChangeRecord.prototype._prev;\n /** @internal\n @type {?} */\nCollectionChangeRecord.prototype._next;\n /** @internal\n @type {?} */\nCollectionChangeRecord.prototype._prevDup;\n /** @internal\n @type {?} */\nCollectionChangeRecord.prototype._nextDup;\n /** @internal\n @type {?} */\nCollectionChangeRecord.prototype._prevRemoved;\n /** @internal\n @type {?} */\nCollectionChangeRecord.prototype._nextRemoved;\n /** @internal\n @type {?} */\nCollectionChangeRecord.prototype._nextAdded;\n /** @internal\n @type {?} */\nCollectionChangeRecord.prototype._nextMoved;\n /** @internal\n @type {?} */\nCollectionChangeRecord.prototype._nextIdentityChange;\n /** @type {?} */\nCollectionChangeRecord.prototype.item;\n /** @type {?} */\nCollectionChangeRecord.prototype.trackById;\n  }\n\n}\n\n// A linked list of CollectionChangeRecords with the same CollectionChangeRecord.item\nclass _DuplicateItemRecordList {\n  /** @internal */\n  _head: CollectionChangeRecord = null;\n  /** @internal */\n  _tail: CollectionChangeRecord = null;\n/**\n *  Append the record to the list of duplicates. * Note: by design all records in the list of duplicates hold the same value in record.item.\n * @param {?} record\n * @return {?}\n */\nadd(record: CollectionChangeRecord): void {\n    if (this._head === null) {\n      this._head = this._tail = record;\n      record._nextDup = null;\n      record._prevDup = null;\n    } else {\n      // todo(vicb)\n      // assert(record.item ==  _head.item ||\n      //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);\n      this._tail._nextDup = record;\n      record._prevDup = this._tail;\n      record._nextDup = null;\n      this._tail = record;\n    }\n  }\n/**\n * @param {?} trackById\n * @param {?} afterIndex\n * @return {?}\n */\nget(trackById: any, afterIndex: number): CollectionChangeRecord {\n    var /** @type {?} */ record: CollectionChangeRecord;\n    for (record = this._head; record !== null; record = record._nextDup) {\n      if ((afterIndex === null || afterIndex < record.currentIndex) &&\n          looseIdentical(record.trackById, trackById)) {\n        return record;\n      }\n    }\n    return null;\n  }\n/**\n *  Remove one {@link CollectionChangeRecord} from the list of duplicates. * Returns whether the list of duplicates is empty.\n * @param {?} record\n * @return {?}\n */\nremove(record: CollectionChangeRecord): boolean {\n    // todo(vicb)\n    // assert(() {\n    //  // verify that the record being removed is in the list.\n    //  for (CollectionChangeRecord cursor = _head; cursor != null; cursor = cursor._nextDup) {\n    //    if (identical(cursor, record)) return true;\n    //  }\n    //  return false;\n    //});\n\n    var /** @type {?} */ prev: CollectionChangeRecord = record._prevDup;\n    var /** @type {?} */ next: CollectionChangeRecord = record._nextDup;\n    if (prev === null) {\n      this._head = next;\n    } else {\n      prev._nextDup = next;\n    }\n    if (next === null) {\n      this._tail = prev;\n    } else {\n      next._prevDup = prev;\n    }\n    return this._head === null;\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @internal\n @type {?} */\n_DuplicateItemRecordList.prototype._head;\n /** @internal\n @type {?} */\n_DuplicateItemRecordList.prototype._tail;\n  }\n\n}\n\nclass _DuplicateMap {\n  map = new Map<any, _DuplicateItemRecordList>();\n/**\n * @param {?} record\n * @return {?}\n */\nput(record: CollectionChangeRecord) {\n    // todo(vicb) handle corner cases\n    var /** @type {?} */ key = getMapKey(record.trackById);\n\n    var /** @type {?} */ duplicates = this.map.get(key);\n    if (!isPresent(duplicates)) {\n      duplicates = new _DuplicateItemRecordList();\n      this.map.set(key, duplicates);\n    }\n    duplicates.add(record);\n  }\n/**\n *  Retrieve the `value` using key. Because the CollectionChangeRecord value may be one which we have already iterated over, we use the afterIndex to pretend it is not there. * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we have any more `a`s needs to return the last `a` not the first or second.\n * @param {?} trackById\n * @param {?=} afterIndex\n * @return {?}\n */\nget(trackById: any, afterIndex: number = null): CollectionChangeRecord {\n    var /** @type {?} */ key = getMapKey(trackById);\n\n    var /** @type {?} */ recordList = this.map.get(key);\n    return isBlank(recordList) ? null : recordList.get(trackById, afterIndex);\n  }\n/**\n *  Removes a {@link CollectionChangeRecord} from the list of duplicates. * The list of duplicates also is removed from the map if it gets empty.\n * @param {?} record\n * @return {?}\n */\nremove(record: CollectionChangeRecord): CollectionChangeRecord {\n    var /** @type {?} */ key = getMapKey(record.trackById);\n    // todo(vicb)\n    // assert(this.map.containsKey(key));\n    var /** @type {?} */ recordList: _DuplicateItemRecordList = this.map.get(key);\n    // Remove the list of duplicates when it gets empty\n    if (recordList.remove(record)) {\n      this.map.delete(key);\n    }\n    return record;\n  }\n\n  get isEmpty(): boolean { return this.map.size === 0; }\n/**\n * @return {?}\n */\nclear() { this.map.clear(); }\n/**\n * @return {?}\n */\ntoString(): string { return '_DuplicateMap(' + stringify(this.map) + ')'; }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\n_DuplicateMap.prototype.map;\n  }\n\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}