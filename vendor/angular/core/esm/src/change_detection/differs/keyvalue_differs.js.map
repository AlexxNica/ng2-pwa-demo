{"version":3,"file":"keyvalue_differs.js","sourceRoot":"","sources":["../../../../../../../modules/@angular/core/src/change_detection/differs/keyvalue_differs.ts"],"names":[],"mappings":";AAAA,uBAAiC,0BAA0B,CAAC,CAAA;AAC5D,6BAA4B,gCAAgC,CAAC,CAAA;AAC7D,6BAA0B,gCAAgC,CAAC,CAAA;AAE3D,qBAA2D,UAAU,CAAC,CAAA;AAkBtE;;;GAGG;AACH;IACA;;OAEG;IACH,YAAmB,SAAkC;QAAlC,cAAS,GAAT,SAAS,CAAyB;IAAG,CAAC;IACzD;;;;OAIG;IACH,OAAO,MAAM,CAAC,SAAkC,EAAE,MAAwB;QACtE,EAAE,CAAC,CAAC,gBAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACtB,IAAI,gBAAgB,CAAC,MAAM,GAAG,wBAAW,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;YAClE,SAAS,GAAG,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YACrC,MAAM,CAAC,IAAI,eAAe,CAAC,SAAS,CAAC,CAAC;QACxC,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,IAAI,eAAe,CAAC,SAAS,CAAC,CAAC;QACxC,CAAC;IACH,CAAC;IACH;;;;;OAKG;IACH,OAAO,MAAM,CAAC,SAAkC;QAC5C,MAAM,CAAC,IAAI,aAAQ,CAAC,eAAe,EAAE;YACnC,UAAU,EAAE,CAAC,MAAuB;gBAClC,EAAE,CAAC,CAAC,cAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;oBACpB,0FAA0F;oBAC1F,KAAK;oBACL,6EAA6E;oBAC7E,MAAM,IAAI,0BAAa,CAAC,yDAAyD,CAAC,CAAC;gBACrF,CAAC;gBACD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;YACnD,CAAC;YACD,6FAA6F;YAC7F,IAAI,EAAE,CAAC,CAAC,eAAe,EAAE,IAAI,qBAAgB,EAAE,EAAE,IAAI,qBAAgB,EAAE,CAAC,CAAC;SAC1E,CAAC,CAAC;IACL,CAAC;IACH;;;OAGG;IACH,IAAI,CAAC,EAAU;QACX,IAAI,gBAAgB,CAAC,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;QACxE,EAAE,CAAC,CAAC,gBAAS,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACvB,MAAM,CAAC,OAAO,CAAC;QACjB,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,IAAI,0BAAa,CAAC,2CAA2C,EAAE,GAAG,CAAC,CAAC;QAC5E,CAAC;IACH,CAAC;IAED,OAAO,8BAA8B;QACtC,gBAAgB;QACjB,eAAe,CAAC,SAAS,CAAC,SAAS,CAAC;IAClC,CAAC;AAEH,CAAC;AA1DY,uBAAe,kBA0D3B,CAAA","sourcesContent":["import {isBlank, isPresent} from '../../../src/facade/lang';\nimport {BaseException} from '../../../src/facade/exceptions';\nimport {ListWrapper} from '../../../src/facade/collection';\nimport {ChangeDetectorRef} from '../change_detector_ref';\nimport {Provider, SkipSelfMetadata, OptionalMetadata} from '../../di';\n\n/**\n * A differ that tracks changes made to an object over time.\n */\nexport interface KeyValueDiffer {\n  diff(object: any);\n  onDestroy();\n}\n\n/**\n * Provides a factory for {@link KeyValueDiffer}.\n */\nexport interface KeyValueDifferFactory {\n  supports(objects: any): boolean;\n  create(cdRef: ChangeDetectorRef): KeyValueDiffer;\n}\n\n/**\n * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n * @ts2dart_const\n */\nexport class KeyValueDiffers {\n/**\n * @param {?} factories\n */\nconstructor(public factories: KeyValueDifferFactory[]) {}\n/**\n * @param {?} factories\n * @param {?=} parent\n * @return {?}\n */\nstatic create(factories: KeyValueDifferFactory[], parent?: KeyValueDiffers): KeyValueDiffers {\n    if (isPresent(parent)) {\n      var /** @type {?} */ copied = ListWrapper.clone(parent.factories);\n      factories = factories.concat(copied);\n      return new KeyValueDiffers(factories);\n    } else {\n      return new KeyValueDiffers(factories);\n    }\n  }\n/**\n *  Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the inherited {@link KeyValueDiffers} instance with the provided factories and return a new {@link KeyValueDiffers} instance. * The following example shows how to extend an existing list of factories, which will only be applied to the injector for this component and its children. This step is all that's required to make a new {@link KeyValueDiffer} available. * ### Example * ```\n * @Component({ undefined viewProviders: [ KeyValueDiffers.extend([new ImmutableMapDiffer()]) ] }) ```\n * @param {?} factories\n * @return {?}\n */\nstatic extend(factories: KeyValueDifferFactory[]): Provider {\n    return new Provider(KeyValueDiffers, {\n      useFactory: (parent: KeyValueDiffers) => {\n        if (isBlank(parent)) {\n          // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed\n          // to\n          // bootstrap(), which would override default pipes instead of extending them.\n          throw new BaseException('Cannot extend KeyValueDiffers without a parent injector');\n        }\n        return KeyValueDiffers.create(factories, parent);\n      },\n      // Dependency technically isn't optional, but we can provide a better error message this way.\n      deps: [[KeyValueDiffers, new SkipSelfMetadata(), new OptionalMetadata()]]\n    });\n  }\n/**\n * @param {?} kv\n * @return {?}\n */\nfind(kv: Object): KeyValueDifferFactory {\n    var /** @type {?} */ factory = this.factories.find(f => f.supports(kv));\n    if (isPresent(factory)) {\n      return factory;\n    } else {\n      throw new BaseException(`Cannot find a differ supporting object '${kv}'`);\n    }\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nKeyValueDiffers.prototype.factories;\n  }\n\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}