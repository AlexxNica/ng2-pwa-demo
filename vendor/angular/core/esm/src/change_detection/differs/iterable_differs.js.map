{"version":3,"file":"iterable_differs.js","sourceRoot":"","sources":["../../../../../../../modules/@angular/core/src/change_detection/differs/iterable_differs.ts"],"names":[],"mappings":";AAAA,uBAA0D,0BAA0B,CAAC,CAAA;AACrF,6BAA4B,gCAAgC,CAAC,CAAA;AAC7D,6BAA0B,gCAAgC,CAAC,CAAA;AAE3D,qBAA2D,UAAU,CAAC,CAAA;AA0BtE;;;GAGG;AACH;IACA;;OAEG;IACH,YAAmB,SAAkC;QAAlC,cAAS,GAAT,SAAS,CAAyB;IAAG,CAAC;IACzD;;;;OAIG;IACH,OAAO,MAAM,CAAC,SAAkC,EAAE,MAAwB;QACtE,EAAE,CAAC,CAAC,gBAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACtB,IAAI,gBAAgB,CAAC,MAAM,GAAG,wBAAW,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;YAClE,SAAS,GAAG,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YACrC,MAAM,CAAC,IAAI,eAAe,CAAC,SAAS,CAAC,CAAC;QACxC,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,IAAI,eAAe,CAAC,SAAS,CAAC,CAAC;QACxC,CAAC;IACH,CAAC;IACH;;;;;OAKG;IACH,OAAO,MAAM,CAAC,SAAkC;QAC5C,MAAM,CAAC,IAAI,aAAQ,CAAC,eAAe,EAAE;YACnC,UAAU,EAAE,CAAC,MAAuB;gBAClC,EAAE,CAAC,CAAC,cAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;oBACpB,0FAA0F;oBAC1F,KAAK;oBACL,6EAA6E;oBAC7E,MAAM,IAAI,0BAAa,CAAC,yDAAyD,CAAC,CAAC;gBACrF,CAAC;gBACD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;YACnD,CAAC;YACD,6FAA6F;YAC7F,IAAI,EAAE,CAAC,CAAC,eAAe,EAAE,IAAI,qBAAgB,EAAE,EAAE,IAAI,qBAAgB,EAAE,CAAC,CAAC;SAC1E,CAAC,CAAC;IACL,CAAC;IACH;;;OAGG;IACH,IAAI,CAAC,QAAa;QACd,IAAI,gBAAgB,CAAC,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC9E,EAAE,CAAC,CAAC,gBAAS,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACvB,MAAM,CAAC,OAAO,CAAC;QACjB,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,IAAI,0BAAa,CACnB,2CAA2C,QAAQ,cAAc,8BAAuB,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QAC7G,CAAC;IACH,CAAC;IAED,OAAO,8BAA8B;QACtC,gBAAgB;QACjB,eAAe,CAAC,SAAS,CAAC,SAAS,CAAC;IAClC,CAAC;AAEH,CAAC;AA3DY,uBAAe,kBA2D3B,CAAA","sourcesContent":["import {isBlank, isPresent, getTypeNameForDebugging} from '../../../src/facade/lang';\nimport {BaseException} from '../../../src/facade/exceptions';\nimport {ListWrapper} from '../../../src/facade/collection';\nimport {ChangeDetectorRef} from '../change_detector_ref';\nimport {Provider, SkipSelfMetadata, OptionalMetadata} from '../../di';\n\n/**\n * A strategy for tracking changes over time to an iterable. Used for {@link NgFor} to\n * respond to changes in an iterable by effecting equivalent changes in the DOM.\n */\nexport interface IterableDiffer {\n  diff(object: any): any;\n  onDestroy();\n}\n\n/**\n  * An optional function passed into {@link NgFor} that defines how to track\n  * items in an iterable (e.g. by index or id)\n */\nexport interface TrackByFn { (index: number, item: any): any; }\n\n\n/**\n * Provides a factory for {@link IterableDiffer}.\n */\nexport interface IterableDifferFactory {\n  supports(objects: any): boolean;\n  create(cdRef: ChangeDetectorRef, trackByFn?: TrackByFn): IterableDiffer;\n}\n\n/**\n * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.\n * @ts2dart_const\n */\nexport class IterableDiffers {\n/**\n * @param {?} factories\n */\nconstructor(public factories: IterableDifferFactory[]) {}\n/**\n * @param {?} factories\n * @param {?=} parent\n * @return {?}\n */\nstatic create(factories: IterableDifferFactory[], parent?: IterableDiffers): IterableDiffers {\n    if (isPresent(parent)) {\n      var /** @type {?} */ copied = ListWrapper.clone(parent.factories);\n      factories = factories.concat(copied);\n      return new IterableDiffers(factories);\n    } else {\n      return new IterableDiffers(factories);\n    }\n  }\n/**\n *  Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the inherited {@link IterableDiffers} instance with the provided factories and return a new {@link IterableDiffers} instance. * The following example shows how to extend an existing list of factories, which will only be applied to the injector for this component and its children. This step is all that's required to make a new {@link IterableDiffer} available. * ### Example * ```\n * @Component({ undefined viewProviders: [ IterableDiffers.extend([new ImmutableListDiffer()]) ] }) ```\n * @param {?} factories\n * @return {?}\n */\nstatic extend(factories: IterableDifferFactory[]): Provider {\n    return new Provider(IterableDiffers, {\n      useFactory: (parent: IterableDiffers) => {\n        if (isBlank(parent)) {\n          // Typically would occur when calling IterableDiffers.extend inside of dependencies passed\n          // to\n          // bootstrap(), which would override default pipes instead of extending them.\n          throw new BaseException('Cannot extend IterableDiffers without a parent injector');\n        }\n        return IterableDiffers.create(factories, parent);\n      },\n      // Dependency technically isn't optional, but we can provide a better error message this way.\n      deps: [[IterableDiffers, new SkipSelfMetadata(), new OptionalMetadata()]]\n    });\n  }\n/**\n * @param {?} iterable\n * @return {?}\n */\nfind(iterable: any): IterableDifferFactory {\n    var /** @type {?} */ factory = this.factories.find(f => f.supports(iterable));\n    if (isPresent(factory)) {\n      return factory;\n    } else {\n      throw new BaseException(\n          `Cannot find a differ supporting object '${iterable}' of type '${getTypeNameForDebugging(iterable)}'`);\n    }\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nIterableDiffers.prototype.factories;\n  }\n\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}