{"version":3,"file":"default_keyvalue_differ.js","sourceRoot":"","sources":["../../../../../../../modules/@angular/core/src/change_detection/differs/default_keyvalue_differ.ts"],"names":[],"mappings":"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","sourcesContent":["import {MapWrapper, StringMapWrapper} from '../../../src/facade/collection';\nimport {stringify, looseIdentical, isJsObject, isBlank} from '../../../src/facade/lang';\nimport {BaseException} from '../../../src/facade/exceptions';\nimport {ChangeDetectorRef} from '../change_detector_ref';\nimport {KeyValueDiffer, KeyValueDifferFactory} from './keyvalue_differs';\n\n/* @ts2dart_const */\nexport class DefaultKeyValueDifferFactory implements KeyValueDifferFactory {\n/**\n */\nconstructor() {}\n/**\n * @param {?} obj\n * @return {?}\n */\nsupports(obj: any): boolean { return obj instanceof Map || isJsObject(obj); }\n/**\n * @param {?} cdRef\n * @return {?}\n */\ncreate(cdRef: ChangeDetectorRef): KeyValueDiffer { return new DefaultKeyValueDiffer(); }\n}\n\nexport class DefaultKeyValueDiffer implements KeyValueDiffer {\nprivate _records: Map<any, any> = new Map();\nprivate _mapHead: KeyValueChangeRecord = null;\nprivate _previousMapHead: KeyValueChangeRecord = null;\nprivate _changesHead: KeyValueChangeRecord = null;\nprivate _changesTail: KeyValueChangeRecord = null;\nprivate _additionsHead: KeyValueChangeRecord = null;\nprivate _additionsTail: KeyValueChangeRecord = null;\nprivate _removalsHead: KeyValueChangeRecord = null;\nprivate _removalsTail: KeyValueChangeRecord = null;\n\n  get isDirty(): boolean {\n    return this._additionsHead !== null || this._changesHead !== null ||\n           this._removalsHead !== null;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEachItem(fn: Function) {\n    var /** @type {?} */ record: KeyValueChangeRecord;\n    for (record = this._mapHead; record !== null; record = record._next) {\n      fn(record);\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEachPreviousItem(fn: Function) {\n    var /** @type {?} */ record: KeyValueChangeRecord;\n    for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {\n      fn(record);\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEachChangedItem(fn: Function) {\n    var /** @type {?} */ record: KeyValueChangeRecord;\n    for (record = this._changesHead; record !== null; record = record._nextChanged) {\n      fn(record);\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEachAddedItem(fn: Function) {\n    var /** @type {?} */ record: KeyValueChangeRecord;\n    for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n      fn(record);\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEachRemovedItem(fn: Function) {\n    var /** @type {?} */ record: KeyValueChangeRecord;\n    for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n      fn(record);\n    }\n  }\n/**\n * @param {?} map\n * @return {?}\n */\ndiff(map: Map<any, any>): any {\n    if (isBlank(map)) map = MapWrapper.createFromPairs([]);\n    if (!(map instanceof Map || isJsObject(map))) {\n      throw new BaseException(`Error trying to diff '${map}'`);\n    }\n\n    if (this.check(map)) {\n      return this;\n    } else {\n      return null;\n    }\n  }\n/**\n * @return {?}\n */\nonDestroy() {}\n/**\n * @param {?} map\n * @return {?}\n */\ncheck(map: Map<any, any>): boolean {\n    this._reset();\n    var /** @type {?} */ records = this._records;\n    var /** @type {?} */ oldSeqRecord: KeyValueChangeRecord = this._mapHead;\n    var /** @type {?} */ lastOldSeqRecord: KeyValueChangeRecord = null;\n    var /** @type {?} */ lastNewSeqRecord: KeyValueChangeRecord = null;\n    var /** @type {?} */ seqChanged: boolean = false;\n\n    this._forEach(map, (value, key) => {\n      var /** @type {?} */ newSeqRecord;\n      if (oldSeqRecord !== null && key === oldSeqRecord.key) {\n        newSeqRecord = oldSeqRecord;\n        if (!looseIdentical(value, oldSeqRecord.currentValue)) {\n          oldSeqRecord.previousValue = oldSeqRecord.currentValue;\n          oldSeqRecord.currentValue = value;\n          this._addToChanges(oldSeqRecord);\n        }\n      } else {\n        seqChanged = true;\n        if (oldSeqRecord !== null) {\n          oldSeqRecord._next = null;\n          this._removeFromSeq(lastOldSeqRecord, oldSeqRecord);\n          this._addToRemovals(oldSeqRecord);\n        }\n        if (records.has(key)) {\n          newSeqRecord = records.get(key);\n        } else {\n          newSeqRecord = new KeyValueChangeRecord(key);\n          records.set(key, newSeqRecord);\n          newSeqRecord.currentValue = value;\n          this._addToAdditions(newSeqRecord);\n        }\n      }\n\n      if (seqChanged) {\n        if (this._isInRemovals(newSeqRecord)) {\n          this._removeFromRemovals(newSeqRecord);\n        }\n        if (lastNewSeqRecord == null) {\n          this._mapHead = newSeqRecord;\n        } else {\n          lastNewSeqRecord._next = newSeqRecord;\n        }\n      }\n      lastOldSeqRecord = oldSeqRecord;\n      lastNewSeqRecord = newSeqRecord;\n      oldSeqRecord = oldSeqRecord === null ? null : oldSeqRecord._next;\n    });\n    this._truncate(lastOldSeqRecord, oldSeqRecord);\n    return this.isDirty;\n  }\n/**\n * @internal\n * @return {?}\n */\n_reset() {\n    if (this.isDirty) {\n      var /** @type {?} */ record: KeyValueChangeRecord;\n      // Record the state of the mapping\n      for (record = this._previousMapHead = this._mapHead; record !== null; record = record._next) {\n        record._nextPrevious = record._next;\n      }\n\n      for (record = this._changesHead; record !== null; record = record._nextChanged) {\n        record.previousValue = record.currentValue;\n      }\n\n      for (record = this._additionsHead; record != null; record = record._nextAdded) {\n        record.previousValue = record.currentValue;\n      }\n\n      // todo(vicb) once assert is supported\n      // assert(() {\n      //  var r = _changesHead;\n      //  while (r != null) {\n      //    var nextRecord = r._nextChanged;\n      //    r._nextChanged = null;\n      //    r = nextRecord;\n      //  }\n      //\n      //  r = _additionsHead;\n      //  while (r != null) {\n      //    var nextRecord = r._nextAdded;\n      //    r._nextAdded = null;\n      //    r = nextRecord;\n      //  }\n      //\n      //  r = _removalsHead;\n      //  while (r != null) {\n      //    var nextRecord = r._nextRemoved;\n      //    r._nextRemoved = null;\n      //    r = nextRecord;\n      //  }\n      //\n      //  return true;\n      //});\n      this._changesHead = this._changesTail = null;\n      this._additionsHead = this._additionsTail = null;\n      this._removalsHead = this._removalsTail = null;\n    }\n  }\n/**\n * @internal\n * @param {?} lastRecord\n * @param {?} record\n * @return {?}\n */\n_truncate(lastRecord: KeyValueChangeRecord, record: KeyValueChangeRecord) {\n    while (record !== null) {\n      if (lastRecord === null) {\n        this._mapHead = null;\n      } else {\n        lastRecord._next = null;\n      }\n      var /** @type {?} */ nextRecord = record._next;\n      // todo(vicb) assert\n      // assert((() {\n      //  record._next = null;\n      //  return true;\n      //}));\n      this._addToRemovals(record);\n      lastRecord = record;\n      record = nextRecord;\n    }\n\n    for (var /** @type {?} */ rec: KeyValueChangeRecord = this._removalsHead; rec !== null; rec = rec._nextRemoved) {\n      rec.previousValue = rec.currentValue;\n      rec.currentValue = null;\n      this._records.delete(rec.key);\n    }\n  }\n/**\n * @internal\n * @param {?} record\n * @return {?}\n */\n_isInRemovals(record: KeyValueChangeRecord) {\n    return record === this._removalsHead || record._nextRemoved !== null ||\n           record._prevRemoved !== null;\n  }\n/**\n * @internal\n * @param {?} record\n * @return {?}\n */\n_addToRemovals(record: KeyValueChangeRecord) {\n    // todo(vicb) assert\n    // assert(record._next == null);\n    // assert(record._nextAdded == null);\n    // assert(record._nextChanged == null);\n    // assert(record._nextRemoved == null);\n    // assert(record._prevRemoved == null);\n    if (this._removalsHead === null) {\n      this._removalsHead = this._removalsTail = record;\n    } else {\n      this._removalsTail._nextRemoved = record;\n      record._prevRemoved = this._removalsTail;\n      this._removalsTail = record;\n    }\n  }\n/**\n * @internal\n * @param {?} prev\n * @param {?} record\n * @return {?}\n */\n_removeFromSeq(prev: KeyValueChangeRecord, record: KeyValueChangeRecord) {\n    var /** @type {?} */ next = record._next;\n    if (prev === null) {\n      this._mapHead = next;\n    } else {\n      prev._next = next;\n    }\n    // todo(vicb) assert\n    // assert((() {\n    //  record._next = null;\n    //  return true;\n    //})());\n  }\n/**\n * @internal\n * @param {?} record\n * @return {?}\n */\n_removeFromRemovals(record: KeyValueChangeRecord) {\n    // todo(vicb) assert\n    // assert(record._next == null);\n    // assert(record._nextAdded == null);\n    // assert(record._nextChanged == null);\n\n    var /** @type {?} */ prev = record._prevRemoved;\n    var /** @type {?} */ next = record._nextRemoved;\n    if (prev === null) {\n      this._removalsHead = next;\n    } else {\n      prev._nextRemoved = next;\n    }\n    if (next === null) {\n      this._removalsTail = prev;\n    } else {\n      next._prevRemoved = prev;\n    }\n    record._prevRemoved = record._nextRemoved = null;\n  }\n/**\n * @internal\n * @param {?} record\n * @return {?}\n */\n_addToAdditions(record: KeyValueChangeRecord) {\n    // todo(vicb): assert\n    // assert(record._next == null);\n    // assert(record._nextAdded == null);\n    // assert(record._nextChanged == null);\n    // assert(record._nextRemoved == null);\n    // assert(record._prevRemoved == null);\n    if (this._additionsHead === null) {\n      this._additionsHead = this._additionsTail = record;\n    } else {\n      this._additionsTail._nextAdded = record;\n      this._additionsTail = record;\n    }\n  }\n/**\n * @internal\n * @param {?} record\n * @return {?}\n */\n_addToChanges(record: KeyValueChangeRecord) {\n    // todo(vicb) assert\n    // assert(record._nextAdded == null);\n    // assert(record._nextChanged == null);\n    // assert(record._nextRemoved == null);\n    // assert(record._prevRemoved == null);\n    if (this._changesHead === null) {\n      this._changesHead = this._changesTail = record;\n    } else {\n      this._changesTail._nextChanged = record;\n      this._changesTail = record;\n    }\n  }\n/**\n * @return {?}\n */\ntoString(): string {\n    var /** @type {?} */ items = [];\n    var /** @type {?} */ previous = [];\n    var /** @type {?} */ changes = [];\n    var /** @type {?} */ additions = [];\n    var /** @type {?} */ removals = [];\n    var /** @type {?} */ record: KeyValueChangeRecord;\n\n    for (record = this._mapHead; record !== null; record = record._next) {\n      items.push(stringify(record));\n    }\n    for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {\n      previous.push(stringify(record));\n    }\n    for (record = this._changesHead; record !== null; record = record._nextChanged) {\n      changes.push(stringify(record));\n    }\n    for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n      additions.push(stringify(record));\n    }\n    for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n      removals.push(stringify(record));\n    }\n\n    return \"map: \" + items.join(', ') + \"\\n\" + \"previous: \" + previous.join(', ') + \"\\n\" +\n           \"additions: \" + additions.join(', ') + \"\\n\" + \"changes: \" + changes.join(', ') + \"\\n\" +\n           \"removals: \" + removals.join(', ') + \"\\n\";\n  }\n/**\n * @internal\n * @param {?} obj\n * @param {?} fn\n * @return {?}\n */\n_forEach(obj, fn: Function) {\n    if (obj instanceof Map) {\n      ( /** @type {?} */((<Map<any, any>>obj))).forEach( /** @type {?} */((<any>fn)));\n    } else {\n      StringMapWrapper.forEach(obj, fn);\n    }\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nDefaultKeyValueDiffer.prototype._records;\n /** @type {?} */\nDefaultKeyValueDiffer.prototype._mapHead;\n /** @type {?} */\nDefaultKeyValueDiffer.prototype._previousMapHead;\n /** @type {?} */\nDefaultKeyValueDiffer.prototype._changesHead;\n /** @type {?} */\nDefaultKeyValueDiffer.prototype._changesTail;\n /** @type {?} */\nDefaultKeyValueDiffer.prototype._additionsHead;\n /** @type {?} */\nDefaultKeyValueDiffer.prototype._additionsTail;\n /** @type {?} */\nDefaultKeyValueDiffer.prototype._removalsHead;\n /** @type {?} */\nDefaultKeyValueDiffer.prototype._removalsTail;\n  }\n\n}\n\n\nexport class KeyValueChangeRecord {\n  previousValue: any = null;\n  currentValue: any = null;\n\n  /** @internal */\n  _nextPrevious: KeyValueChangeRecord = null;\n  /** @internal */\n  _next: KeyValueChangeRecord = null;\n  /** @internal */\n  _nextAdded: KeyValueChangeRecord = null;\n  /** @internal */\n  _nextRemoved: KeyValueChangeRecord = null;\n  /** @internal */\n  _prevRemoved: KeyValueChangeRecord = null;\n  /** @internal */\n  _nextChanged: KeyValueChangeRecord = null;\n/**\n * @param {?} key\n */\nconstructor(public key: any) {}\n/**\n * @return {?}\n */\ntoString(): string {\n    return looseIdentical(this.previousValue, this.currentValue) ?\n               stringify(this.key) :\n               (stringify(this.key) + '[' + stringify(this.previousValue) + '->' +\n                stringify(this.currentValue) + ']');\n  }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nKeyValueChangeRecord.prototype.previousValue;\n /** @type {?} */\nKeyValueChangeRecord.prototype.currentValue;\n /** @internal\n @type {?} */\nKeyValueChangeRecord.prototype._nextPrevious;\n /** @internal\n @type {?} */\nKeyValueChangeRecord.prototype._next;\n /** @internal\n @type {?} */\nKeyValueChangeRecord.prototype._nextAdded;\n /** @internal\n @type {?} */\nKeyValueChangeRecord.prototype._nextRemoved;\n /** @internal\n @type {?} */\nKeyValueChangeRecord.prototype._prevRemoved;\n /** @internal\n @type {?} */\nKeyValueChangeRecord.prototype._nextChanged;\n /** @type {?} */\nKeyValueChangeRecord.prototype.key;\n  }\n\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}