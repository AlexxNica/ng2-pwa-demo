{"version":3,"file":"change_detection_util.js","sourceRoot":"","sources":["../../../../../../modules/@angular/core/src/change_detection/change_detection_util.ts"],"names":[],"mappings":";AAAA,uBAA0C,uBAAuB,CAAC,CAAA;AAClE,6BAAoD,6BAA6B,CAAC,CAAA;AAElF,qBAA6B,uBAAuB,CAAC;AAA7C,+CAA6C;AACzB,qBAAa,GAA8B,IAAI,MAAM,EAAE,CAAC;AACpF;;;;GAIG;AACH,sBAA6B,CAAM,EAAE,CAAM;IACzC,EAAE,CAAC,CAAC,+BAAkB,CAAC,CAAC,CAAC,IAAI,+BAAkB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACnD,MAAM,CAAC,8BAAiB,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY,CAAC,CAAC;IAE/C,CAAC;IAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,+BAAkB,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAW,CAAC,CAAC,CAAC,IAAI,CAAC,+BAAkB,CAAC,CAAC,CAAC;QACnE,CAAC,kBAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3B,MAAM,CAAC,IAAI,CAAC;IAEd,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,MAAM,CAAC,qBAAc,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC9B,CAAC;AACH,CAAC;AAXe,oBAAY,eAW3B,CAAA;AAED;;;;;;;;;;;;;;;;;GAiBG;AACH;IACA;;OAEG;IACH,YAAmB,OAAY;QAAZ,YAAO,GAAP,OAAO,CAAK;IAAG,CAAC;IACnC;;;OAGG;IACH,OAAO,IAAI,CAAC,KAAU,IAAkB,MAAM,CAAC,IAAI,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAEvE,OAAO,8BAA8B;QACtC,gBAAgB;QACjB,YAAY,CAAC,SAAS,CAAC,OAAO,CAAC;IAC7B,CAAC;AAEH,CAAC;AAhBY,oBAAY,eAgBxB,CAAA;AAED;;GAEG;AACH;IAAA;QACO,oBAAe,GAAG,KAAK,CAAC;IAsB/B,CAAC;IArBD;;;OAGG;IACH,MAAM,CAAC,KAAU;QACb,EAAE,CAAC,CAAC,KAAK,YAAY,YAAY,CAAC,CAAC,CAAC;YAClC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;YAC5B,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC;QACvB,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IACH;;OAEG;IACH,KAAK,KAAK,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC,CAAC,CAAC;IAEvC,OAAO,8BAA8B;QACtC,gBAAgB;QACjB,cAAc,CAAC,SAAS,CAAC,eAAe,CAAC;IACvC,CAAC;AAEH,CAAC;AAvBY,sBAAc,iBAuB1B,CAAA;AAED;;GAEG;AACH;IACA;;;OAGG;IACH,YAAmB,aAAkB,EAC9B,YAAiB;QADL,kBAAa,GAAb,aAAa,CAAK;QAC9B,iBAAY,GAAZ,YAAY,CAAK;IAAG,CAAC;IAC5B;;;OAGG;IACH,aAAa,KAAc,MAAM,CAAC,IAAI,CAAC,aAAa,KAAK,qBAAa,CAAC,CAAC,CAAC;IAEvE,OAAO,8BAA8B;QACtC,gBAAgB;QACjB,YAAY,CAAC,SAAS,CAAC,aAAa,CAAC;QACpC,gBAAgB;QACjB,YAAY,CAAC,SAAS,CAAC,YAAY,CAAC;IAClC,CAAC;AAEH,CAAC;AApBY,oBAAY,eAoBxB,CAAA","sourcesContent":["import {looseIdentical, isPrimitive} from '../../src/facade/lang';\nimport {isListLikeIterable, areIterablesEqual} from '../../src/facade/collection';\n\nexport {looseIdentical} from '../../src/facade/lang';\nexport var /** @type {?} */ uninitialized: Object = /*@ts2dart_const*/ new Object();\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nexport function devModeEqual(a: any, b: any): boolean {\n  if (isListLikeIterable(a) && isListLikeIterable(b)) {\n    return areIterablesEqual(a, b, devModeEqual);\n\n  } else if (!isListLikeIterable(a) && !isPrimitive(a) && !isListLikeIterable(b) &&\n             !isPrimitive(b)) {\n    return true;\n\n  } else {\n    return looseIdentical(a, b);\n  }\n}\n\n/**\n * Indicates that the result of a {@link PipeMetadata} transformation has changed even though the\n * reference\n * has not changed.\n *\n * The wrapped value will be unwrapped by change detection, and the unwrapped value will be stored.\n *\n * Example:\n *\n * ```\n * if (this._latestValue === this._latestReturnedValue) {\n *    return this._latestReturnedValue;\n *  } else {\n *    this._latestReturnedValue = this._latestValue;\n *    return WrappedValue.wrap(this._latestValue); // this will force update\n *  }\n * ```\n */\nexport class WrappedValue {\n/**\n * @param {?} wrapped\n */\nconstructor(public wrapped: any) {}\n/**\n * @param {?} value\n * @return {?}\n */\nstatic wrap(value: any): WrappedValue { return new WrappedValue(value); }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nWrappedValue.prototype.wrapped;\n  }\n\n}\n\n/**\n * Helper class for unwrapping WrappedValue s\n */\nexport class ValueUnwrapper {\npublic hasWrappedValue = false;\n/**\n * @param {?} value\n * @return {?}\n */\nunwrap(value: any): any {\n    if (value instanceof WrappedValue) {\n      this.hasWrappedValue = true;\n      return value.wrapped;\n    }\n    return value;\n  }\n/**\n * @return {?}\n */\nreset() { this.hasWrappedValue = false; }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nValueUnwrapper.prototype.hasWrappedValue;\n  }\n\n}\n\n/**\n * Represents a basic change from a previous to a new value.\n */\nexport class SimpleChange {\n/**\n * @param {?} previousValue\n * @param {?} currentValue\n */\nconstructor(public previousValue: any,\npublic currentValue: any) {}\n/**\n *  Check whether the new value is the first value assigned.\n * @return {?}\n */\nisFirstChange(): boolean { return this.previousValue === uninitialized; }\n\n  static _tsickle_typeAnnotationsHelper() {\n /** @type {?} */\nSimpleChange.prototype.previousValue;\n /** @type {?} */\nSimpleChange.prototype.currentValue;\n  }\n\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}