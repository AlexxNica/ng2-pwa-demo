{"version":3,"file":"async.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/testing/async.ts"],"names":[],"mappings":";AACA;;;;GAIG;AACH,eAAsB,EAAY;IAChC,MAAM,CAAC;QACL,MAAM,CAAC,IAAI,OAAO,CAAO,CAAC,cAAc,EAAE,YAAY;YACpD,IAAI,gBAAgB,CAAC,iBAAiB,GAAG,IAAI,CAAC,mBAAmB,CAAC,CAAC;YACnE,IAAI,gBAAgB,CAAC,YAAY,GAAG,IAAI,iBAAiB,CAAC,cAAc,EAAE,YAAY,EAAE,MAAM,CAAC,CAAC;YAChG,IAAI,gBAAgB,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAChE,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QAC1B,CAAC,CAAC,CAAC;IACL,CAAC,CAAA;AACH,CAAC;AATe,aAAK,QASpB,CAAA","sourcesContent":["\n/**\n *  Wraps a test function in an asynchronous test zone. The test will automatically complete when all asynchronous calls within this zone are done. Can be used to wrap an {@link inject} call. * Example: * ``` it('...', async(inject([AClass], (object) => { object.doSomething.then(() => { expect(...); }) }); ```\n * @param {?} fn\n * @return {?}\n */\nexport function async(fn: Function): Function {\n  return () => {\n    return new Promise<void>((finishCallback, failCallback) => {\n      var /** @type {?} */ AsyncTestZoneSpec = Zone['AsyncTestZoneSpec'];\n      var /** @type {?} */ testZoneSpec = new AsyncTestZoneSpec(finishCallback, failCallback, 'test');\n      var /** @type {?} */ testZone = Zone.current.fork(testZoneSpec);\n      return testZone.run(fn);\n    });\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}