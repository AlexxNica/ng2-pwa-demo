{"version":3,"file":"testing.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/testing/testing.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Public Test Library for unit testing Angular2 Applications. Uses the\n * Jasmine framework.\n */\nimport {inject, async, injectAsync, TestInjector, getTestInjector} from './test_injector';\n\nimport {isPromise} from '../src/facade/lang';\n\nexport {inject, async, injectAsync} from './test_injector';\n\ndeclare var global;\n\nvar /** @type {?} */ _global = /** @type {?} */(( <any>(typeof window === 'undefined' ? global : window)));\n\nexport var /** @type {?} */ expect: Function = _global.expect;\n\n/**\n * Run a function (with an optional asynchronous callback) after each test case.\n *\n * See http://jasmine.github.io/ for more details.\n *\n * ## Example:\n *\n * {@example testing/ts/testing.ts region='afterEach'}\n */\nexport var /** @type {?} */ afterEach: Function = _global.afterEach;\n\n/**\n * Group test cases together under a common description prefix.\n *\n * See http://jasmine.github.io/ for more details.\n *\n * ## Example:\n *\n * {@example testing/ts/testing.ts region='describeIt'}\n */\nexport var /** @type {?} */ describe: Function = _global.describe;\n\n/**\n * See {@link fdescribe}.\n */\nexport var /** @type {?} */ ddescribe: Function = _global.fdescribe;\n\n/**\n * Like {@link describe}, but instructs the test runner to only run\n * the test cases in this group. This is useful for debugging.\n *\n * See http://jasmine.github.io/ for more details.\n *\n * ## Example:\n *\n * {@example testing/ts/testing.ts region='fdescribe'}\n */\nexport var /** @type {?} */ fdescribe: Function = _global.fdescribe;\n\n/**\n * Like {@link describe}, but instructs the test runner to exclude\n * this group of test cases from execution. This is useful for\n * debugging, or for excluding broken tests until they can be fixed.\n *\n * See http://jasmine.github.io/ for more details.\n *\n * ## Example:\n *\n * {@example testing/ts/testing.ts region='xdescribe'}\n */\nexport var /** @type {?} */ xdescribe: Function = _global.xdescribe;\n\nvar /** @type {?} */ jsmBeforeEach = _global.beforeEach;\nvar /** @type {?} */ jsmIt = _global.it;\nvar /** @type {?} */ jsmIIt = _global.fit;\nvar /** @type {?} */ jsmXIt = _global.xit;\n\nvar /** @type {?} */ testInjector: TestInjector = getTestInjector();\n\n// Reset the test providers before each test.\njsmBeforeEach(() => { testInjector.reset(); });\n/**\n *  Allows overriding default providers of the test injector, which are defined in test_injector.js. * The given function must return a list of DI providers. * ## Example: * {@example testing/ts/testing.ts region='beforeEachProviders'}\n * @param {?} fn\n * @return {?}\n */\nexport function beforeEachProviders(fn): void {\n  jsmBeforeEach(() => {\n    var /** @type {?} */ providers = fn();\n    if (!providers) return;\n    try {\n      testInjector.addProviders(providers);\n    } catch ( /** @type {?} */e) {\n      throw new Error('beforeEachProviders was called after the injector had ' +\n                      'been used in a beforeEach or it block. This invalidates the ' +\n                      'test injector');\n    }\n  });\n}\n/**\n * @param {?} fn\n * @return {?}\n */\nfunction _wrapTestFn(fn: Function) {\n  // Wraps a test or beforeEach function to handle synchronous and asynchronous execution.\n  return (done: any) => {\n    if (fn.length === 0) {\n      let /** @type {?} */ retVal = fn();\n      if (isPromise(retVal)) {\n        // Asynchronous test function - wait for completion.\n        ( /** @type {?} */((<Promise<any>>retVal))).then(done, done.fail);\n      } else {\n        // Synchronous test function - complete immediately.\n        done();\n      }\n    } else {\n      // Asynchronous test function that takes \"done\" as parameter.\n      fn(done);\n    }\n  };\n}\n/**\n * @param {?} jsmFn\n * @param {?} name\n * @param {?} testFn\n * @param {?} testTimeOut\n * @return {?}\n */\nfunction _it(jsmFn: Function, name: string, testFn: Function, testTimeOut: number): void {\n  jsmFn(name, _wrapTestFn(testFn), testTimeOut);\n}\n/**\n *  Wrapper around Jasmine beforeEach function. * beforeEach may be used with the `inject` function to fetch dependencies. * See http://jasmine.github.io/ for more details. * ## Example: * {@example testing/ts/testing.ts region='beforeEach'}\n * @param {?} fn\n * @return {?}\n */\nexport function beforeEach(fn: Function): void {\n  jsmBeforeEach(_wrapTestFn(fn));\n}\n/**\n *  Define a single test case with the given test name and execution function. * The test function can be either a synchronous function, the result of {@link async}, or an injected function created via {@link inject}. * Wrapper around Jasmine it function. See http://jasmine.github.io/ for more details. * ## Example: * {@example testing/ts/testing.ts region='describeIt'}\n * @param {?} name\n * @param {?} fn\n * @param {?=} timeOut\n * @return {?}\n */\nexport function it(name: string, fn: Function, timeOut: number = null): void {\n  return _it(jsmIt, name, fn, timeOut);\n}\n/**\n *  Like {@link it}, but instructs the test runner to exclude this test entirely. Useful for debugging or for excluding broken tests until they can be fixed. * Wrapper around Jasmine xit function. See http://jasmine.github.io/ for more details. * ## Example: * {@example testing/ts/testing.ts region='xit'}\n * @param {?} name\n * @param {?} fn\n * @param {?=} timeOut\n * @return {?}\n */\nexport function xit(name: string, fn: Function, timeOut: number = null): void {\n  return _it(jsmXIt, name, fn, timeOut);\n}\n/**\n *  See {@link fit}.\n * @param {?} name\n * @param {?} fn\n * @param {?=} timeOut\n * @return {?}\n */\nexport function iit(name: string, fn: Function, timeOut: number = null): void {\n  return _it(jsmIIt, name, fn, timeOut);\n}\n/**\n *  Like {@link it}, but instructs the test runner to only run this test. Useful for debugging. * Wrapper around Jasmine fit function. See http://jasmine.github.io/ for more details. * ## Example: * {@example testing/ts/testing.ts region='fit'}\n * @param {?} name\n * @param {?} fn\n * @param {?=} timeOut\n * @return {?}\n */\nexport function fit(name: string, fn: Function, timeOut: number = null): void {\n  return _it(jsmIIt, name, fn, timeOut);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}