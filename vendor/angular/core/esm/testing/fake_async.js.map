{"version":3,"file":"fake_async.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/testing/fake_async.ts"],"names":[],"mappings":";AAAA,wBAA4B,UAAU,CAAC,CAAA;AAGvC,IAAI,gBAAgB,CAAC,0BAA0B,GAAG,IAAI,CAAC,uBAAuB,CAAC,CAAC;AAChF;;;;;GAKG;AACH,mBAA0B,EAAY;IACpC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC;QACtD,MAAM,IAAI,qBAAa,CAAC,qCAAqC,CAAC,CAAC;IACjE,CAAC;IAED,IAAI,gBAAgB,CAAC,qBAAqB,GAAG,IAAI,0BAA0B,EAAE,CAAC;IAC9E,IAAI,gBAAgB,CAAC,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;IAE9E,MAAM,CAAC,UAAS,GAAG,IAAI;QACrB,IAAI,gBAAgB,CAAC,GAAG,GAAG,aAAa,CAAC,GAAG,CAAC;YAC3C,IAAI,gBAAgB,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC;YACvC,eAAe,EAAE,CAAC;YAClB,MAAM,CAAC,GAAG,CAAC;QACb,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,CAAC,qBAAqB,CAAC,qBAAqB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YAC3D,MAAM,IAAI,qBAAa,CAAC,GAAG,qBAAqB,CAAC,qBAAqB,CAAC,MAAM,GAAG;gBACxD,uCAAuC,CAAC,CAAC;QACnE,CAAC;QAED,EAAE,CAAC,CAAC,qBAAqB,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YACnD,MAAM,IAAI,qBAAa,CACnB,GAAG,qBAAqB,CAAC,aAAa,CAAC,MAAM,+BAA+B,CAAC,CAAC;QACpF,CAAC;QACD,MAAM,CAAC,GAAG,CAAC;IACb,CAAC,CAAC;AACJ,CAAC;AA1Be,iBAAS,YA0BxB,CAAA;AACD;;GAEG;AACH;IACE,IAAI,gBAAgB,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;IAC1E,EAAE,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAC;QACrB,MAAM,IAAI,KAAK,CAAC,wEAAwE,CAAC,CAAC;IAC5F,CAAC;IACD,MAAM,CAAC,QAAQ,CAAC;AAClB,CAAC;AACD;;;;GAIG;AACH;IACE,cAAc;AAChB,CAAC;AAFe,0BAAkB,qBAEjC,CAAA;AACD;;;;GAIG;AACH,cAAqB,MAAM,GAAW,CAAC;IACrC,qBAAqB,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACvC,CAAC;AAFe,YAAI,OAEnB,CAAA;AACD;;;GAGG;AACH;IACE,qBAAqB,EAAE,CAAC,eAAe,EAAE,CAAC;AAC5C,CAAC;AAFe,uBAAe,kBAE9B,CAAA","sourcesContent":["import {BaseException} from '../index';\nimport {getTestInjector} from './test_injector';\n\nlet /** @type {?} */ _FakeAsyncTestZoneSpecType = Zone['FakeAsyncTestZoneSpec'];\n/**\n *  Wraps a function to be executed in the fakeAsync zone: - microtasks are manually executed by calling `flushMicrotasks()`, - timers are synchronous, `tick()` simulates the asynchronous passage of time. * If there are any pending timers at the end of the function, an exception will be thrown. * Can be used to wrap inject() calls. * ## Example * {@example testing/ts/fake_async.ts region='basic'} *\n * @returns {Function} The function wrapped to be executed in the fakeAsync zone\n * @param {?} fn\n * @return {?}\n */\nexport function fakeAsync(fn: Function): Function {\n  if (Zone.current.get('FakeAsyncTestZoneSpec') != null) {\n    throw new BaseException('fakeAsync() calls can not be nested');\n  }\n\n  let /** @type {?} */ fakeAsyncTestZoneSpec = new _FakeAsyncTestZoneSpecType();\n  let /** @type {?} */ fakeAsyncZone = Zone.current.fork(fakeAsyncTestZoneSpec);\n\n  return function(...args) {\n    let /** @type {?} */ res = fakeAsyncZone.run(() => {\n      let /** @type {?} */ res = fn(...args);\n      flushMicrotasks();\n      return res;\n    });\n\n    if (fakeAsyncTestZoneSpec.pendingPeriodicTimers.length > 0) {\n      throw new BaseException(`${fakeAsyncTestZoneSpec.pendingPeriodicTimers.length} ` +\n                              `periodic timer(s) still in the queue.`);\n    }\n\n    if (fakeAsyncTestZoneSpec.pendingTimers.length > 0) {\n      throw new BaseException(\n          `${fakeAsyncTestZoneSpec.pendingTimers.length} timer(s) still in the queue.`);\n    }\n    return res;\n  };\n}\n/**\n * @return {?}\n */\nfunction _getFakeAsyncZoneSpec(): any {\n  let /** @type {?} */ zoneSpec = Zone.current.get('FakeAsyncTestZoneSpec');\n  if (zoneSpec == null) {\n    throw new Error('The code should be running in the fakeAsync zone to call this function');\n  }\n  return zoneSpec;\n}\n/**\n *  Clear the queue of pending timers and microtasks. Tests no longer need to call this explicitly. *\n * @deprecated\n * @return {?}\n */\nexport function clearPendingTimers(): void {\n  // Do nothing.\n}\n/**\n *  Simulates the asynchronous passage of time for the timers in the fakeAsync zone. * The microtasks queue is drained at the very start of this function and after any timer callback has been executed. * ## Example * {@example testing/ts/fake_async.ts region='basic'} *\n * @param {?=} millis\n * @return {?}\n */\nexport function tick(millis: number = 0): void {\n  _getFakeAsyncZoneSpec().tick(millis);\n}\n/**\n *  Flush any pending microtasks.\n * @return {?}\n */\nexport function flushMicrotasks(): void {\n  _getFakeAsyncZoneSpec().flushMicrotasks();\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}