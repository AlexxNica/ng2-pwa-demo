{"version":3,"sources":["rewriter.ts"],"names":[],"mappings":"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","file":"rewriter.js","sourcesContent":["import * as ts from 'typescript';\n\n/**\n * A Rewriter manages iterating through a ts.SourceFile, copying input\n * to output while letting the subclass potentially alter some nodes\n * along the way by implementing maybeProcess().\n */\nexport abstract class Rewriter {\n  protected output: string[] = [];\n  /** Errors found while examining the code. */\n  protected diagnostics: ts.Diagnostic[] = [];\n  /**\n   * The current level of recursion through TypeScript Nodes.  Used in formatting internal debug\n   * print statements.\n   */\n  private indent: number = 0;\n\n  constructor(protected file: ts.SourceFile) {}\n\n  getOutput(): {output: string, diagnostics: ts.Diagnostic[]} {\n    if (this.indent !== 0) {\n      throw new Error('visit() failed to track nesting');\n    }\n    return {output: this.output.join(''), diagnostics: this.diagnostics};\n  }\n\n  /**\n   * visit traverses a Node, recursively writing all nodes not handled by this.maybeProcess.\n   */\n  visit(node: ts.Node) {\n    // this.logWithIndent('node: ' + ts.SyntaxKind[node.kind]);\n    this.indent++;\n    if (!this.maybeProcess(node)) this.writeNode(node);\n    this.indent--;\n  }\n\n  /**\n   * maybeProcess lets subclasses optionally processes a node.\n   *\n   * @return True if the node has been handled and doesn't need to be traversed;\n   *    false to have the node written and its children recursively visited.\n   */\n  protected abstract maybeProcess(node: ts.Node): boolean;\n\n  /** writeNode writes a ts.Node, calling this.visit() on its children. */\n  writeNode(node: ts.Node, skipComments = false) {\n    if (node.getChildCount() === 0) {\n      // Directly write complete tokens.\n      if (skipComments) {\n        // To skip comments, we skip all whitespace/comments preceding\n        // the node.  But if there was anything skipped we should emit\n        // a newline in its place so that the node remains separated\n        // from the previous node.  TODO: don't skip anything here if\n        // there wasn't any comment.\n        if (node.getFullStart() < node.getStart()) {\n          this.emit('\\n');\n        }\n        this.emit(node.getText());\n      } else {\n        this.emit(node.getFullText());\n      }\n      return;\n    }\n    if (skipComments) {\n      throw new Error('skipComments unimplemented for complex Nodes');\n    }\n    let lastEnd = node.getFullStart();\n    for (let child of node.getChildren()) {\n      this.writeRange(lastEnd, child.getFullStart());\n      this.visit(child);\n      lastEnd = child.getEnd();\n    }\n    // Write any trailing text.\n    this.writeRange(lastEnd, node.getEnd());\n  }\n\n  // Write a span of the input file as expressed by absolute offsets.\n  // These offsets are found in attributes like node.getFullStart() and\n  // node.getEnd().\n  writeRange(from: number, to: number) {\n    // getSourceFile().getText() is wrong here because it has the text of\n    // the SourceFile node of the AST, which doesn't contain the comments\n    // preceding that node.  Semantically these ranges are just offsets\n    // into the original source file text, so slice from that.\n    let text = this.file.text.slice(from, to);\n    if (text) this.emit(text);\n  }\n\n  emit(str: string) { this.output.push(str); }\n\n  /* tslint:disable: no-unused-variable */\n  logWithIndent(message: string) {\n    /* tslint:enable: no-unused-variable */\n    let prefix = new Array(this.indent + 1).join('| ');\n    console.log(prefix + message);\n  }\n\n  /**\n   * Produces a compiler error that references the Node's kind.  This is useful for the \"else\"\n   * branch of code that is attempting to handle all possible input Node types, to ensure all cases\n   * covered.\n   */\n  errorUnimplementedKind(node: ts.Node, where: string) {\n    this.error(node, `${ts.SyntaxKind[node.kind]} not implemented in ${where}`);\n  }\n\n  error(node: ts.Node, messageText: string, start?: number, length?: number) {\n    start = start || node.getStart();\n    length = length || (node.getEnd() - start);\n    this.diagnostics.push({\n      file: this.file,\n      start,\n      length,\n      messageText,\n      category: ts.DiagnosticCategory.Error,\n      code: undefined,\n    });\n  }\n}\n"],"sourceRoot":"/source/"}