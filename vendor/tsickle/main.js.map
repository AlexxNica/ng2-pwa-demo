{"version":3,"sources":["main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import * as closure from 'google-closure-compiler';\nimport * as fs from 'fs';\nimport * as minimist from 'minimist';\nimport * as path from 'path';\nimport * as ts from 'typescript';\n\nimport * as tsickle from './tsickle';\n\n/**\n * File name for the generated Closure externs.\n * This is never written to disk, but should be unique with respect to\n * the js files that may actually exist.\n */\nconst externsFileName = 'tsickle_externs.js';\n\n/** Tsickle settings passed on the command line. */\ninterface Settings {\n  /** If true, write temporary .js files to disk. Useful for debugging. */\n  saveTemporaries?: boolean;\n\n  /** Path to write the final JS bundle to. */\n  outputPath: string;\n}\n\nfunction usage() {\n  console.error(`usage: tsickle [tsickle args] -- [tsc args]\n\nexample:\n  tsickle --output bundle.js -- -p src --noImplicitAny\n\ntsickle flags are:\n  --saveTemporaries  save intermediate .js files to disk\n  --output=PATH      write final Closure bundle to PATH\n`);\n}\n\n/**\n * Parses the command-line arguments, extracting the tsickle settings and\n * the arguments to pass on to tsc.\n */\nfunction loadSettingsFromArgs(args: string[]): {settings: Settings, tscArgs: string[]} {\n  let settings: Settings = {\n    saveTemporaries: null,\n    outputPath: null,\n  };\n  let parsedArgs = minimist(args);\n  for (let flag of Object.keys(parsedArgs)) {\n    switch (flag) {\n      case 'h':\n      case 'help':\n        usage();\n        process.exit(0);\n        break;\n      case 'saveTemporaries':\n        settings.saveTemporaries = true;\n        break;\n      case 'output':\n        settings.outputPath = parsedArgs[flag];\n        break;\n      case '_':\n        // This is part of the minimist API, and holds args after the '--'.\n        break;\n      default:\n        console.error(`unknown flag '--${flag}'`);\n        usage();\n        process.exit(1);\n    }\n  }\n  if (!settings.outputPath) {\n    console.error('must specify --output path');\n    usage();\n    process.exit(1);\n  }\n  // Arguments after the '--' arg are arguments to tsc.\n  let tscArgs = parsedArgs['_'];\n  return {settings, tscArgs};\n}\n\n/**\n * Loads the tsconfig.json from a directory.\n * Unfortunately there's a ton of logic in tsc.ts related to searching\n * for tsconfig.json etc. that we don't really want to replicate, e.g.\n * tsc appears to allow -p path/to/tsconfig.json while this only works\n * with -p path/to/containing/dir.\n *\n * @param args tsc command-line arguments.\n */\nfunction loadTscConfig(args: string[]):\n    {options?: ts.CompilerOptions, fileNames?: string[], errors?: ts.Diagnostic[]} {\n  // Gather tsc options/input files from command line.\n  let {options, fileNames, errors} = ts.parseCommandLine(args);\n  if (errors.length > 0) {\n    return {errors};\n  }\n\n  // Read further settings from tsconfig.json.\n  let projectDir = options.project || '.';\n  let configFileName = path.join(projectDir, 'tsconfig.json');\n  let {config: json, error} =\n      ts.readConfigFile(configFileName, path => fs.readFileSync(path, 'utf-8'));\n  if (error) {\n    return {errors: [error]};\n  }\n  ({options, fileNames, errors} =\n       ts.parseJsonConfigFileContent(json, ts.sys, projectDir, options, configFileName));\n  if (errors.length > 0) {\n    return {errors};\n  }\n\n  return {options, fileNames};\n}\n\n/**\n * Constructs a new ts.CompilerHost that overlays sources in substituteSource\n * over another ts.CompilerHost.\n *\n * @param substituteSource A map of source file name -> overlay source text.\n */\nfunction createSourceReplacingCompilerHost(\n    substituteSource: ts.Map<string>, delegate: ts.CompilerHost): ts.CompilerHost {\n  return {\n    getSourceFile,\n    getCancellationToken: delegate.getCancellationToken,\n    getDefaultLibFileName: delegate.getDefaultLibFileName,\n    writeFile: delegate.writeFile,\n    getCurrentDirectory: delegate.getCurrentDirectory,\n    getCanonicalFileName: delegate.getCanonicalFileName,\n    useCaseSensitiveFileNames: delegate.useCaseSensitiveFileNames,\n    getNewLine: delegate.getNewLine,\n    fileExists: delegate.fileExists,\n    readFile: delegate.readFile,\n    directoryExists: delegate.directoryExists,\n  };\n\n  function getSourceFile(\n      fileName: string, languageVersion: ts.ScriptTarget,\n      onError?: (message: string) => void): ts.SourceFile {\n    let sourceText: string;\n    if (substituteSource.hasOwnProperty(fileName)) {\n      sourceText = substituteSource[fileName];\n      return ts.createSourceFile(fileName, sourceText, languageVersion);\n    }\n    return delegate.getSourceFile(fileName, languageVersion, onError);\n  }\n}\n\n/**\n * Compiles TypeScript code into Closure-compiler-ready JS.\n * Doesn't write any files to disk; all JS content is returned in a map.\n */\nfunction toClosureJS(options: ts.CompilerOptions, fileNames: string[]):\n    {jsFiles?: {[fileName: string]: string}, errors?: ts.Diagnostic[]} {\n  // Parse and load the program without tsickle processing.\n  // This is so:\n  // - error messages point at the original source text\n  // - tsickle can use the result of typechecking for annotation\n  let program = ts.createProgram(fileNames, options);\n  let errors = ts.getPreEmitDiagnostics(program);\n  if (errors.length > 0) {\n    return {errors};\n  }\n\n  // TODO(evanm): let the user configure tsickle options via the command line.\n  // Or, better, just make tsickle always work without needing any options.\n  const tsickleOptions: tsickle.Options = {\n    untyped: true,\n  };\n\n  // Process each input file with tsickle and save the output.\n  let tsickleOutput: ts.Map<string> = {};\n  let tsickleExterns = '';\n  for (let fileName of fileNames) {\n    let {output, externs, diagnostics} =\n        tsickle.annotate(program, program.getSourceFile(fileName), tsickleOptions);\n    if (diagnostics.length > 0) {\n      return {errors: diagnostics};\n    }\n    tsickleOutput[fileName] = output;\n    if (externs) {\n      tsickleExterns += externs;\n    }\n  }\n\n  // Reparse and reload the program, inserting the tsickle output in\n  // place of the original source.\n  let host = createSourceReplacingCompilerHost(tsickleOutput, ts.createCompilerHost(options));\n  program = ts.createProgram(fileNames, options, host);\n  errors = ts.getPreEmitDiagnostics(program);\n  if (errors.length > 0) {\n    return {errors};\n  }\n\n  // Emit, creating a map of fileName => generated JS source.\n  let jsFiles: {[fileName: string]: string} = {\n    [externsFileName]: tsickleExterns,\n  };\n  function writeFile(fileName: string, data: string): void { jsFiles[fileName] = data; }\n  let {diagnostics} = program.emit(undefined, writeFile);\n  if (diagnostics.length > 0) {\n    return {errors: diagnostics};\n  }\n\n  // Postprocess generated JS.\n  function pathToModuleName(context: string, fileName: string): string {\n    // TODO(evanm): something more sophisticated here?\n    return fileName.replace('/', '.');\n  }\n  for (let fileName of Object.keys(jsFiles)) {\n    let {output} =\n        tsickle.convertCommonJsToGoogModule(fileName, jsFiles[fileName], pathToModuleName);\n    jsFiles[fileName] = output;\n  }\n\n  return {jsFiles};\n}\n\nfunction closureCompile(\n    jsFiles: {[fileName: string]: string}, outFile: string,\n    callback: (exitCode: number, output: string) => void): void {\n  const closureOptions: closure.CompileOptions = {\n    // Read input files from stdin as JSON.\n    'json_streams': 'IN',\n    // Write output file to disk.\n    'js_output_file': outFile,\n    'warning_level': 'VERBOSE',\n    'language_in': 'ECMASCRIPT6_STRICT',\n    'compilation_level': 'ADVANCED_OPTIMIZATIONS',\n  };\n\n  let compiler = new closure.compiler(closureOptions);\n  let process = compiler.run((exitCode, stdout, stderr) => { callback(exitCode, stderr); });\n\n  let jsonInput: closure.JSONStreamFile[] = [];\n  for (let fileName of Object.keys(jsFiles)) {\n    jsonInput.push({\n      path: fileName,\n      src: jsFiles[fileName],\n    });\n  }\n  process.stdin.end(JSON.stringify(jsonInput));\n}\n\nfunction main(args: string[]) {\n  let {settings, tscArgs} = loadSettingsFromArgs(args);\n  let {options, fileNames, errors} = loadTscConfig(tscArgs);\n  if (errors && errors.length > 0) {\n    console.error(tsickle.formatDiagnostics(errors));\n    process.exit(1);\n  }\n\n  // Run tsickle+TSC to convert inputs to Closure JS files.\n  let jsFiles: {[fileName: string]: string};\n  ({jsFiles, errors} = toClosureJS(options, fileNames));\n  if (errors && errors.length > 0) {\n    console.error(tsickle.formatDiagnostics(errors));\n    process.exit(1);\n  }\n  if (Object.keys(jsFiles).length === 0) {\n    console.error('no js files');\n    process.exit(1);\n  }\n\n  if (settings.saveTemporaries) {\n    for (let fileName of Object.keys(jsFiles)) {\n      fs.writeFileSync(fileName, jsFiles[fileName]);\n    }\n  }\n\n  // Run Closure compiiler to convert JS files to output bundle.\n  closureCompile(jsFiles, settings.outputPath, (exitCode, output) => {\n    if (output) console.error(output);\n    process.exit(exitCode);\n  });\n}\n\n// CLI entry point\nif (require.main === module) {\n  main(process.argv.splice(2));\n}\n"],"sourceRoot":"/source/"}