/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
import * as import0 from './city-picker.css.shim';
import * as import1 from '@angular/core/src/linker/debug_context';
import * as import2 from '@angular/core/src/linker/template_ref';
import * as import3 from '@angular/common/src/directives/ng_for';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/linker/view';
import * as import6 from './city-picker';
import * as import7 from '@angular/core/src/linker/element';
import * as import8 from '@angular/core/src/linker/view_utils';
import * as import9 from '@angular/core/src/di/injector';
import * as import10 from '@angular/core/src/linker/view_type';
import * as import11 from '@angular/core/src/change_detection/change_detection';
import * as import12 from '@angular/core/src/change_detection/differs/iterable_differs';
import * as import13 from '@angular/core/src/metadata/view';
import * as import14 from '@angular/core/src/linker/component_factory';
const styles_CityPicker:any[] = [import0.styles];
const nodeDebugInfos_CityPicker0:import1.StaticNodeDebugInfo[] = [
  new import1.StaticNodeDebugInfo([],null,{}),
  new import1.StaticNodeDebugInfo([],null,{}),
  new import1.StaticNodeDebugInfo([],null,{}),
  new import1.StaticNodeDebugInfo([],null,{}),
  new import1.StaticNodeDebugInfo([],null,{}),
  new import1.StaticNodeDebugInfo([],null,{}),
  new import1.StaticNodeDebugInfo([],null,{}),
  new import1.StaticNodeDebugInfo([],null,{'picker': null}),
  new import1.StaticNodeDebugInfo([],null,{}),
  new import1.StaticNodeDebugInfo([
    import2.TemplateRef,
    import3.NgFor
  ]
  ,null,{}),
  new import1.StaticNodeDebugInfo([],null,{}),
  new import1.StaticNodeDebugInfo([],null,{}),
  new import1.StaticNodeDebugInfo([],null,{}),
  new import1.StaticNodeDebugInfo([],null,{}),
  new import1.StaticNodeDebugInfo([],null,{}),
  new import1.StaticNodeDebugInfo([],null,{}),
  new import1.StaticNodeDebugInfo([],null,{}),
  new import1.StaticNodeDebugInfo([],null,{}),
  new import1.StaticNodeDebugInfo([],null,{}),
  new import1.StaticNodeDebugInfo([],null,{}),
  new import1.StaticNodeDebugInfo([],null,{}),
  new import1.StaticNodeDebugInfo([],null,{}),
  new import1.StaticNodeDebugInfo([],null,{})
]
;
var renderType_CityPicker:import4.RenderComponentType = null;
class _View_CityPicker0 extends import5.DebugAppView<import6.CityPicker> {
  _el_0: any;
  _text_1: any;
  _el_2: any;
  _text_3: any;
  _text_4: any;
  _el_5: any;
  _text_6: any;
  _el_7: any;
  _text_8: any;
  _anchor_9: any;
  private _appEl_9:import7.AppElement;
  _TemplateRef_9_5:any;
  _NgFor_9_6:import3.NgFor;
  _text_10: any;
  _text_11: any;
  _text_12: any;
  _el_13: any;
  _text_14: any;
  _el_15: any;
  _text_16: any;
  _text_17: any;
  _el_18: any;
  _text_19: any;
  _text_20: any;
  _text_21: any;
  _text_22: any;
  private _expr_0: any;
  constructor(viewUtils:import8.ViewUtils,parentInjector:import9.Injector,declarationEl:import7.AppElement) {
    super(_View_CityPicker0,renderType_CityPicker,import10.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import11.ChangeDetectionStrategy.CheckAlways,nodeDebugInfos_CityPicker0);
  }
  createInternal(rootSelector:string):import7.AppElement {
    const parentRenderNode = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this._el_0 = this.renderer.createElement(parentRenderNode,'div',this.debug(0,0,0));
    this.renderer.setElementAttribute(this._el_0,'class','dialog');
    this._text_1 = this.renderer.createText(this._el_0,'\n  ',this.debug(1,0,20));
    this._el_2 = this.renderer.createElement(this._el_0,'div',this.debug(2,1,2));
    this.renderer.setElementAttribute(this._el_2,'class','dialog-title');
    this._text_3 = this.renderer.createText(this._el_2,'Add new city',this.debug(3,1,28));
    this._text_4 = this.renderer.createText(this._el_0,'\n  ',this.debug(4,1,46));
    this._el_5 = this.renderer.createElement(this._el_0,'div',this.debug(5,2,2));
    this.renderer.setElementAttribute(this._el_5,'class','dialog-body');
    this._text_6 = this.renderer.createText(this._el_5,'\n    ',this.debug(6,2,27));
    this._el_7 = this.renderer.createElement(this._el_5,'select',this.debug(7,3,4));
    this.renderer.setElementAttribute(this._el_7,'id','selectCityToAdd');
    this._text_8 = this.renderer.createText(this._el_7,'\n          ',this.debug(8,3,41));
    this._anchor_9 = this.renderer.createTemplateAnchor(this._el_7,this.debug(9,4,10));
    this._appEl_9 = new import7.AppElement(9,7,this,this._anchor_9);
    this._TemplateRef_9_5 = new import2.TemplateRef_(this._appEl_9,viewFactory_CityPicker1);
    this._NgFor_9_6 = new import3.NgFor(this._appEl_9.vcRef,this._TemplateRef_9_5,this.parentInjector.get(import12.IterableDiffers),this.ref);
    this._text_10 = this.renderer.createText(this._el_7,'\n    ',this.debug(10,4,87));
    this._text_11 = this.renderer.createText(this._el_5,'\n  ',this.debug(11,5,13));
    this._text_12 = this.renderer.createText(this._el_0,'\n  ',this.debug(12,6,8));
    this._el_13 = this.renderer.createElement(this._el_0,'div',this.debug(13,7,2));
    this.renderer.setElementAttribute(this._el_13,'class','dialog-buttons');
    this._text_14 = this.renderer.createText(this._el_13,'\n    ',this.debug(14,7,30));
    this._el_15 = this.renderer.createElement(this._el_13,'button',this.debug(15,8,4));
    this.renderer.setElementAttribute(this._el_15,'class','button');
    this.renderer.setElementAttribute(this._el_15,'id','butAddCity');
    this._text_16 = this.renderer.createText(this._el_15,'Add',this.debug(16,8,77));
    this._text_17 = this.renderer.createText(this._el_13,'\n    ',this.debug(17,8,89));
    this._el_18 = this.renderer.createElement(this._el_13,'button',this.debug(18,9,4));
    this.renderer.setElementAttribute(this._el_18,'class','button');
    this.renderer.setElementAttribute(this._el_18,'id','butAddCancel');
    this._text_19 = this.renderer.createText(this._el_18,'Cancel',this.debug(19,9,75));
    this._text_20 = this.renderer.createText(this._el_13,'\n  ',this.debug(20,9,90));
    this._text_21 = this.renderer.createText(this._el_0,'\n',this.debug(21,10,8));
    this._text_22 = this.renderer.createText(parentRenderNode,'\n',this.debug(22,11,6));
    this._expr_0 = import11.uninitialized;
    var disposable_0:Function = this.renderer.listen(this._el_15,'click',this.eventHandler(this._handle_click_15_0.bind(this)));
    var disposable_1:Function = this.renderer.listen(this._el_18,'click',this.eventHandler(this._handle_click_18_0.bind(this)));
    this.init([],[
      this._el_0,
      this._text_1,
      this._el_2,
      this._text_3,
      this._text_4,
      this._el_5,
      this._text_6,
      this._el_7,
      this._text_8,
      this._anchor_9,
      this._text_10,
      this._text_11,
      this._text_12,
      this._el_13,
      this._text_14,
      this._el_15,
      this._text_16,
      this._text_17,
      this._el_18,
      this._text_19,
      this._text_20,
      this._text_21,
      this._text_22
    ]
    ,[
      disposable_0,
      disposable_1
    ]
    ,[]);
    return null;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import2.TemplateRef) && (9 === requestNodeIndex))) { return this._TemplateRef_9_5; }
    if (((token === import3.NgFor) && (9 === requestNodeIndex))) { return this._NgFor_9_6; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.debug(9,4,18);
    const currVal_0 = this.context.cities;
    if (import8.checkBinding(throwOnChange,this._expr_0,currVal_0)) {
      this._NgFor_9_6.ngForOf = currVal_0;
      this.renderer.setBindingDebugInfo(this._anchor_9,'ng-reflect-ng-for-of',((currVal_0 == null)? null: currVal_0.toString()));
      this._expr_0 = currVal_0;
    }
    if (!throwOnChange) { this._NgFor_9_6.ngDoCheck(); }
    this.detectContentChildrenChanges(throwOnChange);
    this.detectViewChildrenChanges(throwOnChange);
  }
  private _handle_click_15_0($event):boolean {
    this.markPathToRootAsCheckOnce();
    this.debug(15,8,43);
    const pd_0:any = ((<any>this.context.save.emit(this._el_7.value)) !== false);
    return (true && pd_0);
  }
  private _handle_click_18_0($event):boolean {
    this.markPathToRootAsCheckOnce();
    this.debug(18,9,45);
    const pd_0:any = ((<any>this.context.cancel.emit($event)) !== false);
    return (true && pd_0);
  }
}
export function viewFactory_CityPicker0(viewUtils:import8.ViewUtils,parentInjector:import9.Injector,declarationEl:import7.AppElement):import5.AppView<import6.CityPicker> {
  if ((renderType_CityPicker === null)) { (renderType_CityPicker = viewUtils.createRenderComponentType('/Users/robwormald/Dev/demos/ng2-pwa-demo/src/city-picker.html',0,import13.ViewEncapsulation.Emulated,styles_CityPicker)); }
  return new _View_CityPicker0(viewUtils,parentInjector,declarationEl);
}
const nodeDebugInfos_CityPicker1:import1.StaticNodeDebugInfo[] = [
  new import1.StaticNodeDebugInfo([],null,{}),
  new import1.StaticNodeDebugInfo([],null,{})
]
;
class _View_CityPicker1 extends import5.DebugAppView<any> {
  _el_0: any;
  _text_1: any;
  private _expr_0: any;
  private _expr_1: any;
  constructor(viewUtils:import8.ViewUtils,parentInjector:import9.Injector,declarationEl:import7.AppElement) {
    super(_View_CityPicker1,renderType_CityPicker,import10.ViewType.EMBEDDED,viewUtils,parentInjector,declarationEl,import11.ChangeDetectionStrategy.CheckAlways,nodeDebugInfos_CityPicker1);
  }
  createInternal(rootSelector:string):import7.AppElement {
    this._el_0 = this.renderer.createElement(null,'option',this.debug(0,4,10));
    this._text_1 = this.renderer.createText(this._el_0,'',this.debug(1,4,65));
    this._expr_0 = import11.uninitialized;
    this._expr_1 = import11.uninitialized;
    this.init([].concat([this._el_0]),[
      this._el_0,
      this._text_1
    ]
    ,[],[]);
    return null;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.detectContentChildrenChanges(throwOnChange);
    this.debug(0,4,46);
    const currVal_0 = this.context.$implicit.key;
    if (import8.checkBinding(throwOnChange,this._expr_0,currVal_0)) {
      this.renderer.setBindingDebugInfo(this._el_0,'ng-reflect-value',((currVal_0 == null)? null: currVal_0.toString()));
      this.renderer.setElementProperty(this._el_0,'value',currVal_0);
      this._expr_0 = currVal_0;
    }
    this.debug(1,4,65);
    const currVal_1 = import8.interpolate(1,'',this.context.$implicit.name,'');
    if (import8.checkBinding(throwOnChange,this._expr_1,currVal_1)) {
      this.renderer.setText(this._text_1,currVal_1);
      this._expr_1 = currVal_1;
    }
    this.detectViewChildrenChanges(throwOnChange);
  }
}
function viewFactory_CityPicker1(viewUtils:import8.ViewUtils,parentInjector:import9.Injector,declarationEl:import7.AppElement):import5.AppView<any> {
  return new _View_CityPicker1(viewUtils,parentInjector,declarationEl);
}
const styles_CityPicker_Host:any[] = [];
const nodeDebugInfos_CityPicker_Host0:import1.StaticNodeDebugInfo[] = [new import1.StaticNodeDebugInfo([import6.CityPicker],import6.CityPicker,{})];
var renderType_CityPicker_Host:import4.RenderComponentType = null;
class _View_CityPicker_Host0 extends import5.DebugAppView<any> {
  _el_0: any;
  private _appEl_0:import7.AppElement;
  _CityPicker_0_4:import6.CityPicker;
  constructor(viewUtils:import8.ViewUtils,parentInjector:import9.Injector,declarationEl:import7.AppElement) {
    super(_View_CityPicker_Host0,renderType_CityPicker_Host,import10.ViewType.HOST,viewUtils,parentInjector,declarationEl,import11.ChangeDetectionStrategy.CheckAlways,nodeDebugInfos_CityPicker_Host0);
  }
  createInternal(rootSelector:string):import7.AppElement {
    this._el_0 = this.selectOrCreateHostElement('city-picker',rootSelector,this.debug(0,0,0));
    this._appEl_0 = new import7.AppElement(0,null,this,this._el_0);
    var compView_0 = viewFactory_CityPicker0(this.viewUtils,this.injector(0),this._appEl_0);
    this._CityPicker_0_4 = new import6.CityPicker();
    this._appEl_0.initComponent(this._CityPicker_0_4,[],compView_0);
    compView_0.create(this._CityPicker_0_4,this.projectableNodes,null);
    this.init([].concat([this._el_0]),[this._el_0],[],[]);
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import6.CityPicker) && (0 === requestNodeIndex))) { return this._CityPicker_0_4; }
    return notFoundResult;
  }
}
function viewFactory_CityPicker_Host0(viewUtils:import8.ViewUtils,parentInjector:import9.Injector,declarationEl:import7.AppElement):import5.AppView<any> {
  if ((renderType_CityPicker_Host === null)) { (renderType_CityPicker_Host = viewUtils.createRenderComponentType('',0,import13.ViewEncapsulation.Emulated,styles_CityPicker_Host)); }
  return new _View_CityPicker_Host0(viewUtils,parentInjector,declarationEl);
}
export const CityPickerNgFactory:import14.ComponentFactory<import6.CityPicker> = new import14.ComponentFactory<import6.CityPicker>('city-picker',viewFactory_CityPicker_Host0,import6.CityPicker);